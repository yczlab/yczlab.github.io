<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IntelliJ IDEA快捷键大全</title>
      <link href="/posts/791ea0e2.html"/>
      <url>/posts/791ea0e2.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>本文参考了 IntelliJ IDEA 的官网，列举了IntelliJ IDEA（Windows 版）的所有快捷键。并在此基础上，为 90% 以上的快捷键提供了动图演示，能够直观的看到操作效果。该快捷键共分 16 种，可以方便的按各类查找自己需要的快捷键~~。原文链接：<a href="https://mp.weixin.qq.com/s/-Tk2fK_JFfuHB9TnrBV_vQ">https://mp.weixin.qq.com/s/-Tk2fK_JFfuHB9TnrBV_vQ</a></p></blockquote><h3 id="一、构建-x2F-编译"><a href="#一、构建-x2F-编译" class="headerlink" title="一、构建&#x2F;编译"></a>一、构建&#x2F;编译</h3><h4 id="1、Ctrl-F9：构建项目"><a href="#1、Ctrl-F9：构建项目" class="headerlink" title="1、Ctrl + F9：构建项目"></a>1、<font color="#C7254E">Ctrl + F9</font>：构建项目</h4><blockquote><p>该快捷键，等同于菜单【Build】—&gt;【Build Project】</p><p><img src="/posts/791ea0e2/1.png"></p><p>执行该命令后，IntelliJ IDEA 会编译项目中所有类，并将编译结果输出到out目录中。IntelliJ IDEA 支持增量构建，会在上次构建的基础上，仅编译修改的类。</p><p><img src="/posts/791ea0e2/2.gif"></p></blockquote><h4 id="2、Ctrl-Shift-F9：重新编译当前类"><a href="#2、Ctrl-Shift-F9：重新编译当前类" class="headerlink" title="2、Ctrl + Shift + F9：重新编译当前类"></a>2、<font color="#C7254E">Ctrl + Shift + F9</font>：重新编译当前类</h4><blockquote><p>该快捷键，等同于菜单【Build】—&gt;【Recompile ‘class name’】</p><p><img src="/posts/791ea0e2/3.png"></p><p>在IntelliJ IDEA 中打开要编译的类，执行该命令会编译当前类。</p><p><img src="/posts/791ea0e2/4.gif"></p></blockquote><h3 id="二、文本编辑"><a href="#二、文本编辑" class="headerlink" title="二、文本编辑"></a>二、文本编辑</h3><h4 id="1、Ctrl-X：剪切"><a href="#1、Ctrl-X：剪切" class="headerlink" title="1、Ctrl + X：剪切"></a>1、<font color="#C7254E">Ctrl + X</font>：剪切</h4><blockquote><p>剪切选中文本，若未选中则剪切当前行。</p><p><img src="/posts/791ea0e2/5.gif"></p></blockquote><h4 id="2、Ctrl-C：复制"><a href="#2、Ctrl-C：复制" class="headerlink" title="2、Ctrl + C：复制"></a>2、<font color="#C7254E">Ctrl + C</font>：复制</h4><blockquote><p>复制选中文本，若未选中则复制当前行。</p></blockquote><h4 id="3、Ctrl-V：粘贴"><a href="#3、Ctrl-V：粘贴" class="headerlink" title="3、Ctrl + V：粘贴"></a>3、<font color="#C7254E">Ctrl + V</font>：粘贴</h4><h4 id="4、Ctrl-Alt-Shift-V：粘贴为纯文本"><a href="#4、Ctrl-Alt-Shift-V：粘贴为纯文本" class="headerlink" title="4、Ctrl + Alt + Shift + V：粘贴为纯文本"></a>4、<font color="#C7254E">Ctrl + Alt + Shift + V</font>：粘贴为纯文本</h4><h4 id="5、Ctrl-Shift-V：从历史选择粘贴"><a href="#5、Ctrl-Shift-V：从历史选择粘贴" class="headerlink" title="5、Ctrl + Shift + V：从历史选择粘贴"></a>5、<font color="#C7254E">Ctrl + Shift + V</font>：从历史选择粘贴</h4><blockquote><p>从历史剪粘版中选择要粘贴的内容。</p><p><img src="/posts/791ea0e2/6.gif"></p></blockquote><h4 id="6、Ctrl-D：复制行"><a href="#6、Ctrl-D：复制行" class="headerlink" title="6、Ctrl + D：复制行"></a>6、<font color="#C7254E">Ctrl + D</font>：复制行</h4><blockquote><p>复制光标所在行。</p><p><img src="/posts/791ea0e2/7.gif"></p></blockquote><h4 id="7、Ctrl-Shift-C：复制文件路径"><a href="#7、Ctrl-Shift-C：复制文件路径" class="headerlink" title="7、Ctrl + Shift + C：复制文件路径"></a>7、<font color="#C7254E">Ctrl + Shift + C</font>：复制文件路径</h4><blockquote><p>复制选中文件所在路径。<br><img src="/posts/791ea0e2/8.gif"></p></blockquote><h4 id="8、Ctrl-Alt-Shift-C：复制引用"><a href="#8、Ctrl-Alt-Shift-C：复制引用" class="headerlink" title="8、Ctrl + Alt + Shift + C：复制引用"></a>8、<font color="#C7254E">Ctrl + Alt + Shift + C</font>：复制引用</h4><blockquote><p>复制包的路径，或者类的名称。</p><p><img src="/posts/791ea0e2/9.gif"></p></blockquote><h4 id="9、Ctrl-S：保存全部"><a href="#9、Ctrl-S：保存全部" class="headerlink" title="9、Ctrl + S：保存全部"></a>9、<font color="#C7254E">Ctrl + S</font>：保存全部</h4><h4 id="10、Ctrl-Z：撤销"><a href="#10、Ctrl-Z：撤销" class="headerlink" title="10、Ctrl + Z：撤销"></a>10、<font color="#C7254E">Ctrl + Z</font>：撤销</h4><h4 id="11、Ctrl-S：保存全部"><a href="#11、Ctrl-S：保存全部" class="headerlink" title="11、Ctrl + S：保存全部"></a>11、<font color="#C7254E">Ctrl + S</font>：保存全部</h4><blockquote><p>撤销上一步操作内容。</p></blockquote><h4 id="12、Ctrl-Shift-Z：重做"><a href="#12、Ctrl-Shift-Z：重做" class="headerlink" title="12、Ctrl + Shift + Z：重做"></a>12、<font color="#C7254E">Ctrl + Shift + Z</font>：重做</h4><blockquote><p>恢复上一步撤销内容。</p><p><img src="/posts/791ea0e2/10.gif"></p></blockquote><h4 id="13、Tab：缩进"><a href="#13、Tab：缩进" class="headerlink" title="13、Tab：缩进"></a>13、<font color="#C7254E">Tab</font>：缩进</h4><h4 id="14、Shift-Tab：取消缩进"><a href="#14、Shift-Tab：取消缩进" class="headerlink" title="14、Shift + Tab：取消缩进"></a>14、<font color="#C7254E">Shift + Tab</font>：取消缩进</h4><blockquote><p><img src="/posts/791ea0e2/11.gif"></p></blockquote><h4 id="15、Ctrl-Alt-I：自动缩进行"><a href="#15、Ctrl-Alt-I：自动缩进行" class="headerlink" title="15、Ctrl + Alt + I：自动缩进行"></a>15、<font color="#C7254E">Ctrl + Alt + I</font>：自动缩进行</h4><blockquote><p><img src="/posts/791ea0e2/12.gif"></p></blockquote><h4 id="16、Shift-Enter：开始新行"><a href="#16、Shift-Enter：开始新行" class="headerlink" title="16、Shift + Enter：开始新行"></a>16、<font color="#C7254E">Shift + Enter</font>：开始新行</h4><blockquote><p>无论光标是否在行尾，都开始新的行。</p><p><img src="/posts/791ea0e2/13.gif"></p></blockquote><h4 id="17、Ctrl-Alt-Enter：在当前行之前开始新行"><a href="#17、Ctrl-Alt-Enter：在当前行之前开始新行" class="headerlink" title="17、Ctrl + Alt + Enter：在当前行之前开始新行"></a>17、<font color="#C7254E">Ctrl + Alt + Enter</font>：在当前行之前开始新行</h4><blockquote><p><img src="/posts/791ea0e2/14.gif"></p></blockquote><h4 id="18、Ctrl-Y：删除行"><a href="#18、Ctrl-Y：删除行" class="headerlink" title="18、Ctrl + Y：删除行"></a>18、<font color="#C7254E">Ctrl + Y</font>：删除行</h4><blockquote><p>删除当前行。</p><p><img src="/posts/791ea0e2/15.gif"></p></blockquote><h4 id="19、Ctrl-Shift-U：大小写转换"><a href="#19、Ctrl-Shift-U：大小写转换" class="headerlink" title="19、Ctrl + Shift + U：大小写转换"></a>19、<font color="#C7254E">Ctrl + Shift + U</font>：大小写转换</h4><blockquote><p><img src="/posts/791ea0e2/16.gif"></p></blockquote><h4 id="20、Ctrl-Alt-Shift-Insert：创建临时文件"><a href="#20、Ctrl-Alt-Shift-Insert：创建临时文件" class="headerlink" title="20、Ctrl + Alt + Shift + Insert：创建临时文件"></a>20、<font color="#C7254E">Ctrl + Alt + Shift + Insert</font>：创建临时文件</h4><blockquote><p>可以创建各种类型的临时文件，该临时文件不会保存到磁盘中。</p><p><img src="/posts/791ea0e2/17.gif"></p></blockquote><h4 id="21、Shift-F4：在新窗口中打开"><a href="#21、Shift-F4：在新窗口中打开" class="headerlink" title="21、Shift + F4：在新窗口中打开"></a>21、<font color="#C7254E">Shift + F4</font>：在新窗口中打开</h4><blockquote><p>在新窗口打开当前文件。</p><p><img src="/posts/791ea0e2/18.gif"></p></blockquote><h3 id="三、光标操作"><a href="#三、光标操作" class="headerlink" title="三、光标操作"></a>三、光标操作</h3><h4 id="1、Ctrl-Left：左移一个单词"><a href="#1、Ctrl-Left：左移一个单词" class="headerlink" title="1、Ctrl + Left：左移一个单词"></a>1、<font color="#C7254E">Ctrl + Left</font>：左移一个单词</h4><blockquote><p><img src="/posts/791ea0e2/19.gif"></p></blockquote><h4 id="2、Ctrl-Right：右移一个单词"><a href="#2、Ctrl-Right：右移一个单词" class="headerlink" title="2、Ctrl + Right：右移一个单词"></a>2、<font color="#C7254E">Ctrl + Right</font>：右移一个单词</h4><blockquote><p><img src="/posts/791ea0e2/20.gif"></p></blockquote><h4 id="3、Home：移动至行首"><a href="#3、Home：移动至行首" class="headerlink" title="3、Home：移动至行首"></a>3、<font color="#C7254E">Home</font>：移动至行首</h4><h4 id="4、End：移动至行尾"><a href="#4、End：移动至行尾" class="headerlink" title="4、End：移动至行尾"></a>4、<font color="#C7254E">End</font>：移动至行尾</h4><blockquote><p><img src="/posts/791ea0e2/21.gif"></p></blockquote><h4 id="4、Ctrl-Shift-M：移动至大括号"><a href="#4、Ctrl-Shift-M：移动至大括号" class="headerlink" title="4、Ctrl + Shift + M：移动至大括号"></a>4、<font color="#C7254E">Ctrl + Shift + M</font>：移动至大括号</h4><blockquote><p>多次按下快捷键，可以在左右两个大括号间切换。</p><p><img src="/posts/791ea0e2/22.gif"></p></blockquote><h4 id="5、Ctrl-：移动至代码块开始"><a href="#5、Ctrl-：移动至代码块开始" class="headerlink" title="5、Ctrl + [ ：移动至代码块开始"></a>5、<font color="#C7254E">Ctrl + [</font> ：移动至代码块开始</h4><h4 id="6、Ctrl-：移动至代码块末尾"><a href="#6、Ctrl-：移动至代码块末尾" class="headerlink" title="6、Ctrl + ] ：移动至代码块末尾"></a>6、<font color="#C7254E">Ctrl + ]</font> ：移动至代码块末尾</h4><blockquote><p><img src="/posts/791ea0e2/23.gif"></p></blockquote><h4 id="7、Alt-Down：下一个方法"><a href="#7、Alt-Down：下一个方法" class="headerlink" title="7、Alt + Down：下一个方法"></a>7、<font color="#C7254E">Alt + Down</font>：下一个方法</h4><h4 id="8、Alt-Up：上一个方法"><a href="#8、Alt-Up：上一个方法" class="headerlink" title="8、Alt + Up：上一个方法"></a>8、<font color="#C7254E">Alt + Up</font>：上一个方法</h4><blockquote><p><img src="/posts/791ea0e2/24.gif"></p></blockquote><h4 id="9、Ctrl-PageUp：移动至页面顶部"><a href="#9、Ctrl-PageUp：移动至页面顶部" class="headerlink" title="9、Ctrl + PageUp：移动至页面顶部"></a>9、<font color="#C7254E">Ctrl + PageUp</font>：移动至页面顶部</h4><h4 id="10、Ctrl-PageDown：移动至页面底部"><a href="#10、Ctrl-PageDown：移动至页面底部" class="headerlink" title="10、Ctrl + PageDown：移动至页面底部"></a>10、<font color="#C7254E">Ctrl + PageDown</font>：移动至页面底部</h4><blockquote><p><img src="/posts/791ea0e2/25.gif"></p></blockquote><h4 id="11、PageUp：向上翻页"><a href="#11、PageUp：向上翻页" class="headerlink" title="11、PageUp：向上翻页"></a>11、<font color="#C7254E">PageUp</font>：向上翻页</h4><h4 id="12、PageDown：向下翻页"><a href="#12、PageDown：向下翻页" class="headerlink" title="12、PageDown：向下翻页"></a>12、<font color="#C7254E">PageDown</font>：向下翻页</h4><blockquote><p><img src="/posts/791ea0e2/26.gif"></p></blockquote><h4 id="13、Ctrl-Home：移动至文件开头"><a href="#13、Ctrl-Home：移动至文件开头" class="headerlink" title="13、Ctrl + Home：移动至文件开头"></a>13、<font color="#C7254E">Ctrl + Home</font>：移动至文件开头</h4><h4 id="14、Ctrl-End：移动至文件末尾"><a href="#14、Ctrl-End：移动至文件末尾" class="headerlink" title="14、Ctrl + End：移动至文件末尾"></a>14、<font color="#C7254E">Ctrl + End</font>：移动至文件末尾</h4><blockquote><p><img src="/posts/791ea0e2/27.gif"></p></blockquote><h3 id="四、文本选择"><a href="#四、文本选择" class="headerlink" title="四、文本选择"></a>四、文本选择</h3><h4 id="1、Ctrl-A：全选"><a href="#1、Ctrl-A：全选" class="headerlink" title="1、Ctrl + A：全选"></a>1、<font color="#C7254E">Ctrl + A</font>：全选</h4><h4 id="2、Shift-Left：向左选择"><a href="#2、Shift-Left：向左选择" class="headerlink" title="2、Shift + Left：向左选择"></a>2、<font color="#C7254E">Shift + Left</font>：向左选择</h4><h4 id="3、Shift-Right：向右选择"><a href="#3、Shift-Right：向右选择" class="headerlink" title="3、Shift + Right：向右选择"></a>3、<font color="#C7254E">Shift + Right</font>：向右选择</h4><blockquote><p><img src="/posts/791ea0e2/28.gif"></p></blockquote><h4 id="4、Ctrl-Shift-Left：向左选择一个单词"><a href="#4、Ctrl-Shift-Left：向左选择一个单词" class="headerlink" title="4、Ctrl + Shift + Left：向左选择一个单词"></a>4、<font color="#C7254E">Ctrl + Shift + Left</font>：向左选择一个单词</h4><h4 id="5、Ctrl-Shift-Right：向右选择一个单词"><a href="#5、Ctrl-Shift-Right：向右选择一个单词" class="headerlink" title="5、Ctrl + Shift + Right：向右选择一个单词"></a>5、<font color="#C7254E">Ctrl + Shift + Right</font>：向右选择一个单词</h4><blockquote><p><img src="/posts/791ea0e2/29.gif"></p></blockquote><h4 id="6、Shift-Home：向左选择至行头"><a href="#6、Shift-Home：向左选择至行头" class="headerlink" title="6、Shift + Home：向左选择至行头"></a>6、<font color="#C7254E">Shift + Home</font>：向左选择至行头</h4><h4 id="7、Shift-End：向右选择至行尾"><a href="#7、Shift-End：向右选择至行尾" class="headerlink" title="7、Shift + End：向右选择至行尾"></a>7、<font color="#C7254E">Shift + End</font>：向右选择至行尾</h4><blockquote><p><img src="/posts/791ea0e2/30.gif"></p></blockquote><h4 id="8、Shift-Up：向上选择"><a href="#8、Shift-Up：向上选择" class="headerlink" title="8、Shift + Up：向上选择"></a>8、<font color="#C7254E">Shift + Up</font>：向上选择</h4><h4 id="9、Shift-Down：向下选择"><a href="#9、Shift-Down：向下选择" class="headerlink" title="9、Shift + Down：向下选择"></a>9、<font color="#C7254E">Shift + Down</font>：向下选择</h4><blockquote><p><img src="/posts/791ea0e2/31.gif"></p></blockquote><h4 id="10、Ctrl-Shift-：选择至代码块开头"><a href="#10、Ctrl-Shift-：选择至代码块开头" class="headerlink" title="10、Ctrl + Shift + [ ：选择至代码块开头"></a>10、<font color="#C7254E">Ctrl + Shift + [</font> ：选择至代码块开头</h4><h4 id="11、Ctrl-Shift-：选择至代码块结尾"><a href="#11、Ctrl-Shift-：选择至代码块结尾" class="headerlink" title="11、Ctrl + Shift + ] ：选择至代码块结尾"></a>11、<font color="#C7254E">Ctrl + Shift + ]</font> ：选择至代码块结尾</h4><blockquote><p><img src="/posts/791ea0e2/32.gif"></p></blockquote><h4 id="12、Ctrl-Shift-PageUp：选择至页面顶部"><a href="#12、Ctrl-Shift-PageUp：选择至页面顶部" class="headerlink" title="12、Ctrl + Shift + PageUp：选择至页面顶部"></a>12、<font color="#C7254E">Ctrl + Shift + PageUp</font>：选择至页面顶部</h4><h4 id="13、Ctrl-Shift-PageDown：选择至页面底部"><a href="#13、Ctrl-Shift-PageDown：选择至页面底部" class="headerlink" title="13、Ctrl + Shift + PageDown：选择至页面底部"></a>13、<font color="#C7254E">Ctrl + Shift + PageDown</font>：选择至页面底部</h4><blockquote><p><img src="/posts/791ea0e2/33.gif"></p></blockquote><h4 id="14、Shift-PageUp：向上翻页选择"><a href="#14、Shift-PageUp：向上翻页选择" class="headerlink" title="14、Shift + PageUp：向上翻页选择"></a>14、<font color="#C7254E">Shift + PageUp</font>：向上翻页选择</h4><h4 id="15、Shift-PageDown：向下翻页选择"><a href="#15、Shift-PageDown：向下翻页选择" class="headerlink" title="15、Shift + PageDown：向下翻页选择"></a>15、<font color="#C7254E">Shift + PageDown</font>：向下翻页选择</h4><blockquote><p><img src="/posts/791ea0e2/34.gif"></p></blockquote><h4 id="16、Ctrl-Shift-Home：选择至文件开关"><a href="#16、Ctrl-Shift-Home：选择至文件开关" class="headerlink" title="16、Ctrl + Shift + Home：选择至文件开关"></a>16、<font color="#C7254E">Ctrl + Shift + Home</font>：选择至文件开关</h4><h4 id="17、Ctrl-Shift-End：选择至文件结尾"><a href="#17、Ctrl-Shift-End：选择至文件结尾" class="headerlink" title="17、Ctrl + Shift + End：选择至文件结尾"></a>17、<font color="#C7254E">Ctrl + Shift + End</font>：选择至文件结尾</h4><blockquote><p><img src="/posts/791ea0e2/35.gif"></p></blockquote><h4 id="18、Ctrl-W：扩展选择"><a href="#18、Ctrl-W：扩展选择" class="headerlink" title="18、Ctrl + W：扩展选择"></a>18、<font color="#C7254E">Ctrl + W</font>：扩展选择</h4><h4 id="19、Ctrl-Shift-W：收缩选择"><a href="#19、Ctrl-Shift-W：收缩选择" class="headerlink" title="19、Ctrl + Shift + W：收缩选择"></a>19、<font color="#C7254E">Ctrl + Shift + W</font>：收缩选择</h4><blockquote><p><img src="/posts/791ea0e2/36.gif"></p></blockquote><h3 id="五、代码折叠"><a href="#五、代码折叠" class="headerlink" title="五、代码折叠"></a>五、代码折叠</h3><h4 id="1、Ctrl-NumPad-：展开代码块"><a href="#1、Ctrl-NumPad-：展开代码块" class="headerlink" title="1、Ctrl + NumPad+ ：展开代码块"></a>1、<font color="#C7254E">Ctrl + NumPad+</font> ：展开代码块</h4><h4 id="2、Ctrl-NumPad-：折叠代码块"><a href="#2、Ctrl-NumPad-：折叠代码块" class="headerlink" title="2、Ctrl + NumPad- ：折叠代码块"></a>2、<font color="#C7254E">Ctrl + NumPad-</font> ：折叠代码块</h4><blockquote><p><img src="/posts/791ea0e2/37.gif"></p></blockquote><h4 id="3、Ctrl-Alt-NumPad-：递归展开"><a href="#3、Ctrl-Alt-NumPad-：递归展开" class="headerlink" title="3、Ctrl + Alt + NumPad+ ：递归展开"></a>3、<font color="#C7254E">Ctrl + Alt + NumPad+</font> ：递归展开</h4><h4 id="4、Ctrl-Alt-NumPad-：递归折叠"><a href="#4、Ctrl-Alt-NumPad-：递归折叠" class="headerlink" title="4、Ctrl + Alt + NumPad- ：递归折叠"></a>4、<font color="#C7254E">Ctrl + Alt + NumPad-</font> ：递归折叠</h4><blockquote><p><img src="/posts/791ea0e2/38.gif"></p></blockquote><h4 id="5、Ctrl-Shift-NumPad-：全部展开"><a href="#5、Ctrl-Shift-NumPad-：全部展开" class="headerlink" title="5、Ctrl + Shift + NumPad+ ：全部展开"></a>5、<font color="#C7254E">Ctrl + Shift + NumPad+</font> ：全部展开</h4><h4 id="6、Ctrl-Shift-NumPad-：全部折叠"><a href="#6、Ctrl-Shift-NumPad-：全部折叠" class="headerlink" title="6、Ctrl + Shift + NumPad- ：全部折叠"></a>6、<font color="#C7254E">Ctrl + Shift + NumPad-</font> ：全部折叠</h4><blockquote><p><img src="/posts/791ea0e2/39.gif"></p></blockquote><h4 id="7、Ctrl-：折叠选择"><a href="#7、Ctrl-：折叠选择" class="headerlink" title="7、Ctrl + . ：折叠选择"></a>7、<font color="#C7254E">Ctrl + .</font> ：折叠选择</h4><h3 id="六、多个插入符号和范围选择"><a href="#六、多个插入符号和范围选择" class="headerlink" title="六、多个插入符号和范围选择"></a>六、多个插入符号和范围选择</h3><h4 id="1、Alt-Shift-Click：添加-x2F-删除插入符号"><a href="#1、Alt-Shift-Click：添加-x2F-删除插入符号" class="headerlink" title="1、Alt + Shift + Click：添加&#x2F;删除插入符号"></a>1、<font color="#C7254E">Alt + Shift + Click</font>：添加&#x2F;删除插入符号</h4><blockquote><p><img src="/posts/791ea0e2/40.gif"></p></blockquote><h4 id="2、Alt-Shift-Insert：切换列选择模式"><a href="#2、Alt-Shift-Insert：切换列选择模式" class="headerlink" title="2、Alt + Shift + Insert：切换列选择模式"></a>2、<font color="#C7254E">Alt + Shift + Insert</font>：切换列选择模式</h4><blockquote><p><img src="/posts/791ea0e2/41.gif"></p></blockquote><h4 id="3、双击Ctrl-Up：向上克隆插入符号"><a href="#3、双击Ctrl-Up：向上克隆插入符号" class="headerlink" title="3、双击Ctrl + Up：向上克隆插入符号"></a>3、<font color="#C7254E">双击Ctrl + Up</font>：向上克隆插入符号</h4><blockquote><p>按Ctrl键两次，然后在不松开的情况下按向上箭头键。</p><p><img src="/posts/791ea0e2/42.gif"></p></blockquote><h4 id="4、双击Ctrl-Down：向下克隆插入符号"><a href="#4、双击Ctrl-Down：向下克隆插入符号" class="headerlink" title="4、双击Ctrl + Down：向下克隆插入符号"></a>4、<font color="#C7254E">双击Ctrl + Down</font>：向下克隆插入符号</h4><blockquote><p>按Ctrl键两次，然后在不松开的情况下按向下箭头键。</p><p><img src="/posts/791ea0e2/43.gif"></p></blockquote><h4 id="5、Alt-Shift-G：将插入符号添加到选择中的每一行"><a href="#5、Alt-Shift-G：将插入符号添加到选择中的每一行" class="headerlink" title="5、Alt + Shift + G：将插入符号添加到选择中的每一行"></a>5、<font color="#C7254E">Alt + Shift + G</font>：将插入符号添加到选择中的每一行</h4><blockquote><p><img src="/posts/791ea0e2/44.gif"></p></blockquote><h4 id="6、Alt-J：选择单位下次出现的位置"><a href="#6、Alt-J：选择单位下次出现的位置" class="headerlink" title="6、Alt + J：选择单位下次出现的位置"></a>6、<font color="#C7254E">Alt + J</font>：选择单位下次出现的位置</h4><h4 id="7、Alt-Shift-J：取消最后一次选择"><a href="#7、Alt-Shift-J：取消最后一次选择" class="headerlink" title="7、Alt + Shift + J：取消最后一次选择"></a>7、<font color="#C7254E">Alt + Shift + J</font>：取消最后一次选择</h4><blockquote><p><img src="/posts/791ea0e2/45.gif"></p></blockquote><h4 id="8、Ctrl-Alt-Shift-J：选择所有出现的位置"><a href="#8、Ctrl-Alt-Shift-J：选择所有出现的位置" class="headerlink" title="8、Ctrl + Alt + Shift + J：选择所有出现的位置"></a>8、<font color="#C7254E">Ctrl + Alt + Shift + J</font>：选择所有出现的位置</h4><blockquote><p><img src="/posts/791ea0e2/46.gif"></p></blockquote><h4 id="9、Alt-Shift-Middle-Click：创建矩形选择"><a href="#9、Alt-Shift-Middle-Click：创建矩形选择" class="headerlink" title="9、Alt + Shift + Middle-Click：创建矩形选择"></a>9、<font color="#C7254E">Alt + Shift + Middle-Click</font>：创建矩形选择</h4><blockquote><p><img src="/posts/791ea0e2/47.gif"></p></blockquote><h4 id="10、Alt-Click：拖拽以创建矩形选择区"><a href="#10、Alt-Click：拖拽以创建矩形选择区" class="headerlink" title="10、Alt + Click：拖拽以创建矩形选择区"></a>10、<font color="#C7254E">Alt + Click</font>：拖拽以创建矩形选择区</h4><blockquote><p><img src="/posts/791ea0e2/48.gif"></p></blockquote><h4 id="11、Ctrl-Alt-Shift-Click：拖拽以创建多个矩形选择区"><a href="#11、Ctrl-Alt-Shift-Click：拖拽以创建多个矩形选择区" class="headerlink" title="11、Ctrl + Alt + Shift + Click：拖拽以创建多个矩形选择区"></a>11、<font color="#C7254E">Ctrl + Alt + Shift + Click</font>：拖拽以创建多个矩形选择区</h4><blockquote><p><img src="/posts/791ea0e2/49.gif"></p></blockquote><h3 id="七、辅助编码"><a href="#七、辅助编码" class="headerlink" title="七、辅助编码"></a>七、辅助编码</h3><h4 id="1、Alt-Enter：显示建议操作"><a href="#1、Alt-Enter：显示建议操作" class="headerlink" title="1、Alt + Enter：显示建议操作"></a>1、<font color="#C7254E">Alt + Enter</font>：显示建议操作</h4><blockquote><p>该快捷键又称为“万通快捷键”，它会根据不同的语境建议不同的操作。下面这个演示只是其中的一种，还有很多种用法，你可以尝试一下。</p><p><img src="/posts/791ea0e2/50.gif"></p></blockquote><h4 id="2、Ctrl-Space：代码补全"><a href="#2、Ctrl-Space：代码补全" class="headerlink" title="2、Ctrl + Space：代码补全"></a>2、<font color="#C7254E">Ctrl + Space</font>：代码补全</h4><blockquote><p><img src="/posts/791ea0e2/51.gif"></p></blockquote><h4 id="3、Ctrl-Shift-Space：类型匹配代码补全"><a href="#3、Ctrl-Shift-Space：类型匹配代码补全" class="headerlink" title="3、Ctrl + Shift + Space：类型匹配代码补全"></a>3、<font color="#C7254E">Ctrl + Shift + Space</font>：类型匹配代码补全</h4><blockquote><p><img src="/posts/791ea0e2/52.gif"></p></blockquote><h4 id="4、Ctrl-Alt-Space：第二次代码补全"><a href="#4、Ctrl-Alt-Space：第二次代码补全" class="headerlink" title="4、Ctrl + Alt + Space：第二次代码补全"></a>4、<font color="#C7254E">Ctrl + Alt + Space</font>：第二次代码补全</h4><blockquote><p><img src="/posts/791ea0e2/53.gif"></p></blockquote><h4 id="5、Ctrl-Shift-Enter：补全当前语句"><a href="#5、Ctrl-Shift-Enter：补全当前语句" class="headerlink" title="5、Ctrl + Shift + Enter：补全当前语句"></a>5、<font color="#C7254E">Ctrl + Shift + Enter</font>：补全当前语句</h4><blockquote><p><img src="/posts/791ea0e2/54.gif"></p></blockquote><h4 id="6、Ctrl-Alt-L：格式化代码"><a href="#6、Ctrl-Alt-L：格式化代码" class="headerlink" title="6、Ctrl + Alt + L：格式化代码"></a>6、<font color="#C7254E">Ctrl + Alt + L</font>：格式化代码</h4><blockquote><p><img src="/posts/791ea0e2/55.gif"></p></blockquote><h4 id="7、Ctrl-P：参数信息提醒"><a href="#7、Ctrl-P：参数信息提醒" class="headerlink" title="7、Ctrl + P：参数信息提醒"></a>7、<font color="#C7254E">Ctrl + P</font>：参数信息提醒</h4><blockquote><p><img src="/posts/791ea0e2/56.gif"></p></blockquote><h4 id="8、Ctrl-Q：快速文档"><a href="#8、Ctrl-Q：快速文档" class="headerlink" title="8、Ctrl + Q：快速文档"></a>8、<font color="#C7254E">Ctrl + Q</font>：快速文档</h4><blockquote><p><img src="/posts/791ea0e2/57.gif"></p></blockquote><h4 id="9、Ctrl-Shift-Up：向上移动语句"><a href="#9、Ctrl-Shift-Up：向上移动语句" class="headerlink" title="9、Ctrl + Shift + Up：向上移动语句"></a>9、<font color="#C7254E">Ctrl + Shift + Up</font>：向上移动语句</h4><h4 id="10、Ctrl-Shift-Down：向下移动语句"><a href="#10、Ctrl-Shift-Down：向下移动语句" class="headerlink" title="10、Ctrl + Shift + Down：向下移动语句"></a>10、<font color="#C7254E">Ctrl + Shift + Down</font>：向下移动语句</h4><blockquote><p><img src="/posts/791ea0e2/58.gif"></p></blockquote><h4 id="11、Ctrl-Alt-Shift-Left：向左移动元素"><a href="#11、Ctrl-Alt-Shift-Left：向左移动元素" class="headerlink" title="11、Ctrl + Alt + Shift + Left：向左移动元素"></a>11、<font color="#C7254E">Ctrl + Alt + Shift + Left</font>：向左移动元素</h4><h4 id="12、Ctrl-Alt-Shift-Right：向右移动元素"><a href="#12、Ctrl-Alt-Shift-Right：向右移动元素" class="headerlink" title="12、Ctrl + Alt + Shift + Right：向右移动元素"></a>12、<font color="#C7254E">Ctrl + Alt + Shift + Right</font>：向右移动元素</h4><blockquote><p><img src="/posts/791ea0e2/59.gif"></p></blockquote><h4 id="13、Alt-Shift-Up：向上移动队列"><a href="#13、Alt-Shift-Up：向上移动队列" class="headerlink" title="13、Alt + Shift + Up：向上移动队列"></a>13、<font color="#C7254E">Alt + Shift + Up</font>：向上移动队列</h4><h4 id="14、Alt-Shift-Down：向下移动队列"><a href="#14、Alt-Shift-Down：向下移动队列" class="headerlink" title="14、Alt + Shift + Down：向下移动队列"></a>14、<font color="#C7254E">Alt + Shift + Down</font>：向下移动队列</h4><blockquote><p><img src="/posts/791ea0e2/60.gif"></p></blockquote><h4 id="15、Ctrl-x2F-：添加行注释"><a href="#15、Ctrl-x2F-：添加行注释" class="headerlink" title="15、Ctrl + &#x2F; ：添加行注释"></a>15、<font color="#C7254E">Ctrl + &#x2F;</font> ：添加行注释</h4><p><img src="/posts/791ea0e2/61.gif"></p><h4 id="15、Ctrl-Shift-x2F-：添加块注释"><a href="#15、Ctrl-Shift-x2F-：添加块注释" class="headerlink" title="15、Ctrl + Shift + &#x2F; ：添加块注释"></a>15、<font color="#C7254E">Ctrl + Shift + &#x2F;</font> ：添加块注释</h4><blockquote><p><img src="/posts/791ea0e2/62.gif"></p></blockquote><h4 id="16、Alt-Insert：生产语句"><a href="#16、Alt-Insert：生产语句" class="headerlink" title="16、Alt + Insert：生产语句"></a>16、<font color="#C7254E">Alt + Insert</font>：生产语句</h4><blockquote><p><img src="/posts/791ea0e2/63.gif"></p></blockquote><h3 id="八、上下文导航"><a href="#八、上下文导航" class="headerlink" title="八、上下文导航"></a>八、上下文导航</h3><h4 id="1、Alt-Down：跳转至下一个方法"><a href="#1、Alt-Down：跳转至下一个方法" class="headerlink" title="1、Alt + Down：跳转至下一个方法"></a>1、<font color="#C7254E">Alt + Down</font>：跳转至下一个方法</h4><h4 id="2、Alt-Up：跳转至上一个方法"><a href="#2、Alt-Up：跳转至上一个方法" class="headerlink" title="2、Alt + Up：跳转至上一个方法"></a>2、<font color="#C7254E">Alt + Up</font>：跳转至上一个方法</h4><blockquote><p><img src="/posts/791ea0e2/64.gif"></p></blockquote><h4 id="3、Ctrl-G：跳转到指定行"><a href="#3、Ctrl-G：跳转到指定行" class="headerlink" title="3、Ctrl + G：跳转到指定行"></a>3、<font color="#C7254E">Ctrl + G</font>：跳转到指定行</h4><blockquote><p><img src="/posts/791ea0e2/65.gif"></p></blockquote><h4 id="4、Ctrl-Tab：切换活动文件"><a href="#4、Ctrl-Tab：切换活动文件" class="headerlink" title="4、Ctrl + Tab：切换活动文件"></a>4、<font color="#C7254E">Ctrl + Tab</font>：切换活动文件</h4><blockquote><p><img src="/posts/791ea0e2/66.gif"></p></blockquote><h4 id="5、Alt-F1：选择文件的定位"><a href="#5、Alt-F1：选择文件的定位" class="headerlink" title="5、Alt + F1：选择文件的定位"></a>5、<font color="#C7254E">Alt + F1</font>：选择文件的定位</h4><blockquote><p><img src="/posts/791ea0e2/67.gif"></p></blockquote><h4 id="6、Ctrl-E：最近的文件"><a href="#6、Ctrl-E：最近的文件" class="headerlink" title="6、Ctrl + E：最近的文件"></a>6、<font color="#C7254E">Ctrl + E</font>：最近的文件</h4><blockquote><p><img src="/posts/791ea0e2/68.gif"></p></blockquote><h4 id="7、Ctrl-Shift-Backspace：返回上次编辑位置"><a href="#7、Ctrl-Shift-Backspace：返回上次编辑位置" class="headerlink" title="7、Ctrl + Shift + Backspace：返回上次编辑位置"></a>7、<font color="#C7254E">Ctrl + Shift + Backspace</font>：返回上次编辑位置</h4><blockquote><p><img src="/posts/791ea0e2/69.gif"></p></blockquote><h4 id="8、Ctrl-Alt-Left：后退"><a href="#8、Ctrl-Alt-Left：后退" class="headerlink" title="8、Ctrl + Alt + Left：后退"></a>8、<font color="#C7254E">Ctrl + Alt + Left</font>：后退</h4><h4 id="9、Ctrl-Alt-Right：前进"><a href="#9、Ctrl-Alt-Right：前进" class="headerlink" title="9、Ctrl + Alt + Right：前进"></a>9、<font color="#C7254E">Ctrl + Alt + Right</font>：前进</h4><blockquote><p><img src="/posts/791ea0e2/70.gif"></p></blockquote><h4 id="10、Ctrl-Alt-Down：下一事件"><a href="#10、Ctrl-Alt-Down：下一事件" class="headerlink" title="10、Ctrl + Alt + Down：下一事件"></a>10、<font color="#C7254E">Ctrl + Alt + Down</font>：下一事件</h4><h4 id="11、Ctrl-Alt-Up：上一事件"><a href="#11、Ctrl-Alt-Up：上一事件" class="headerlink" title="11、Ctrl + Alt + Up：上一事件"></a>11、<font color="#C7254E">Ctrl + Alt + Up</font>：上一事件</h4><blockquote><p><img src="/posts/791ea0e2/71.gif"></p></blockquote><h4 id="12、Alt-Right：选择下一个选项卡"><a href="#12、Alt-Right：选择下一个选项卡" class="headerlink" title="12、Alt + Right：选择下一个选项卡"></a>12、<font color="#C7254E">Alt + Right</font>：选择下一个选项卡</h4><h4 id="13、Alt-Left：选择下一个选项卡"><a href="#13、Alt-Left：选择下一个选项卡" class="headerlink" title="13、Alt + Left：选择下一个选项卡"></a>13、<font color="#C7254E">Alt + Left</font>：选择下一个选项卡</h4><blockquote><p><img src="/posts/791ea0e2/72.gif"></p></blockquote><h4 id="14、F11：切换匿名书签"><a href="#14、F11：切换匿名书签" class="headerlink" title="14、F11：切换匿名书签"></a>14、<font color="#C7254E">F11</font>：切换匿名书签</h4><blockquote><p><img src="/posts/791ea0e2/73.gif"></p></blockquote><h4 id="15、Ctrl-Shift-digit-：用数字切换书签"><a href="#15、Ctrl-Shift-digit-：用数字切换书签" class="headerlink" title="15、Ctrl + Shift + [digit]：用数字切换书签"></a>15、<font color="#C7254E">Ctrl + Shift + [digit]</font>：用数字切换书签</h4><blockquote><p><img src="/posts/791ea0e2/74.gif"></p></blockquote><h4 id="16、Ctrl-F11：使用助词符切换书签"><a href="#16、Ctrl-F11：使用助词符切换书签" class="headerlink" title="16、Ctrl + F11：使用助词符切换书签"></a>16、<font color="#C7254E">Ctrl + F11</font>：使用助词符切换书签</h4><blockquote><p><img src="/posts/791ea0e2/75.gif"></p></blockquote><h4 id="17、Shift-F11：显示所有书签"><a href="#17、Shift-F11：显示所有书签" class="headerlink" title="17、Shift + F11：显示所有书签"></a>17、<font color="#C7254E">Shift + F11</font>：显示所有书签</h4><blockquote><p><img src="/posts/791ea0e2/76.gif"></p></blockquote><h4 id="18、Ctrl-digit-：用数字跳转到书签"><a href="#18、Ctrl-digit-：用数字跳转到书签" class="headerlink" title="18、Ctrl + [digit]：用数字跳转到书签"></a>18、<font color="#C7254E">Ctrl + [digit]</font>：用数字跳转到书签</h4><blockquote><p><img src="/posts/791ea0e2/77.gif"></p></blockquote><h4 id="19、Alt-7：显示结构窗口"><a href="#19、Alt-7：显示结构窗口" class="headerlink" title="19、Alt + 7：显示结构窗口"></a>19、<font color="#C7254E">Alt + 7</font>：显示结构窗口</h4><blockquote><p><img src="/posts/791ea0e2/78.gif"></p></blockquote><h4 id="20、Alt-3：显示查找窗口"><a href="#20、Alt-3：显示查找窗口" class="headerlink" title="20、Alt + 3：显示查找窗口"></a>20、<font color="#C7254E">Alt + 3</font>：显示查找窗口</h4><blockquote><p><img src="/posts/791ea0e2/79.gif"></p></blockquote><h3 id="九、查找操作"><a href="#九、查找操作" class="headerlink" title="九、查找操作"></a>九、查找操作</h3><h4 id="1、双击Shift：查找所有"><a href="#1、双击Shift：查找所有" class="headerlink" title="1、双击Shift：查找所有"></a>1、<font color="#C7254E">双击Shift</font>：查找所有</h4><blockquote><p><img src="/posts/791ea0e2/80.gif"></p></blockquote><h4 id="2、Ctrl-F：查找字符（当前文件）"><a href="#2、Ctrl-F：查找字符（当前文件）" class="headerlink" title="2、Ctrl + F：查找字符（当前文件）"></a>2、<font color="#C7254E">Ctrl + F</font>：查找字符（当前文件）</h4><blockquote><p><img src="/posts/791ea0e2/81.gif"></p></blockquote><h4 id="3、F3：查找下一个"><a href="#3、F3：查找下一个" class="headerlink" title="3、F3：查找下一个"></a>3、<font color="#C7254E">F3</font>：查找下一个</h4><h4 id="4、Shift-F3：查找上一个"><a href="#4、Shift-F3：查找上一个" class="headerlink" title="4、Shift + F3：查找上一个"></a>4、<font color="#C7254E">Shift + F3</font>：查找上一个</h4><blockquote><p><img src="/posts/791ea0e2/82.gif"></p></blockquote><h4 id="5、Ctrl-R：替换字符（当前文件）"><a href="#5、Ctrl-R：替换字符（当前文件）" class="headerlink" title="5、Ctrl + R：替换字符（当前文件）"></a>5、<font color="#C7254E">Ctrl + R</font>：替换字符（当前文件）</h4><blockquote><p><img src="/posts/791ea0e2/83.gif"></p></blockquote><h4 id="6、Ctrl-Shift-F：查找字符（所有文件）"><a href="#6、Ctrl-Shift-F：查找字符（所有文件）" class="headerlink" title="6、Ctrl + Shift + F：查找字符（所有文件）"></a>6、<font color="#C7254E">Ctrl + Shift + F</font>：查找字符（所有文件）</h4><blockquote><p><img src="/posts/791ea0e2/84.gif"></p></blockquote><h4 id="7、Ctrl-Shift-R：替换字符（所有文件）"><a href="#7、Ctrl-Shift-R：替换字符（所有文件）" class="headerlink" title="7、Ctrl + Shift + R：替换字符（所有文件）"></a>7、<font color="#C7254E">Ctrl + Shift + R</font>：替换字符（所有文件）</h4><blockquote><p><img src="/posts/791ea0e2/85.gif"></p></blockquote><h4 id="8、Ctrl-F3：跳转到光标处单词的下一位置"><a href="#8、Ctrl-F3：跳转到光标处单词的下一位置" class="headerlink" title="8、Ctrl + F3：跳转到光标处单词的下一位置"></a>8、<font color="#C7254E">Ctrl + F3</font>：跳转到光标处单词的下一位置</h4><blockquote><p><img src="/posts/791ea0e2/86.gif"></p></blockquote><h4 id="9、Ctrl-Shift-N：查找文件并跳转"><a href="#9、Ctrl-Shift-N：查找文件并跳转" class="headerlink" title="9、Ctrl + Shift + N：查找文件并跳转"></a>9、<font color="#C7254E">Ctrl + Shift + N</font>：查找文件并跳转</h4><blockquote><p><img src="/posts/791ea0e2/87.gif"></p></blockquote><h4 id="10、Ctrl-F12：打开文件结构"><a href="#10、Ctrl-F12：打开文件结构" class="headerlink" title="10、Ctrl + F12：打开文件结构"></a>10、<font color="#C7254E">Ctrl + F12</font>：打开文件结构</h4><blockquote><p><img src="/posts/791ea0e2/88.gif"></p></blockquote><h4 id="11、Ctrl-Alt-Shift-N：查找符号（变量、方法等）"><a href="#11、Ctrl-Alt-Shift-N：查找符号（变量、方法等）" class="headerlink" title="11、Ctrl + Alt + Shift + N：查找符号（变量、方法等）"></a>11、<font color="#C7254E">Ctrl + Alt + Shift + N</font>：查找符号（变量、方法等）</h4><blockquote><p><img src="/posts/791ea0e2/89.gif"></p></blockquote><h4 id="12、Ctrl-Shift-A：查找动作"><a href="#12、Ctrl-Shift-A：查找动作" class="headerlink" title="12、Ctrl + Shift + A：查找动作"></a>12、<font color="#C7254E">Ctrl + Shift + A</font>：查找动作</h4><blockquote><p><img src="/posts/791ea0e2/90.gif"></p></blockquote><h3 id="十、符号导航"><a href="#十、符号导航" class="headerlink" title="十、符号导航"></a>十、符号导航</h3><h4 id="1、Alt-F7：查找用法"><a href="#1、Alt-F7：查找用法" class="headerlink" title="1、Alt + F7：查找用法"></a>1、<font color="#C7254E">Alt + F7</font>：查找用法</h4><h4 id="2、Ctrl-B：跳转到声明处"><a href="#2、Ctrl-B：跳转到声明处" class="headerlink" title="2、Ctrl + B：跳转到声明处"></a>2、<font color="#C7254E">Ctrl + B</font>：跳转到声明处</h4><blockquote><p><img src="/posts/791ea0e2/91.gif"></p></blockquote><h4 id="3、Ctrl-Shift-B：跳转到声明类处"><a href="#3、Ctrl-Shift-B：跳转到声明类处" class="headerlink" title="3、Ctrl + Shift + B：跳转到声明类处"></a>3、<font color="#C7254E">Ctrl + Shift + B</font>：跳转到声明类处</h4><blockquote><p><img src="/posts/791ea0e2/92.gif"></p></blockquote><h4 id="4、Ctrl-Alt-F7：显示用法"><a href="#4、Ctrl-Alt-F7：显示用法" class="headerlink" title="4、Ctrl + Alt + F7：显示用法"></a>4、<font color="#C7254E">Ctrl + Alt + F7</font>：显示用法</h4><h4 id="5、Ctrl-U：跳转到超级方法"><a href="#5、Ctrl-U：跳转到超级方法" class="headerlink" title="5、Ctrl + U：跳转到超级方法"></a>5、<font color="#C7254E">Ctrl + U</font>：跳转到超级方法</h4><h4 id="6、Ctrl-Alt-B：跳转到实现方法"><a href="#6、Ctrl-Alt-B：跳转到实现方法" class="headerlink" title="6、Ctrl + Alt + B：跳转到实现方法"></a>6、<font color="#C7254E">Ctrl + Alt + B</font>：跳转到实现方法</h4><blockquote><p><img src="/posts/791ea0e2/93.gif"></p></blockquote><h4 id="7、Ctrl-Shift-F7：突出显示文件中的用法"><a href="#7、Ctrl-Shift-F7：突出显示文件中的用法" class="headerlink" title="7、Ctrl + Shift + F7：突出显示文件中的用法"></a>7、<font color="#C7254E">Ctrl + Shift + F7</font>：突出显示文件中的用法</h4><h3 id="十一、代码分析"><a href="#十一、代码分析" class="headerlink" title="十一、代码分析"></a>十一、代码分析</h3><h4 id="1、Alt-Enter：显示意图操作"><a href="#1、Alt-Enter：显示意图操作" class="headerlink" title="1、Alt + Enter：显示意图操作"></a>1、<font color="#C7254E">Alt + Enter</font>：显示意图操作</h4><blockquote><p><img src="/posts/791ea0e2/94.gif"></p></blockquote><h4 id="2、Ctrl-F1：显示错误描述"><a href="#2、Ctrl-F1：显示错误描述" class="headerlink" title="2、Ctrl + F1：显示错误描述"></a>2、<font color="#C7254E">Ctrl + F1</font>：显示错误描述</h4><blockquote><p><img src="/posts/791ea0e2/95.gif"></p></blockquote><h4 id="3、F2：下一个突出显示的错误"><a href="#3、F2：下一个突出显示的错误" class="headerlink" title="3、F2：下一个突出显示的错误"></a>3、<font color="#C7254E">F2</font>：下一个突出显示的错误</h4><h4 id="4、Shift-F2：上一个突出显示的错误"><a href="#4、Shift-F2：上一个突出显示的错误" class="headerlink" title="4、Shift + F2：上一个突出显示的错误"></a>4、<font color="#C7254E">Shift + F2</font>：上一个突出显示的错误</h4><blockquote><p><img src="/posts/791ea0e2/96.gif"></p></blockquote><h4 id="5、Ctrl-Alt-Shift-I：按名称运行检查"><a href="#5、Ctrl-Alt-Shift-I：按名称运行检查" class="headerlink" title="5、Ctrl + Alt + Shift + I：按名称运行检查"></a>5、<font color="#C7254E">Ctrl + Alt + Shift + I</font>：按名称运行检查</h4><blockquote><p><img src="/posts/791ea0e2/97.gif"></p></blockquote><h4 id="5、Alt-6：显示问题窗口"><a href="#5、Alt-6：显示问题窗口" class="headerlink" title="5、Alt + 6：显示问题窗口"></a>5、<font color="#C7254E">Alt + 6</font>：显示问题窗口</h4><blockquote><p><img src="/posts/791ea0e2/98.gif"></p></blockquote><h3 id="十二、运行和调试"><a href="#十二、运行和调试" class="headerlink" title="十二、运行和调试"></a>十二、运行和调试</h3><h4 id="1、双击Ctrl：运行所有"><a href="#1、双击Ctrl：运行所有" class="headerlink" title="1、双击Ctrl：运行所有"></a>1、<font color="#C7254E">双击Ctrl</font>：运行所有</h4><blockquote><p><img src="/posts/791ea0e2/99.gif"></p></blockquote><h4 id="2、Shift-F10：运行上下文配置"><a href="#2、Shift-F10：运行上下文配置" class="headerlink" title="2、Shift + F10：运行上下文配置"></a>2、<font color="#C7254E">Shift + F10</font>：运行上下文配置</h4><blockquote><p><img src="/posts/791ea0e2/100.gif"></p></blockquote><h4 id="3、Alt-Shift-F10：打开运行窗口"><a href="#3、Alt-Shift-F10：打开运行窗口" class="headerlink" title="3、Alt + Shift + F10：打开运行窗口"></a>3、<font color="#C7254E">Alt + Shift + F10</font>：打开运行窗口</h4><blockquote><p><img src="/posts/791ea0e2/101.gif"></p></blockquote><h4 id="4、Shift-F9：调试上下文配置"><a href="#4、Shift-F9：调试上下文配置" class="headerlink" title="4、Shift + F9：调试上下文配置"></a>4、<font color="#C7254E">Shift + F9</font>：调试上下文配置</h4><blockquote><p><img src="/posts/791ea0e2/102.gif"></p></blockquote><h4 id="5、Alt-Shift-F9：打开调试窗口"><a href="#5、Alt-Shift-F9：打开调试窗口" class="headerlink" title="5、Alt + Shift + F9：打开调试窗口"></a>5、<font color="#C7254E">Alt + Shift + F9</font>：打开调试窗口</h4><blockquote><p><img src="/posts/791ea0e2/103.gif"></p></blockquote><h4 id="6、Ctrl-Alt-F5：附加到进程"><a href="#6、Ctrl-Alt-F5：附加到进程" class="headerlink" title="6、Ctrl + Alt + F5：附加到进程"></a>6、<font color="#C7254E">Ctrl + Alt + F5</font>：附加到进程</h4><h4 id="7、Ctrl-F2：停止"><a href="#7、Ctrl-F2：停止" class="headerlink" title="7、Ctrl + F2：停止"></a>7、<font color="#C7254E">Ctrl + F2</font>：停止</h4><blockquote><p><img src="/posts/791ea0e2/104.gif"></p></blockquote><h4 id="8、F9：运行至下一断点"><a href="#8、F9：运行至下一断点" class="headerlink" title="8、F9：运行至下一断点"></a>8、<font color="#C7254E">F9</font>：运行至下一断点</h4><blockquote><p><img src="/posts/791ea0e2/105.gif"></p></blockquote><h4 id="9、Ctrl-Shift-F2：停止后台进程"><a href="#9、Ctrl-Shift-F2：停止后台进程" class="headerlink" title="9、Ctrl + Shift + F2：停止后台进程"></a>9、<font color="#C7254E">Ctrl + Shift + F2</font>：停止后台进程</h4><h4 id="10、F8：跨过调用"><a href="#10、F8：跨过调用" class="headerlink" title="10、F8：跨过调用"></a>10、<font color="#C7254E">F8</font>：跨过调用</h4><blockquote><p><img src="/posts/791ea0e2/106.gif"></p></blockquote><h4 id="11、Alt-Shift-F8：强制跨过调用"><a href="#11、Alt-Shift-F8：强制跨过调用" class="headerlink" title="11、Alt + Shift + F8：强制跨过调用"></a>11、<font color="#C7254E">Alt + Shift + F8</font>：强制跨过调用</h4><h4 id="12、F7：进入调用"><a href="#12、F7：进入调用" class="headerlink" title="12、F7：进入调用"></a>12、<font color="#C7254E">F7</font>：进入调用</h4><blockquote><p><img src="/posts/791ea0e2/107.gif"></p></blockquote><h4 id="13、AShift-F7：智能进入调用"><a href="#13、AShift-F7：智能进入调用" class="headerlink" title="13、AShift + F7：智能进入调用"></a>13、<font color="#C7254E">AShift + F7</font>：智能进入调用</h4><h4 id="14、AAlt-Shift-F7：强制进入调用"><a href="#14、AAlt-Shift-F7：强制进入调用" class="headerlink" title="14、AAlt + Shift + F7：强制进入调用"></a>14、<font color="#C7254E">AAlt + Shift + F7</font>：强制进入调用</h4><h4 id="15、AShift-F8：跳出调用"><a href="#15、AShift-F8：跳出调用" class="headerlink" title="15、AShift + F8：跳出调用"></a>15、<font color="#C7254E">AShift + F8</font>：跳出调用</h4><blockquote><p><img src="/posts/791ea0e2/108.gif"></p></blockquote><h4 id="16、Alt-F9：运行至光标处"><a href="#16、Alt-F9：运行至光标处" class="headerlink" title="16、Alt + F9：运行至光标处"></a>16、<font color="#C7254E">Alt + F9</font>：运行至光标处</h4><blockquote><p><img src="/posts/791ea0e2/109.gif"></p></blockquote><h4 id="17、Ctrl-Alt-F9：强制运行至光标处"><a href="#17、Ctrl-Alt-F9：强制运行至光标处" class="headerlink" title="17、Ctrl + Alt + F9：强制运行至光标处"></a>17、<font color="#C7254E">Ctrl + Alt + F9</font>：强制运行至光标处</h4><h4 id="18、Alt-F10：显示执行点"><a href="#18、Alt-F10：显示执行点" class="headerlink" title="18、Alt + F10：显示执行点"></a>18、<font color="#C7254E">Alt + F10</font>：显示执行点</h4><blockquote><p><img src="/posts/791ea0e2/110.gif"></p></blockquote><h4 id="19、Alt-F8：评估表达式"><a href="#19、Alt-F8：评估表达式" class="headerlink" title="19、Alt + F8：评估表达式"></a>19、<font color="#C7254E">Alt + F8</font>：评估表达式</h4><h4 id="20、Ctrl-Alt-F8：快速评估表达式"><a href="#20、Ctrl-Alt-F8：快速评估表达式" class="headerlink" title="20、Ctrl + Alt + F8：快速评估表达式"></a>20、<font color="#C7254E">Ctrl + Alt + F8</font>：快速评估表达式</h4><h4 id="21、Ctrl-F8：切换行断点"><a href="#21、Ctrl-F8：切换行断点" class="headerlink" title="21、Ctrl + F8：切换行断点"></a>21、<font color="#C7254E">Ctrl + F8</font>：切换行断点</h4><blockquote><p><img src="/posts/791ea0e2/111.gif"></p></blockquote><h4 id="22、Ctrl-Alt-Shift-F8：切换临时行断点"><a href="#22、Ctrl-Alt-Shift-F8：切换临时行断点" class="headerlink" title="22、Ctrl + Alt + Shift + F8：切换临时行断点"></a>22、<font color="#C7254E">Ctrl + Alt + Shift + F8</font>：切换临时行断点</h4><blockquote><p><img src="/posts/791ea0e2/112.gif"></p></blockquote><h4 id="23、Ctrl-Shift-F8：查看断点"><a href="#23、Ctrl-Shift-F8：查看断点" class="headerlink" title="23、Ctrl + Shift + F8：查看断点"></a>23、<font color="#C7254E">Ctrl + Shift + F8</font>：查看断点</h4><blockquote><p><img src="/posts/791ea0e2/113.gif"></p></blockquote><h4 id="24、Ctrl-Shift-F8：编辑断点"><a href="#24、Ctrl-Shift-F8：编辑断点" class="headerlink" title="24、Ctrl + Shift + F8：编辑断点"></a>24、<font color="#C7254E">Ctrl + Shift + F8</font>：编辑断点</h4><blockquote><p><img src="/posts/791ea0e2/114.gif"></p></blockquote><h4 id="25、Alt-4：显示运行窗口"><a href="#25、Alt-4：显示运行窗口" class="headerlink" title="25、Alt + 4：显示运行窗口"></a>25、<font color="#C7254E">Alt + 4</font>：显示运行窗口</h4><h4 id="26、Alt-5：显示调试窗口"><a href="#26、Alt-5：显示调试窗口" class="headerlink" title="26、Alt + 5：显示调试窗口"></a>26、<font color="#C7254E">Alt + 5</font>：显示调试窗口</h4><h4 id="27、Alt-8：显示服务窗口"><a href="#27、Alt-8：显示服务窗口" class="headerlink" title="27、Alt + 8：显示服务窗口"></a>27、<font color="#C7254E">Alt + 8</font>：显示服务窗口</h4><blockquote><p><img src="/posts/791ea0e2/115.gif"></p></blockquote><h3 id="十三、代码重构"><a href="#十三、代码重构" class="headerlink" title="十三、代码重构"></a>十三、代码重构</h3><h4 id="1、Ctrl-Alt-Shift-T：打开重构列表"><a href="#1、Ctrl-Alt-Shift-T：打开重构列表" class="headerlink" title="1、Ctrl + Alt + Shift + T：打开重构列表"></a>1、<font color="#C7254E">Ctrl + Alt + Shift + T</font>：打开重构列表</h4><blockquote><p><img src="/posts/791ea0e2/116.gif"></p></blockquote><h4 id="2、Shift-F6：修改名称"><a href="#2、Shift-F6：修改名称" class="headerlink" title="2、Shift + F6：修改名称"></a>2、<font color="#C7254E">Shift + F6</font>：修改名称</h4><h4 id="3、Ctrl-F6：修改签名"><a href="#3、Ctrl-F6：修改签名" class="headerlink" title="3、Ctrl + F6：修改签名"></a>3、<font color="#C7254E">Ctrl + F6</font>：修改签名</h4><h4 id="4、Ctrl-Alt-N：内联"><a href="#4、Ctrl-Alt-N：内联" class="headerlink" title="4、Ctrl + Alt + N：内联"></a>4、<font color="#C7254E">Ctrl + Alt + N</font>：内联</h4><h4 id="5、F6：移动"><a href="#5、F6：移动" class="headerlink" title="5、F6：移动"></a>5、<font color="#C7254E">F6</font>：移动</h4><h4 id="6、Ctrl-Alt-M：提取方法"><a href="#6、Ctrl-Alt-M：提取方法" class="headerlink" title="6、Ctrl + Alt + M：提取方法"></a>6、<font color="#C7254E">Ctrl + Alt + M</font>：提取方法</h4><blockquote><p><img src="/posts/791ea0e2/117.gif"></p></blockquote><h4 id="7、Ctrl-Alt-F：引入域"><a href="#7、Ctrl-Alt-F：引入域" class="headerlink" title="7、Ctrl + Alt + F：引入域"></a>7、<font color="#C7254E">Ctrl + Alt + F</font>：引入域</h4><h4 id="8、Ctrl-Alt-P：引入参数"><a href="#8、Ctrl-Alt-P：引入参数" class="headerlink" title="8、Ctrl + Alt + P：引入参数"></a>8、<font color="#C7254E">Ctrl + Alt + P</font>：引入参数</h4><h4 id="9、Ctrl-Alt-V：引入变量"><a href="#9、Ctrl-Alt-V：引入变量" class="headerlink" title="9、Ctrl + Alt + V：引入变量"></a>9、<font color="#C7254E">Ctrl + Alt + V</font>：引入变量</h4><h4 id="10、Alt-Delete：安全删除"><a href="#10、Alt-Delete：安全删除" class="headerlink" title="10、Alt + Delete：安全删除"></a>10、<font color="#C7254E">Alt + Delete</font>：安全删除</h4><h3 id="十四、全局-CVS-操作"><a href="#十四、全局-CVS-操作" class="headerlink" title="十四、全局 CVS 操作"></a>十四、全局 CVS 操作</h3><h4 id="1、Alt-96-：弹出-CVS-窗口"><a href="#1、Alt-96-：弹出-CVS-窗口" class="headerlink" title="1、Alt + &#96; ：弹出 CVS 窗口"></a>1、<font color="#C7254E">Alt + &#96;</font> ：弹出 CVS 窗口</h4><blockquote><p><img src="/posts/791ea0e2/118.gif"></p></blockquote><h4 id="2、Ctrl-K：提交"><a href="#2、Ctrl-K：提交" class="headerlink" title="2、Ctrl + K：提交"></a>2、<font color="#C7254E">Ctrl + K</font>：提交</h4><blockquote><p><img src="/posts/791ea0e2/119.gif"></p></blockquote><h4 id="3、Ctrl-T：更新项目"><a href="#3、Ctrl-T：更新项目" class="headerlink" title="3、Ctrl + T：更新项目"></a>3、<font color="#C7254E">Ctrl + T</font>：更新项目</h4><blockquote><p><img src="/posts/791ea0e2/120.gif"></p></blockquote><h4 id="4、Ctrl-Alt-Z：回滚"><a href="#4、Ctrl-Alt-Z：回滚" class="headerlink" title="4、Ctrl + Alt + Z：回滚"></a>4、<font color="#C7254E">Ctrl + Alt + Z</font>：回滚</h4><blockquote><p><img src="/posts/791ea0e2/121.gif"></p></blockquote><h4 id="5、Ctrl-Shift-K：拉取"><a href="#5、Ctrl-Shift-K：拉取" class="headerlink" title="5、Ctrl + Shift + K：拉取"></a>5、<font color="#C7254E">Ctrl + Shift + K</font>：拉取</h4><blockquote><p><img src="/posts/791ea0e2/122.gif"></p></blockquote><h4 id="6、Ctrl-Alt-Shift-Down：下一个修改"><a href="#6、Ctrl-Alt-Shift-Down：下一个修改" class="headerlink" title="6、Ctrl + Alt + Shift + Down：下一个修改"></a>6、<font color="#C7254E">Ctrl + Alt + Shift + Down</font>：下一个修改</h4><h4 id="7、Ctrl-Alt-Shift-Up：上一个修改"><a href="#7、Ctrl-Alt-Shift-Up：上一个修改" class="headerlink" title="7、Ctrl + Alt + Shift + Up：上一个修改"></a>7、<font color="#C7254E">Ctrl + Alt + Shift + Up</font>：上一个修改</h4><h4 id="8、Alt-9：显示版本控制窗口"><a href="#8、Alt-9：显示版本控制窗口" class="headerlink" title="8、Alt + 9：显示版本控制窗口"></a>8、<font color="#C7254E">Alt + 9</font>：显示版本控制窗口</h4><h4 id="9、Alt-0：显示提交窗口"><a href="#9、Alt-0：显示提交窗口" class="headerlink" title="9、Alt + 0：显示提交窗口"></a>9、<font color="#C7254E">Alt + 0</font>：显示提交窗口</h4><blockquote><p><img src="/posts/791ea0e2/123.gif"></p></blockquote><h3 id="十五、差异查看器"><a href="#十五、差异查看器" class="headerlink" title="十五、差异查看器"></a>十五、差异查看器</h3><h4 id="1、F7：下一个差异"><a href="#1、F7：下一个差异" class="headerlink" title="1、F7：下一个差异"></a>1、<font color="#C7254E">F7</font>：下一个差异</h4><h4 id="2、Shift-F7：上一个差异"><a href="#2、Shift-F7：上一个差异" class="headerlink" title="2、Shift + F7：上一个差异"></a>2、<font color="#C7254E">Shift + F7</font>：上一个差异</h4><blockquote><p><img src="/posts/791ea0e2/124.gif"></p></blockquote><h4 id="3、Ctrl-Alt-R：接受左侧"><a href="#3、Ctrl-Alt-R：接受左侧" class="headerlink" title="3、Ctrl + Alt + R：接受左侧"></a>3、<font color="#C7254E">Ctrl + Alt + R</font>：接受左侧</h4><h4 id="4、Ctrl-Alt-A：接受右侧"><a href="#4、Ctrl-Alt-A：接受右侧" class="headerlink" title="4、Ctrl + Alt + A：接受右侧"></a>4、<font color="#C7254E">Ctrl + Alt + A</font>：接受右侧</h4><blockquote><p><img src="/posts/791ea0e2/125.gif"></p></blockquote><h4 id="5、Ctrl-Shift-Tab：选择对面的差异窗格"><a href="#5、Ctrl-Shift-Tab：选择对面的差异窗格" class="headerlink" title="5、Ctrl + Shift + Tab：选择对面的差异窗格"></a>5、<font color="#C7254E">Ctrl + Shift + Tab</font>：选择对面的差异窗格</h4><blockquote><p><img src="/posts/791ea0e2/126.gif"></p></blockquote><h4 id="6、Ctrl-Shift-D：显示差异设置窗口"><a href="#6、Ctrl-Shift-D：显示差异设置窗口" class="headerlink" title="6、Ctrl + Shift + D：显示差异设置窗口"></a>6、<font color="#C7254E">Ctrl + Shift + D</font>：显示差异设置窗口</h4><h3 id="十六、工具窗口"><a href="#十六、工具窗口" class="headerlink" title="十六、工具窗口"></a>十六、工具窗口</h3><h4 id="1、Shift-Escape：隐藏活动的工具窗口"><a href="#1、Shift-Escape：隐藏活动的工具窗口" class="headerlink" title="1、Shift + Escape：隐藏活动的工具窗口"></a>1、<font color="#C7254E">Shift + Escape</font>：隐藏活动的工具窗口</h4><blockquote><p><img src="/posts/791ea0e2/127.gif"></p></blockquote><h4 id="2、Ctrl-Shift-F12：隐藏所有工具窗口"><a href="#2、Ctrl-Shift-F12：隐藏所有工具窗口" class="headerlink" title="2、Ctrl + Shift + F12：隐藏所有工具窗口"></a>2、<font color="#C7254E">Ctrl + Shift + F12</font>：隐藏所有工具窗口</h4><blockquote><p><img src="/posts/791ea0e2/128.gif"></p></blockquote><h4 id="3、F12：跳转到最后一个工具窗口"><a href="#3、F12：跳转到最后一个工具窗口" class="headerlink" title="3、F12：跳转到最后一个工具窗口"></a>3、<font color="#C7254E">F12</font>：跳转到最后一个工具窗口</h4><h4 id="4、Ctrl-Alt-Shift-Left：向左延伸窗口大小"><a href="#4、Ctrl-Alt-Shift-Left：向左延伸窗口大小" class="headerlink" title="4、Ctrl + Alt + Shift + Left：向左延伸窗口大小"></a>4、<font color="#C7254E">Ctrl + Alt + Shift + Left</font>：向左延伸窗口大小</h4><h4 id="5、Ctrl-Alt-Shift-Right：向右延伸窗口大小"><a href="#5、Ctrl-Alt-Shift-Right：向右延伸窗口大小" class="headerlink" title="5、Ctrl + Alt + Shift + Right：向右延伸窗口大小"></a>5、<font color="#C7254E">Ctrl + Alt + Shift + Right</font>：向右延伸窗口大小</h4><blockquote><p><img src="/posts/791ea0e2/129.gif"></p></blockquote><h4 id="6、Ctrl-Alt-Shift-Up：向顶部延伸窗口大小"><a href="#6、Ctrl-Alt-Shift-Up：向顶部延伸窗口大小" class="headerlink" title="6、Ctrl + Alt + Shift + Up：向顶部延伸窗口大小"></a>6、<font color="#C7254E">Ctrl + Alt + Shift + Up</font>：向顶部延伸窗口大小</h4><h4 id="7、Ctrl-Alt-Shift-Down：向底部延伸窗口大小"><a href="#7、Ctrl-Alt-Shift-Down：向底部延伸窗口大小" class="headerlink" title="7、Ctrl + Alt + Shift + Down：向底部延伸窗口大小"></a>7、<font color="#C7254E">Ctrl + Alt + Shift + Down</font>：向底部延伸窗口大小</h4><blockquote><p><img src="/posts/791ea0e2/130.gif"></p></blockquote><h4 id="8、Alt-1：显示项目窗口"><a href="#8、Alt-1：显示项目窗口" class="headerlink" title="8、Alt + 1：显示项目窗口"></a>8、<font color="#C7254E">Alt + 1</font>：显示项目窗口</h4><h4 id="9、Alt-2：显示书签窗口"><a href="#9、Alt-2：显示书签窗口" class="headerlink" title="9、Alt + 2：显示书签窗口"></a>9、<font color="#C7254E">Alt + 2</font>：显示书签窗口</h4><h4 id="10、Alt-3：显示查找窗口"><a href="#10、Alt-3：显示查找窗口" class="headerlink" title="10、Alt + 3：显示查找窗口"></a>10、<font color="#C7254E">Alt + 3</font>：显示查找窗口</h4><h4 id="11、Alt-4：显示运行窗口"><a href="#11、Alt-4：显示运行窗口" class="headerlink" title="11、Alt + 4：显示运行窗口"></a>11、<font color="#C7254E">Alt + 4</font>：显示运行窗口</h4><h4 id="12、Alt-5：显示调试窗口"><a href="#12、Alt-5：显示调试窗口" class="headerlink" title="12、Alt + 5：显示调试窗口"></a>12、<font color="#C7254E">Alt + 5</font>：显示调试窗口</h4><h4 id="13、Alt-6：显示问题窗口"><a href="#13、Alt-6：显示问题窗口" class="headerlink" title="13、Alt + 6：显示问题窗口"></a>13、<font color="#C7254E">Alt + 6</font>：显示问题窗口</h4><h4 id="14、Alt-7：显示结构窗口"><a href="#14、Alt-7：显示结构窗口" class="headerlink" title="14、Alt + 7：显示结构窗口"></a>14、<font color="#C7254E">Alt + 7</font>：显示结构窗口</h4><h4 id="15、Alt-8：显示服务窗口"><a href="#15、Alt-8：显示服务窗口" class="headerlink" title="15、Alt + 8：显示服务窗口"></a>15、<font color="#C7254E">Alt + 8</font>：显示服务窗口</h4><h4 id="16、Alt-9：显示版本控制窗口"><a href="#16、Alt-9：显示版本控制窗口" class="headerlink" title="16、Alt + 9：显示版本控制窗口"></a>16、<font color="#C7254E">Alt + 9</font>：显示版本控制窗口</h4><h4 id="17、Alt-0：显示提交窗口"><a href="#17、Alt-0：显示提交窗口" class="headerlink" title="17、Alt + 0：显示提交窗口"></a>17、<font color="#C7254E">Alt + 0</font>：显示提交窗口</h4><blockquote><p><img src="/posts/791ea0e2/131.gif"></p></blockquote><h4 id="18、Alt-F12：显示终端窗口"><a href="#18、Alt-F12：显示终端窗口" class="headerlink" title="18、Alt + F12：显示终端窗口"></a>18、<font color="#C7254E">Alt + F12</font>：显示终端窗口</h4><blockquote><p><img src="/posts/791ea0e2/132.gif"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql语法整理</title>
      <link href="/posts/b6041c1e.html"/>
      <url>/posts/b6041c1e.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>这里只是对一些简单的MySql语法做一些整理，增删改查，建表删表，存储过程等。</p></blockquote><h3 id="一、MySql常见命令"><a href="#一、MySql常见命令" class="headerlink" title="一、MySql常见命令"></a>一、MySql常见命令</h3><p><strong>1、登录</strong></p><blockquote><p><code>mysql [-h主机名 -P端口号] -u用户名 -p密码</code></p></blockquote><p><strong>2、退出</strong></p><blockquote><p><code>exit 或者 ctlr+c</code></p></blockquote><p><strong>3、查看当前所有的数据库</strong></p><blockquote><p><code>show databases;</code></p></blockquote><p><strong>4、打开指定的数据库</strong></p><blockquote><p><code>use 库名;</code></p></blockquote><p><strong>5、查看当前库的所有表</strong></p><blockquote><p><code>show tables;</code></p></blockquote><p><strong>6、查看其它库的所有表</strong></p><blockquote><p><code>show tables from 库名;</code></p></blockquote><p><strong>7、创建表</strong></p><blockquote><p><font color="#e96900">create table 表名(<br>  列明 列类型,<br>  列明 列类型,<br>  ……<br>);</font></p></blockquote><p><strong>8、查看表的结构</strong></p><blockquote><p><code>desc 表名;</code></p></blockquote><p><strong>9、查看MySql服务器版本</strong></p><blockquote><ul><li><code>select version();</code>（适合于已登录到mysql服务端）</li><li><code>mysql --version</code>（适合于没有登录到mysql服务端）</li><li><code>mysql --V</code>（适合于没有登录到mysql服务端）</li></ul></blockquote><hr><h3 id="二、MySql的语法规范"><a href="#二、MySql的语法规范" class="headerlink" title="二、MySql的语法规范"></a>二、MySql的语法规范</h3><p>1、不区分大小写，但是建议关键字大写，表名、列名小写；<br>2、每条命令最好用分号结尾；<br>3、每条命令根据需要，可以进行缩进或换行；<br>4、注释</p><blockquote><p>单行注释：<code>#注释文字</code><br>单行注释：<code>-- 注释文字</code><br>多行注释：<code>/* 注释文字 */</code></p></blockquote><hr><h3 id="注、本教程中用到的数据库脚本"><a href="#注、本教程中用到的数据库脚本" class="headerlink" title="注、本教程中用到的数据库脚本"></a>注、本教程中用到的数据库脚本</h3><p>员工信息数据库，<a href="b6041c1e/myemployees.sql">sql脚本下载</a></p><blockquote><p><img src="/posts/b6041c1e/myemployees.png"></p></blockquote><p>男生女神数据库，<a href="b6041c1e/girls.sql">sql脚本下载</a></p><blockquote><p><img src="/posts/b6041c1e/girls.png"></p></blockquote><hr><h3 id="三、DQL-数据查询语言"><a href="#三、DQL-数据查询语言" class="headerlink" title="三、DQL 数据查询语言"></a>三、DQL 数据查询语言</h3><p>  <strong>Data Query Language</strong></p><h4 id="A、基础查询"><a href="#A、基础查询" class="headerlink" title="A、基础查询"></a>A、基础查询</h4><p><strong>1、语法</strong></p><blockquote><p><font color="#e96900">select 查询列表<br>from 表名</font></p><blockquote><p>查询列表可以是：表中的字段、常量、表达式、函数，可以是它们的组合<br>查询的结果是一个虚拟的表格，并不是真实存在的</p></blockquote></blockquote><p><strong>2、查询表中单个或多个字段</strong></p><blockquote><ul><li><code>select last_name from employees;</code></li><li><code>select last_name, salary, email from employees;</code></li></ul></blockquote><p><strong>3、查询表中的所有字段</strong></p><blockquote><p><code>select * from employees;</code></p><blockquote><p>这种方式的弊端就是列名的顺序就是原始表中的列名顺序</p></blockquote></blockquote><p><strong>4、查询常量值、表达式、函数</strong></p><blockquote><p>查询<strong>字符型</strong>或<strong>日期型</strong>的常量必须用单引号或双引号引起来，数值型不需要</p><ul><li><p><code>select 常量值;</code></p><blockquote><ul><li><code>select 100;</code></li><li><code>select &#39;jerry&#39;;</code></li><li><code>select &quot;Tom&quot;;</code></li></ul></blockquote></li><li><p><code>select 表达式;</code></p><blockquote><ul><li><code>select 100*98;</code></li><li><code>select 100%99;</code></li></ul></blockquote></li><li><p><code>select 函数(实参列表);</code></p><blockquote><ul><li><code>select version();</code></li><li><code>select database();</code></li></ul></blockquote></li></ul></blockquote><p><strong>5、查询时为字段起别名</strong></p><blockquote><p>方式一（使用关键字AS）：</p><ul><li><code>select 100%98 as 结果;</code></li><li><code>select last_name as 姓, first_name as 名 from employees;</code></li></ul><p>方式二（直接使用空格）：</p><ul><li><code>select last_name 姓, first_name 名 from employees;</code></li></ul><p>起别名好处：</p><ul><li>便于理解</li><li>在某些关联查询中如果字段有重名的情况，使用别名可以很好地区分开来</li></ul><p>案列：查询salary，显示结果为 out put</p><ul><li><code>select salary as out put from employees;</code> 直接报错</li><li><code>select salary as &#39;out put&#39; from employees;</code> 成功执行</li><li><code>select salary as &quot;out put&quot; from employees;</code> 成功执行</li><li>当别名中存在特殊符号，比如空格#号时，要在别名上加上单引号或者双引号</li></ul></blockquote><p><strong>6、查询去重</strong></p><blockquote><p>查询员工表中涉及到的所有部门编号<br><code>select distinct department_id from employees;</code></p></blockquote><p><strong>7、加号 “+” 的使用注意</strong></p><blockquote><p>查询员工的姓和名，并连接成一个字段显示为 姓名<br><code>select last_name+first_name as 姓名 from employees;</code> 结果全是0，和预想的完全不一样</p><blockquote><ul><li>java中的 +号 可以作为运算符，也可以作为字符串的连接符，当左右两个操作数都是数值型时其作为运算符，而只要有一个操作数为字符串其就作为连接符。</li><li>mysql中的 +号 只能作为运算符来使用。当左右两边的操作数不能装换为数值时，就默认转换为0</li></ul></blockquote><ul><li><code>select 100+90;</code> 两个操作数都为数值型，则做加法运算</li><li><code>select &#39;123&#39;+90;</code> 其中一方为字符型，则试图将字符型数值转换成数值型，再做加法运算</li><li><code>select &#39;123&#39;+&#39;456&#39;;</code> 两个操作数都为字符型，则一样试图做转换，再做加法运算</li><li><code>select &#39;123&#39;+&#39;abc&#39;;</code> 若字符型不能转换成数值型，则默认转换成0</li><li><code>select 123+null;</code> 只要其中一方为null，则结果一定为null</li></ul></blockquote><p><strong>8、使用 CONCAT 实现连接</strong></p><blockquote><p><code>SELECT CONCAT(字段1, 字段2, 字段3, ......);</code><br>案例1：查询员工的姓和名，并连接成一个字段显示为 姓名<br><code>select concat(last_name, first_name) as 姓名 from employees;</code><br>CONCAT还可以连接多个字段，也就是说该函数具有可变数量个参数<br><code>select CONCAT(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, last_name) as 结果 from employees;</code><br>特殊案例：null 拼接<br><code>select CONCAT(null, last_name) as 结果 from employees;</code> 结果全为NULL，又和预想的不一样。</p><blockquote><ul><li>null和任何其他字符拼接，结果都为null</li><li>可以使用 IFNULL(expr1, expr2) 做一下判断，判断字段是否为null，并返回指定的表达式值。其中expr1表示想要判断的字段，expr2表示如果expr1为null，该函数将返回expr2。如果expr1不为null，则返回expr1本身。</li></ul></blockquote><p> <code>select commission_pct, ifnull(commission_pct, &quot;0.0&quot;) as 奖金率 from employees;</code></p></blockquote><p><strong>9、IFNULL(expr1, expr2)函数</strong><br>  判断某字段或表达式是否为null，如果为null，则返回指定的表达式或字段值；否则返回原本的值</p><blockquote><p><code>select commission_pct, ifnull(commission_pct,0) as 奖金率 from employees;</code></p></blockquote><p><strong>10、ISNULL(expr)函数</strong><br>  判断某字段或表达式是否为null，如果为null，则返回1；否则返回0</p><blockquote><p><code>select commission_pct, isnull(commission_pct) from employees;</code></p></blockquote><h4 id="B、条件查询"><a href="#B、条件查询" class="headerlink" title="B、条件查询"></a>B、条件查询</h4><p><strong>1、语法</strong></p><blockquote><p><font color="#e96900">select 查询列表<br>from 表名<br>where 筛选条件;</font></p><blockquote><p>“筛选条件”分类：</p><ul><li>按条件表达式筛选<br>简单条件运算符： <strong>“&gt;”</strong>  <strong>“&gt;&#x3D;”</strong>  <strong>“&lt;”</strong>  <strong>“&lt;&#x3D;”</strong> <strong>“&#x3D;”</strong>  <strong>“!&#x3D;”</strong>  <strong>“&lt;&gt;”</strong>  <strong>“&lt;&#x3D;&gt;”</strong></li><li>按逻辑表达式筛选<br>逻辑运算符(作用就是用来连接条件表达式)： <strong>“&amp;&amp;”</strong>  <strong>“||”</strong>  <strong>“!”</strong><br>逻辑运算符(推荐使用)： <strong>“and”</strong>  <strong>“or”</strong>  <strong>“not”</strong></li><li>模糊查询<br>特殊条件运算符： <strong>“like”</strong>  <strong>“between and”</strong>  <strong>“in”</strong>  <strong>“is null”</strong>  <strong>“is not null”</strong></li></ul></blockquote></blockquote><p><strong>2、按条件表达式筛选</strong></p><blockquote><p>案例1：查询工资&gt;12000的员工信息</p><blockquote><p><code>select * from employees where salary&gt;12000;</code></p></blockquote><p>案例2：查询部门编号不等于90号的员工名和部门编号</p><blockquote><p><font color="#e96900">select concat(last_name, first_name) as 姓名<br>from employees<br>where department_id&lt;&gt;90;</font></p></blockquote></blockquote><p><strong>2、逻辑表达式筛选</strong></p><blockquote><p>案例1：查询工资在10000到20000之间的员工名、工资以及奖金</p><blockquote><p><font color="#e96900">select first_name,salary,commission_pct<br>from employees<br>where salary&gt;&#x3D;10000 and salary&lt;&#x3D;20000;</font></p></blockquote><p>案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息</p><blockquote><p><font color="#e96900">select *<br>from employees<br>where department_id&lt;90 or department_id&gt;110 or salary&gt;15000;</font></p><hr><p><font color="#e96900">select *<br>from employees<br>where department_id not between 90 and 110 or salary&gt;15000;</font></p><hr><p><font color="#e96900">select *<br>from employees<br>where NOT(department_id&gt;&#x3D;90 and department_id&lt;&#x3D;110) or salary&gt;15000</font></p></blockquote></blockquote><p><strong>3、模糊查询</strong></p><ul><li><p><strong>3.1 “like”</strong></p><blockquote><p>一般和通配符搭配使用，<strong>注意：</strong>当查询字段的值为NULL时，不能做出有效的判断</p><blockquote><p><strong>“%”</strong> 匹配任意多个字符（包含0个字符）<br><strong>“_”</strong> 匹配任意单个字符<br><strong>“\”</strong> 表示转义字符，当要匹配特殊字符时，比如就要匹配“%”或者“_”时使用</p></blockquote><p>案例1：查询员工名中包含字符’a’的员工信息</p><blockquote><p><font color="#e96900">select *<br>from employees<br>where last_name like &#39;%a%&#39;;</font></p></blockquote><p>案例2：查询员工名中第三个字符为’n’，第五个字符为’l’的员工名和工资</p><blockquote><p><font color="#e96900">select last_name,salary<br>from employees<br>where last_name like &#39;__n_l%&#39;;</font></p></blockquote><p>案例3：查询员工名中第二个字符为’_’的员工名</p><blockquote><p><code>select last_name from employees where last_name like &#39;_\_%&#39;;</code></p><blockquote><p>“\“表示转义字符，当然你也可以使用“ESCAPE”随意指定一个字符作为转义字符，比如指定“$”<br><code>select last_name from employees where last_name like &#39;_$_%&#39; ESCAPE &#39;$&#39;;</code></p></blockquote></blockquote><p>案例4：查询员工的薪水中万位数字为’2’的员工名和薪水</p><blockquote><p><code>select last_name, salary from employees where salary like &#39;%2____.%&#39;;</code><br>（就是为了说明 <strong>like</strong> 不仅可以用来模糊字符型数据，甚至可以是数模糊数值型数据）</p></blockquote></blockquote></li><li><p><strong>3.2 “between and”</strong></p><blockquote><p>案例1：查询员工编号在100到120之间的员工信息</p><blockquote><ul><li><font color="#e96900">select * from employees where department_id&gt;&#x3D;100 and department_id&lt;&#x3D;120;</font></li><li><font color="#e96900">select * from employees where department_id between 100 and 120;</font><br>使用“between and”可以提高语句的简洁度，同时也可以看出“between and”是包括左右端点的，且左右端点值不能交换顺序，写成“between 120 and 100”就啥也查不出来。</li></ul></blockquote></blockquote></li><li><p><strong>3.3 “in”</strong></p><blockquote><p>判断某字段的值是否属于 in 列表中的某一项<br>案例1：查询员工的工种标号是 IT_PROG、AD_VP、AD_PRES 中的一种的员工编号</p><blockquote><ul><li><font color="#e96900">select job_id from employees where job_id&#x3D;&quot;IT_PROG&quot; or job_id&#x3D;&#39;AD_VP&#39; or job_id&#x3D;&#39;AD_PRES&#39;;</font></li><li><font color="#e96900">select job_id from employees where job_id in (&#39;IT_PROG&#39;, &quot;AD_VP&quot;, &#39;AD_PRES&#39;);</font><br>同样使用“in”可以提高语句的简洁度，in列表中的值类型必须一致或兼容，in列表中的值无法使用通配符。</li></ul></blockquote></blockquote></li><li><p><strong>3.4 “is null &#x2F; is not null”</strong></p><blockquote><p>案例1：查询没有奖金的员工名和奖金率</p><blockquote><ul><li><font color="#e96900">select last_name,commission_pct from employees where commission_pct&#x3D;NULL;</font> 结果和预想的不一样，因为“&#x3D;”不能用来判断null。</li><li><font color="#e96900">select last_name,commission_pct from employees where commission_pct is null;</font> 正确执行。</li></ul></blockquote><p>案例2：查询有奖金的员工名和奖金率</p><blockquote><ul><li><font color="#e96900">select last_name,commission_pct from employees where commission_pct !&#x3D;null;</font> 同上，结果和预想的不一样，因为“!&#x3D;”不能用来判断null。</li><li><font color="#e96900">select last_name,commission_pct from employees where commission_pct is not null;</font> 正确执行。</li></ul></blockquote><p><strong>注意：</strong></p><blockquote><ul><li><strong>“&#x3D;”或“&lt;&gt;”不能用来判断 NULL 值</strong></li><li><strong>“is null”和“is not null”主要就是用来判断 NULL 值的</strong></li><li><strong>is 后面只能接null或则not null，不能接其他的，比如where salary is 12000 是错误的用法</strong></li></ul></blockquote></blockquote></li></ul><p><strong>4、安全的等于“&lt;&#x3D;&gt;”</strong><br>  <strong>“&lt;&#x3D;&gt;”可以用来判断null值，也可以用来判断普通类型的值。但是可读性很差，不常用。</strong></p><blockquote><p>案例1：查询没有奖金的员工名和奖金率</p><blockquote><p><font color="#e96900">select last_name, commission_pct<br>from employees<br>where commission_pct&lt;&#x3D;&gt;null;</font></p></blockquote><p>案例2：查询工资为12000的员工名和奖金率</p><blockquote><p><font color="#e96900">select last_name, commission_pct<br>from employees<br>where salary &lt;&#x3D;&gt;12000;</font></p></blockquote></blockquote><h4 id="C、排序查询"><a href="#C、排序查询" class="headerlink" title="C、排序查询"></a>C、排序查询</h4><p><strong>1、语法</strong></p><blockquote><p><font color="#e96900">select 查询列表<br>from 表名<br>[where 筛选条件]<br>order by 排序列表 [asc|desc]</font></p><blockquote><p>特点：</p><ul><li>asc代表的是升序，desc代表的是降序，如果不写，则默认是升序</li><li>order by 子句中可以支持单个字段、多个字段、表达式、函数、别名</li><li>order by 字句一般是放在查询语句的最后面，<strong>limit字句除外</strong></li><li>目前的执行顺序为：from –&gt; where –&gt; select –&gt; order</li></ul></blockquote></blockquote><p><strong>2、案例</strong></p><blockquote><p>案例1：查询员工信息，要求工资从高到低排序（或则从低到高）</p><ul><li><code>select * from employees order by salary DESC;</code> 降序</li><li><code>select * from employees order by salary ASC;</code> 升序（默认）</li></ul><p>案例2：查询部门编号大于等于90的员工信息，按入职时间的先后进行排序【添加筛选条件】</p><ul><li><code>select * from employees where department_id&gt;=90 order by hiredate ASC;</code></li><li><code>select * from employees where department_id&gt;=90 order bu hiredate DESC;</code></li></ul><p>案例3：按年薪的高低显示员工的信息和 年薪【按表达式排序】</p><ul><li><font color="#e96900">select <em>, salary</em>12*(1+ifnull(commission_pct,0))<br>from employees<br>order by salary<em>12</em>(1+ifnull(commission_pct,0)) desc;</font></li></ul><p>案例4：按年薪的高低显示员工的信息和 年薪【按表别名排序】</p><ul><li><font color="#e96900">select <em>, salary</em>12*(1+ifnull(commission_pct,0)) as year_salary<br>from employees<br>order by year_salary desc;</font></li></ul><p>案例5：按姓名的长度显示员工的姓名和工资【按函数排序】</p><ul><li><font color="#e96900">select LENGTH(last_name) 字节长度, last_name, salary<br>from employees<br>order by 字节长度 ASC;</font></li></ul><p>案例6：查询员工信息，要求先按工资排序（降序），再按员工编号排序（升序）【按多个字段排序】</p><ul><li><font color="#e96900">selecy last_name, salary, employee_id<br>from employees<br>order by salary desc, employee_id asc;</font></li></ul><p>案例7：查询员工的姓名、部门、年薪，按年薪降序，按姓名升序</p><ul><li><font color="#e96900">select last_name, department_id, salary<em>12</em>(1+ifnull(commission_pct,0)) year_salary<br>from employees<br>order by year_salary DESC, last_name ASC;</font></li></ul><p>案例8：选择工资不在8000到17000的员工的姓名和工资，按工资降序</p><ul><li><font color="#e96900">select last_name, salary<br>from employees<br>where not between 8000 and 17000<br>order by salary desc;</font></li></ul><p>案例9：查询邮箱中包含’e’的员工信息，并先按邮箱的字节数降序，再按部门号升序</p><ul><li><font color="#e96900">select *<br>from employees<br>where email like &#39;%e%&#39;<br>order by LENGTH(email) DESC, department_id ASC;</font></li></ul></blockquote><h4 id="D、常见函数"><a href="#D、常见函数" class="headerlink" title="D、常见函数"></a>D、常见函数</h4><p>  MySql中的函数类似于java中的方法，将一组逻辑语句封装在方法体中，对外暴露方法名。<strong>好处：①隐藏了实现细节 ②提高了代码的重用性</strong></p><p><strong>1、调用语法</strong></p><blockquote><p><font color="#e96900">select 函数名(实参列表) 【from 表名】;</font></p><blockquote><p>分类：</p><ul><li>单行函数：concat(str1, str2,…)、length(str)、ifnull(expr1, expr2)、isnull(expr)</li><li>分组函数：主要是做统计使用，又称为统计函数、聚合函数、主函数</li></ul><p>单行函数:</p><ul><li>字符函数</li><li>数学函数</li><li>日期函数</li><li>其他函数</li><li>流程控制函数</li></ul><p>分组函数：</p><ul><li>sum 求和</li><li>avg 平均值</li><li>max 最大值</li><li>min 最小值</li><li>count 计算个数</li></ul></blockquote></blockquote><p><strong>2、字符函数</strong></p><blockquote><p><strong>2.1、length(str)</strong> 获取参数值的字节个数</p><ul><li><code>select length(&#39;john&#39;);</code></li><li><code>select LENGTH(&quot;张三丰hahaha&quot;);</code> 跟字符集有关，utf8中汉字占三个字节，字母占一个字节</li></ul><p><strong>2.2、concat(str1, str2, …)</strong> 拼接字符串</p><ul><li><code>select concat(last_name, &#39;_&#39;, first_name) from employees;</code></li></ul><p><strong>2.3、upper(str) &#x2F; lower(str)</strong> 字符大小写转换</p><ul><li><code>select upper(&#39;john&#39;);</code></li><li><code>select lower(&#39;Tom&#39;);</code></li><li><code>select concat(upper(last_name), lower(first_name)) from employees;</code></li></ul><p><strong>2.4、substr &#x2F; substring</strong> 字符串截取。注意：以下的pos是从 1 开始，并非从 0 开始，也就是索引是从 1 开始的</p><ul><li><strong>substr(str, pos) &#x2F; substring(str, pos)</strong> 从指定索引处pos开始截取，一直到字符串末尾<ul><li><code>select substr(&#39;李莫愁爱上了陆展元&#39;, 7) as out_put;</code> 返回结果“陆展元”</li><li><code>select substr(&#39;李莫愁爱上了陆展元&#39;, -3) as out_put;</code> pos可以为负数，表示倒着数</li></ul></li><li><strong>substr(str, pos, len) &#x2F; substring(str, pos, len)</strong> 从指定索引处pos开始截取，截取固定字符长度len<ul><li><code>select substr(&#39;李莫愁爱上了陆展元&#39;, 1, 3) as out_put;</code> 返回结果“李莫愁”</li><li><code>select substr(&#39;李莫愁爱上了陆展元&#39;, -9, 3) as out_put;</code></li></ul></li><li><strong>substr(str FROM pos) &#x2F; substring(str FROM pos)</strong><ul><li><code>select substr(&#39;李莫愁爱上了陆展元&#39; FROM 7) as out_put;</code></li><li><code>select substr(&#39;李莫愁爱上了陆展元&#39; FROM -3) as out_put;</code></li></ul></li><li><strong>substr(str FROM pos FOR len) &#x2F; substring(str FROM pos For len)</strong><ul><li><code>select substr(&#39;李莫愁爱上了陆展元&#39; FROM 1 FOR 3) as out_put;</code></li><li><code>select substr(&#39;李莫愁爱上了陆展元&#39; FROM -9 FOR 3) as out_put;</code></li></ul></li><li>案例1：姓名中首字符大写，其他字符小写然后用’_’拼接，显示出来<ul><li><code>select CONCAT(upper(substr(last_name,1,1)), &#39;_&#39;, lower(substr(last_name,2))) as name from employees;</code></li></ul></li></ul><p><strong>2.5、instr(str, substr)</strong> 判断字符串中是否包含指定子串，返回 1 表示包含，0 表示不包含</p><ul><li><code>select instr(&#39;杨不悔爱上了殷六侠&#39;, &#39;杨不悔&#39;) as out_put;</code></li><li><code>select instr(&#39;杨不悔爱上了殷六侠&#39;, &#39;张无忌&#39;) as out_put;</code></li></ul><p><strong>2.6、trim、ltrim、rtrim</strong> 常用来去掉首尾多余的空格（或指定字符）</p><ul><li><strong>trim([remstr FROM] str)</strong> 去掉首尾指定的字符，不指定就默认去掉空格<ul><li><font color="#e96900">select trim(&quot;&amp;ensp;&amp;ensp;&amp;ensp;张翠山&amp;ensp;&amp;ensp;&quot;) as result;</font></li><li><font color="#e96900">select trim(&quot;a&quot; FROM &#39;aa张aa翠山aaa&#39;) as result;</font></li><li><font color="#e96900">select trim(&quot;aa&quot; FROM &#39;aaa张aa翠山aaaa&#39;) as result;</font></li><li><font color="#e96900">select trim(&quot;ab&quot; FROM &#39;abab张ab翠山abab&#39;) as result;</font></li></ul></li><li><strong>trim([{BOTH | LEADING | TRAILING} [remstr] FROM] str)</strong> 去掉首尾指定的字符，不指定就默认去掉空格，“BOTH”表示去掉首尾，“LEADING”表示只去首，“TRAILING”表示只去尾<ul><li><font color="#e96900">select trim(both from &quot;&amp;ensp;&amp;ensp;&amp;ensp;张翠山&amp;ensp;&amp;ensp;&quot;) as result;</font></li><li><font color="#e96900">select trim(leading &quot;a&quot; FROM &#39;aa张aa翠山aaa&#39;) as result;</font></li><li><font color="#e96900">select trim(both &quot;aa&quot; FROM &#39;aaa张aa翠山aaaa&#39;) as result;</font></li><li><font color="#e96900">select trim(trailing &quot;ab&quot; FROM &#39;abab张ab翠山abab&#39;) as result;</font></li></ul></li><li><strong>ltrim(str)</strong> 只能去掉首空格，并不能像上面一样去掉指定字符<ul><li><font color="#e96900">select trim(&quot;&amp;ensp;&amp;ensp;&amp;ensp;张翠山&amp;ensp;&amp;ensp;&quot;) as result;</font></li></ul></li><li><strong>rtrim(str)</strong> 只能去掉尾空格，并不能像上面一样去掉指定字符<ul><li><font color="#e96900">select trim(&quot;&amp;ensp;&amp;ensp;&amp;ensp;张翠山&amp;ensp;&amp;ensp;&quot;) as result;</font></li></ul></li></ul><p><strong>2.7、lpad(str, len, padstr)</strong> 用指定的字符实现左填充到指定长度，如果本身字符个数就超过了指定长度，那就类似于substr()直接截断</p><ul><li><code>select lpad(&#39;殷素素&#39;, 10, &#39;*&#39;) as result;</code> 结果“*******殷素素”</li><li><code>select lpad(&#39;殷素素&#39;, 2, &#39;*&#39;) as result;</code> 结果“殷素”</li><li><code>select lpad(&#39;殷素素&#39;, 10, &#39;ab&#39;) as result;</code> 结果“abababa殷素素”</li></ul><p><strong>2.8、rpad(str, len, padstr)</strong> 用指定的字符实现右填充到指定长度，如果本身字符个数就超过了指定长度，那就类似于substr()直接截断</p><ul><li><code>select rpad(&#39;殷素素&#39;, 10, &#39;*&#39;) as result;</code> 结果“殷素素*******”</li><li><code>select rpad(&#39;殷素素&#39;, 2, &#39;*&#39;) as result;</code> 结果“殷素”</li><li><code>select rpad(&#39;殷素素&#39;, 10, &#39;ab&#39;) as result;</code> 结果“殷素素abababa”</li></ul><p><strong>2.9、replace(str, from_str, to_str)</strong> 实现字符替换</p><ul><li><code>select replace(&quot;张无忌爱上了周芷若&quot;, &#39;周芷若&#39;, &#39;赵敏&#39;) as result;</code></li><li><code>select replace(&quot;张无忌爱上了周芷若、周芷若、周芷若&quot;, &#39;周芷若&#39;, &#39;赵敏&#39;) as result;</code></li><li><code>select replace(012301230123, 1, 5) as result;</code> 结果为 “52305230523”</li><li><code>select replace(012301230123, 01, 5) as result;</code> 结果为 “52305230523”</li><li><code>select replace(012301230123, 01, 05) as result;</code> 结果为 “52305230523”</li><li><code>select replace(012301230123, 1, 0) as result;</code> 结果为 “02300230023”</li></ul></blockquote><p><strong>3、数学函数</strong></p><blockquote><p><strong>3.1、round(X) &#x2F; round(X, D)</strong> 四舍五入，参数D表示小数点后保留D位数字，若D为负数，则表示保留小数点前的数字。round(X)与round(X, 0)效果一样</p><ul><li><code>select round(1.45) as result;</code> 结果为 1</li><li><code>select round(&quot;1.45&quot;) as result;</code> 可以直接传入字符型</li><li><code>select round(1.65) as result;</code> 结果为 2</li><li><code>select round(-1.45) as result;</code> 结果为 -1</li><li><code>select round(-1.65) as result;</code> 结果为 -2</li><li><code>select round(1.45, 0) as result;</code> 结果为 1</li><li><code>select round(1.65, 0) as result;</code> 结果为 2</li><li><code>select round(1.567, 2) as result;</code> 结果为 1.57</li><li><code>select round(-1.567, 2) as result;</code> 结果为 -1.57</li><li><code>select round(123.567, -2) as result;</code> 结果为 100</li><li><code>select round(-123.567, -2) as result;</code> 结果为 -100</li><li><code>select round(154.567, -2) as result;</code> 结果为 200</li><li><code>select round(-154.567, -2) as result;</code> 结果为 -200</li><li><code>select round(300.567, -3) as result;</code> 结果为 0</li><li><code>select round(500.567, -3) as result;</code> 结果为 1000</li><li><code>select round(300.567, -4) as result;</code> 结果为 0</li><li><code>select round(500.567, -4) as result;</code> 结果为 0</li></ul><p><strong>3.2、ceil(X) &#x2F; ceiling(X)</strong> 向上取整，返回大于等于X的最小整数值</p><ul><li><code>select ceil(1.45) as result;</code> 结果为 2</li><li><code>select ceil(-1.45) as result;</code> 结果为 -1</li></ul><p><strong>3.3、floor(X)</strong> 向下取整，返回小于等于X的最大整数值</p><ul><li><code>select floor(1.45) as result;</code> 结果为 1</li><li><code>select floot(-1.45) as result;</code> 结果为 -2</li></ul><p><strong>3.4、truncate(X,D)</strong> 截断，参数D表示小数点后保留D为数字，若D为负数，则表示保留小数点前的数字。truncate(X, 0)表示取整</p><ul><li><code>select truncate(1.99999, 3) as result;</code> 结果为 1.999</li><li><code>select truncate(1.99999, 0) as result;</code> 结果为 1</li><li><code>select truncate(1234.99999, -1) as result;</code> 结果为 1230</li><li><code>select truncate(1234.99999, -2) as result;</code> 结果为 1200</li><li><code>select truncate(1234.99999, -3) as result;</code> 结果为 1000</li><li><code>select truncate(1234.99999, -4) as result;</code> 结果为 0</li><li><code>select truncate(-1234.99999, -3) as result;</code> 结果为 -1000</li></ul><p><strong>3.5、mod(N, M)</strong> 取余。表示 N &#x2F; M 的余数，不管N、M是正数还是负数，都满足“余数 &#x3D; N - M*商”，因为余数就是这么定义的。其实也可以看被除数，被除数N为正，余数就为正；被除数N为负，余数就为负。</p><ul><li><code>select mod(8, 5) as result;</code> 结果为 3</li><li><code>select mod(8, -5) as result;</code> 结果为 3</li><li><code>select mod(-8, 5) as result;</code> 结果为 -3</li><li><code>select mod(-8, -5) as result;</code> 结果为 -3</li><li><code>select mod(5, 8) as result;</code> 结果为 5</li></ul></blockquote><p><strong>4、日期函数</strong></p><blockquote><p><strong>4.1、now()</strong> 返回当前系统日期 + 时间</p><ul><li><code>select now() as result;</code></li></ul><p><strong>4.2、curdate()</strong> 返回当前系统日期，不包含时间</p><ul><li><code>select curdate() as result;</code></li></ul><p><strong>4.3、curtime()</strong> 返回当前系统时间，不包含日期</p><ul><li><code>select curtime() as result;</code></li></ul><p><strong>4.4、year(date)、month(date)、day(date)、hour(time)、second(time)、minute(time)</strong> 获取指定的部分：年、月、日、时、分、秒</p><ul><li><code>select year(now()), year(curdate()), year(curtime());</code></li><li><code>select year(&quot;2021-10-11 10:46:27&quot;), year(&quot;2021-10-11&quot;)</code></li><li><code>select month(now()), month(curdate()), month(curtime());</code></li><li><code>select monthname(now()), monthname(curdate()), monthname(curtime());</code> 结果为月份的英文名</li><li><code>select month(&quot;2021-10-11 10:46:27&quot;), month(&quot;2021-10-11&quot;)</code></li><li><code>select day(now()), day(curdate()), day(curtime());</code></li><li><code>select day(&quot;2021-10-11 10:46:27&quot;), day(&quot;2021-10-11&quot;);</code></li><li><code>select hour(now()), hour(curtime());</code></li><li><code>select hour(&quot;2021-10-11 10:46:27&quot;), hour(&quot;10:46:27&quot;);</code></li><li><code>select minute(now()), minute(curtime());</code></li><li><code>select minute(&quot;2021-10-11 10:46:27&quot;), minute(&quot;10:46:27&quot;);</code></li><li><code>select second(now()), second(curtime());</code></li><li><code>select second(&quot;2021-10-11 10:46:27&quot;), second(&quot;10:46:27&quot;);</code></li><li>案例1：查询员工的入职年份，并升序排序<ul><li><code>select year(hiredate) from employees order by hiredate;</code></li></ul></li></ul><p><strong>4.5、str_to_date(str, format)</strong> 将日期格式的字符转换成指定格式的日期</p><ul><li><code>select str_to_date(&#39;2021-10-11 10:46:27&#39;, &#39;%Y-%m-%d&#39;);</code> 结果为“2021-10-11”</li><li><code>select str_to_date(&#39;2021-10-11 10:46:27&#39;, &#39;%Y-%m-%d %H:%i:%s&#39;);</code> 结果为“2021-10-11 10:46:27”</li><li><table><thead><tr><th>序号</th><th>格式符</th><th>功能</th></tr></thead><tbody><tr><td>1</td><td>%Y</td><td>4位的年份</td></tr><tr><td>2</td><td>%y</td><td>2位的年份</td></tr><tr><td>3</td><td>%m</td><td>月份（01,02,…,11,12）</td></tr><tr><td>4</td><td>%c</td><td>月份（1,2,…,11,12）</td></tr><tr><td>5</td><td>%d</td><td>日（01,02,…）</td></tr><tr><td>6</td><td>%H</td><td>小时（24小时制）</td></tr><tr><td>7</td><td>%h</td><td>小时（12小时制）</td></tr><tr><td>8</td><td>%i</td><td>分钟（00,01,…,58,59）</td></tr><tr><td>9</td><td>%s</td><td>秒（00,01,…,58,59）</td></tr></tbody></table></li><li>案例1：查询入职日期为“1992-4-3”的员工信息<ul><li><code>SELECT * FROM employees WHERE hiredate=&#39;1992-4-3&#39;;</code></li><li><code>SELECT * FROM employees WHERE hiredate=str_to_date(&#39;4-3 1992&#39;, &#39;%c-%d %Y&#39;);</code></li></ul></li></ul><p><strong>4.6、data_format(date, format)</strong> 将日期转换成指定格式的字符</p><ul><li><code>select date_format(now(), &#39;%Y年%m月%d日 %H时%i分%s秒&#39;);</code></li><li><code>select date_format(now(), &#39;%H:%i:%s秒 %m月%d日%Y年&#39;);</code></li><li><code>select date_format(curtime(), &#39;%Y年%m月%d日 %H时%i分%s秒&#39;);</code></li><li><code>select date_format(&#39;2021-10-11 10:46:27&#39;, &#39;%Y年%m月%d日 %H时%i分%s秒&#39;);</code></li><li>案例1：查询有奖金的员工名和入职日期(xx月&#x2F;xx日&#x2F; xx年)<ul><li><code>select last_name, date_format(hiredate, &#39;%m月/%d日 %y年&#39;) 入职日期 from employees where commission_pct is not null;</code></li></ul></li></ul></blockquote><p><strong>5、其他函数</strong></p><blockquote><ul><li><font color="#e96900" size="5">select version();</font></li><li><font color="#e96900" size="5">select database();</font></li><li><font color="#e96900" size="5">select user();</font></li></ul></blockquote><p><strong>6、流程控制函数</strong></p><blockquote><p><strong>6.1、if(expr1, expr2, expr3)</strong> 可以实现类似于if else的效果，与三元运算符很像。表达式expr1成立，则返回表达式expr2的值，否则返回表达式expr3的值</p><ul><li><code>select if(10&gt;5, &quot;大&quot;, &#39;小&#39;) as result;</code></li><li><code>select if(10&lt;5, &quot;大&quot;, &#39;小&#39;) as result;</code></li><li>案例1：查询员工有无奖金，分别给有无奖金做个备注<ul><li><code>select last_name, commission_pct, if(commission_pct is null, &#39;没奖金，呵呵&#39;, &#39;有奖金，嘻嘻&#39;) 备注 from employees;</code></li></ul></li></ul><p><strong>6.2 case 的使用</strong></p><ul><li><p><strong>使用一：switch case 的效果</strong></p><table><thead><tr><th>java中</th><th>mysql中</th></tr></thead><tbody><tr><td>switch (变量或表达式) {<br>  case 常量1: 语句1; break;<br>  …<br>  defualt: 语句n; break;<br>}</td><td>case 要判断的字段、变量或表达式 <br>when 常量1 then 要显示的值1或 语句1;<br>when 常量2 then 要显示的值2或 语句2;<br>…<br>else 要显示的值n或 语句n;<br>end</td></tr></tbody></table><blockquote><p>案例1：查询员工的工资，要求①部门号&#x3D;30，显示的工资为1.1倍；②部门号&#x3D;40，显示的工资为1.2倍；③部门号&#x3D;50，显示的工资为1.3倍；④其他部门，显示的工资为原工资</p><ul><li><font color="#e96900">select salary 原始工资, department_id,<br>(CASE department_id<br>WHEN 30 THEN salary * 1.1<br>WHEN 40 THEN salary * 1.2<br>WHEN 50 THEN salary * 1.3<br>ELSE salary<br>END) as 新工资<br>from employees;</font></li></ul></blockquote></li><li><p><strong>使用二：类似于 多重if</strong></p><table><thead><tr><th>java中</th><th>mysql中</th></tr></thead><tbody><tr><td>if (条件1) { 语句1; }<br>else if (条件2) { 语句2; }<br>…<br>else { 语句n; }</td><td>case<br>when 条件1 then 要显示的值1或 语句1;<br>when 条件2 then 要显示的值2或 语句2;<br>…<br>else 要显示的值n或 语句n;<br>end</td></tr></tbody></table><blockquote><p>案例2：查询员工的工资情况，要求①如果工资&gt;2000，显示级别A；②如果工资&gt;15000，显示级别B；③如果工资&gt;10000，显示级别C；④其他工资显示级别D</p><ul><li><font color="#e96900">select salary,<br>(CASE<br>WHEN salary&gt;20000 THEN &#39;A&#39;<br>WHEN salary&gt;15000 THEN &#39;B&#39;<br>WHEN salary&gt;10000 THEN &#39;C&#39;<br>ELSE &#39;D&#39;<br>END) as 工资级别<br>from employees;</font></li></ul></blockquote></li></ul></blockquote><p><strong>7、分组函数</strong><br>  <strong>sum([distinct] expr) 求和</strong>、<strong>avg([distinct] expr) 平均值</strong>、<strong>max([distinct] expr) 最大值</strong>、<strong>min([distinct] expr) 最小值</strong>、<strong>count(expr)&#x2F;count(distinct expr,[expr…]) 计算个数</strong></p><blockquote><p><strong>7.1、分组函数简单使用</strong></p><ul><li><code>select sum(salary) from employees as &quot;sum&quot;;</code></li><li><code>select avg(salary) from emploees as &quot;avg&quot;;</code></li><li><code>select max(salary) from employees as &quot;max&quot;;</code></li><li><code>select min(salary) from employees as &quot;min&quot;;</code></li><li><code>select count(salary) from emploees as &quot;count&quot;;</code></li><li><code>select count(distinct salary) from employees as &quot;distinct count&quot;;</code></li><li><code>select sum(salary), avg(salary), max(salary), min(salary), count(salary) from employees;</code></li><li>案例1：查询员工表中的最大入职时间和最小入职时间的相差天数<ul><li><code>select DATEDIFF(max(hiredate), min(hiredate)) as diffrence from employees;</code></li></ul></li></ul><p><strong>7.2、分组函数支持的参数类型</strong></p><ul><li>虽然不报错，但是结果无意义<ul><li><code>select sum(last_name), avg(last_name) from employees;</code> 全部返回 0</li><li><code>select sum(hiredate), avg(hiredate) from employees;</code></li></ul></li><li>结果有意义<ul><li><code>select max(last_name), min(last_name), count(last_name) from employees;</code></li><li><code>select max(hiredate), min(hiredate), count(hiredate) from employees;</code></li></ul></li><li>注意count()并不统计 null 值<ul><li><code>select count(last_name), count(commission_pct) from employees;</code></li><li><code>select count(*), count(commission_pct), count(distinct commission_pct) from employees;</code></li></ul></li><li>总结：<ul><li>sum、avg 一般用于处理数值型</li><li>max、min 可以处理任何可排序类型</li><li>count 可以处理任何类型，但是不能统计到 null 值，而且默认不去重，会重复统计，使用 “distinct” 可以实现去重统计</li></ul></li></ul><p><strong>7.3、分组函数是否忽略 null 值</strong></p><ul><li><code>select sum(commission_pct), avg(commission_pct) from employees;</code></li><li><code>select avg(commission_pct), sum(commission_pct)/count(*), sum(commission_pct)/count(commission_pct) from employees;</code></li><li><code>select max(commission_pct), min(commission_pct) from employees;</code></li><li><code>select count(*), count(commission_pct), count(distinct commission_pct) from employees;</code><ul><li>计算sum()时，null值根本就不参与运算，因为 “null+任何” 结果都为null</li><li>计算avg()时，null值也不参与运算，忽略 null 值</li><li>计算max()和min时，null值也不参与运算，忽略 null 值</li><li>计算count()时，null值也不参与运算，忽略 null 值，而且默认不去重，会重复统计，使用 “distinct” 可以实现去重统计</li></ul></li><li>总结：以上分组函数都会忽略 null 值</li></ul><p><strong>7.4、分组函数可以和 “distinct” 关键字搭配使用，实现去重</strong></p><ul><li><code>select sum(commission_pct), sum(distinct commission_pct) from employees;</code></li><li><code>select avg(commission_pct), avg(distinct commission_pct), sum(commission_pct)/count(commission_pct),  sum(distinct commission_pct)/count(distinct commission_pct)from employees;</code></li><li><code>select max(commission_pct), max(distinct commission_pct) from employees;</code></li><li><code>select min(commission_pct), min(distinct commission_pct) from employees;</code></li><li><code>select count(*), count(commission_pct), count(distinct commission_pct) from employees;</code></li></ul><p><strong>7.5、专门介绍一下 count()</strong></p><ul><li><strong>count(*)</strong>  有效统计总行数。每行数据中，总有一个字段不为 null<ul><li><code>select count(*) from employees;</code></li></ul></li><li><strong>count(1)</strong>  也能有效统计总行数。相当于给每行多加了一列，这一列的值为 1，然后统计有多少个 1。<ul><li><code>select count(1) from employees;</code></li><li><code>select count(2) from employees;</code> 这样也是可以的</li><li><code>selecy count(&quot;哈哈哈&quot;) from employees;</code></li></ul></li><li><strong>行数统计效率</strong><ul><li>MYISAM存储引擎下，count(*) 的效率最高，因为有记录行数的变量</li><li>INNODB存储引擎下，count(*) 和 count(1) 的效率差不多，比 count(字段) 要高，因为 count(字段) 需要判断是否为 null 值，有个筛选的过程</li><li>一般使用 count(*) 统计行数</li></ul></li></ul><p><strong>7.6、和分组函数一同查询的字段有限制</strong></p><ul><li><code>select AVG(salary), employee_id from employees;</code> 不报错，能执行，但是结果无意义</li><li>和分组函数一同查询的字段要求是 group by 后的字段，其他的都不行</li></ul></blockquote><h4 id="E、分组查询"><a href="#E、分组查询" class="headerlink" title="E、分组查询"></a>E、分组查询</h4><p><strong>1、语法</strong></p><blockquote><p><font color="#e96900">SELECT 分组函数, 其他列(要求出现在group by的后面)<br>FROM 表名<br>[WHERE 筛选条件]<br>GROUP BY 分组的列表<br>[ORDER BY 排序列表[asc|desc]]</font><br><strong>where 一定要放在 from 后面</strong><br><strong>查询列表有点特殊，要求是分组函数和group by后出现的字段</strong></p></blockquote><p><strong>2、简单使用</strong></p><blockquote><p>案例1：查询每个部门的平均工资</p><ul><li><font color="#e96900" size="4">select department_id, avg(salary)<br>from employees<br>group by department_id;</font></li></ul><p>案例2：查询每个工种的最高工资</p><ul><li><font color="#e96900" size="4">select job_id, max(salary)<br>from employees<br>group by job_id;</font></li></ul><p>案例3：查询每个位置上的部门个数</p><ul><li><font color="#e96900" size="4">select location_id, count(*)<br>from departments<br>group by location_id;</font></li></ul></blockquote><p><strong>3、按多字段分组</strong></p><blockquote><p>案例1：查询每个部门每个工种的平均工资</p><ul><li><font color="#e96900" size="4">select avg(salary), department_id, job_id<br>from employees<br>group by department_id, job_id;</font></li><li><font color="#e96900" size="4">select avg(salary), department_id, job_id<br>from employees<br>group by job_id, department_id;</font></li></ul></blockquote><p><strong>4、添加分组前筛选，其筛选源是 原始表，放在 group by 子句的前面，使用 where 关键字。能在分组前筛选的优先使用分组前筛选。</strong></p><blockquote><p>案例1：查询邮箱中包含 ‘a’ 字符的，每个部门的平均工资</p><ul><li><font color="#e96900" size="4">select avg(salary), department_id<br>from employees<br>where email like &#39;%a%&#39;<br>group by department_id;</font></li></ul><p>案例2：查询有奖金的每个领导手下员工的最高工资</p><ul><li><font color="#e96900" size="4">select max(salary), manager_id<br>from employees<br>where commission_pct is not null<br>group by manager_id;</font></li></ul></blockquote><p><strong>5、添加分组后筛选，其筛选源是 分组后的结果集，放在 group by 子句的后面，使用 having 关键字。筛选条件涉及到分组函数的，一定是使用分组后筛选，也就是使用 having 来筛选</strong></p><blockquote><p>案例1：查询哪些部门的员工个数 &gt; 2</p><ul><li><font color="#e96900" size="4">select count(*), department_id<br>from employees<br>group by department_id<br>having count(*) &gt; 2;</font></li></ul><p>案例2：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</p><ul><li><font color="#e96900" size="4">select job_id, max(salary)<br>from employees<br>where commission_pct is not null<br>group by job_id<br>having max(salary) &gt; 12000;</font></li></ul><p>案例3：查询领导编号 &gt; 102的每个领导手下员工的最低工资 &gt; 5000的领导编号是哪个，以及其员工最低工资</p><ul><li><font color="#e96900" size="4">select min(salary), manager_id<br>from employees<br>where manager_id &gt; 102<br>group by manager_id<br>having min(salary) &gt; 5000;</font></li></ul></blockquote><p><strong>6、按函数分组</strong></p><blockquote><p>案例1：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数 &gt; 5的有哪些</p><ul><li><font color="#e96900" size="4">select count(*), length(last_name) len_name<br>from employees<br>group by length(last_name)<br>having count(*) &gt; 5;</font></li><li><font color="#e96900" size="4">select count(*) c, length(last_name) len_name<br>from employees<br>group by len_name<br>having c &gt; 5;</font></li></ul></blockquote><p><strong>7、添加排序</strong></p><blockquote><p>案例1：查询每个部门每个工种的员工的平均工资，并且按平均工资的高低显示</p><ul><li><font color="#e96900" size="4">select avg(salary), department_id, job_id<br>from employees<br>group by department_id, job_id<br>order by avg(salary) desc;</font></li></ul><p>案例2：查询不为null的每个部门每个工种的员工的平均工资，并且按平均工资的高低显示</p><ul><li><font color="#e96900" size="4">select avg(salary), department_id, job_id<br>from employees<br>where department_id is not null and job_id is not null<br>group by department_id, job_id<br>order by avg(salary) desc;</font></li></ul></blockquote><h4 id="F、连接查询"><a href="#F、连接查询" class="headerlink" title="F、连接查询"></a>F、连接查询</h4><p>  连接查询又称为多表查询，当查询的字段来自于多个表时，就会用到连接查询。笛卡尔乘积现象：表1有m行，表2有n行，结果&#x3D;m*n行。发生的原因：没有有效的连接条件。如何避免：添加有效的连接条件。</p><p><strong>1、分类</strong></p><blockquote><p>按年代分类：</p><ul><li>sql92标准（在mysql中仅仅支持内连接）</li><li>sql99标准【推荐】（在mysql中支持内连接、外连接(左外和右外)、交叉连接）</li></ul><p>按功能分类：</p><ul><li>内连接（等值连接、非等值连接、自连接）</li><li>外连接（左外连接、右外连接、全外连接）</li><li>交叉连接</li></ul></blockquote><p><strong>2、sql92语法，内连接</strong></p><blockquote><p><strong>2.1、语法</strong></p><blockquote><p><font color="#e96900" size="4">select 查询列表<br>from 表1, 表2, …<br>where 等值连接条件<br>[and 筛选条件]<br>[GROUP BY 分组的列表]<br>[ORDER BY 排序列表[asc|desc]]</font></p></blockquote><p><strong>2.2、等值连接</strong></p><blockquote><p><strong>① 简单等值连接</strong></p><ul><li>案例1：查询女神名和对应的男神名<ul><li><font color="#e96900">SELECT name, boyName<br>  FROM beauty, boys<br>  WHERE beauty.boyfriend_id &#x3D; boys.id;</font></li></ul></li></ul><p><strong>② 表的顺序可以交换</strong></p><ul><li>案例1：查询员工名和对应的部门名<ul><li><font color="#e96900">SELECT name, boyName<br>  FROM beauty, boys<br>  WHERE beauty.boyfriend_id &#x3D; boys.id;</font></li></ul></li></ul><p><strong>③ 为表取别名</strong></p><ul><li>案例1：查询员工名、工种号、工种名<ul><li><font color="#e96900">select last_name, emp.job_id, job_title<br>  from employees emp, jobs j<br>  where emp.job_id &#x3D; j.job_id;</font></li></ul></li><li>取别名①提高语句的简洁度，②区分多个重名的字段</li><li><strong>注意：</strong> 如果为表起了别名，则查询的字段就不能使用原来的表名去限定</li></ul><p><strong>④ 加筛选条件</strong></p><ul><li>案例1：查询有奖金的员工名、部门名<ul><li><font color="#e96900">select last_name, department_name, commission_pct<br>  from employees e, departments d<br>  where e.department_id&#x3D;d.department_id<br>  AND e.commission_pct is not null;</font></li></ul></li><li>案例2：查询城市名中第二个字符为’o’的部门名和城市<ul><li><font color="#e96900">select department_name, city<br>  from departments d, locations l<br>  where d.location_id &#x3D; l.location_id<br>  AND city like &quot;_o%&quot;;</font></li></ul></li></ul><p><strong>⑤ 加分组</strong></p><ul><li>案例1：查询每个城市的部门个数<ul><li><font color="#e96900">select count(*) 个数, city<br>  from departments d, locations l<br>  where d.location_id &#x3D; l.location_id<br>  group by city;</font></li></ul></li><li>案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资<ul><li><font color="#e96900">select department_name, d.manager_id, min(salary)<br>  from departments d, employees e<br>  where d.department_id &#x3D; e.department_id<br>  AND commission_pct IS NOT NULL<br>  GROUP BY department_name, d.manager_id;</font></li></ul></li></ul><p><strong>⑥ 加排序</strong></p><ul><li>案例1：查询出每个工种的工种名和员工的个数，并且按员工个数降序<ul><li><font color="#e96900">select job_title, count(*)<br>  from employees e, jobs j<br>  where e.job_id &#x3D; j.job_id<br>  group by job_title<br>  order by count(*) desc;</font></li></ul></li></ul><p><strong>⑦ 多表连接</strong></p><ul><li>案例1：查询员工名、部门名和所在城市<ul><li><font color="#e96900">select last_name, department_name, city<br>  from employees e, departments d, locations l<br>  where e.department_id &#x3D; d.department_id<br>  and d.location_id &#x3D; l.location_id;</font></li></ul></li><li>案例2：继续加条件和排序<ul><li><font color="#e96900">select last_name, department_name, city<br>  from employees e, departments d, locations l<br>  where e.department_id &#x3D; d.department_id<br>  and d.location_id &#x3D; l.location_id<br>  and city like &quot;s%&quot;<br>  order by department_name desc;</font></li></ul></li></ul><p><strong>⑧ 等值连接总结</strong></p><ul><li>多表等值连接的结果为多表的交集部分</li><li>n 表连接，至少需要 n-1 个连接条件</li><li>多表的顺序没有要求</li><li>一般需要为表起别名</li><li>可以搭配排序、分组、筛选等子句一同使用</li></ul></blockquote><p><strong>2.3、非等值连接</strong></p><blockquote><p><strong>① 简单非等值连接</strong></p><ul><li>案例1：查询员工的工资和工资级别<ul><li><font color="#e96900">select salary, grade_level<br>  from employees e, job_grades g<br>  where salary between lowest_sal and highest_sal;</font></li></ul></li></ul><p><strong>② 加入其它筛选条件</strong></p><ul><li>案例1：查询员工的工资级别为’A’或者’B’的工资<ul><li><font color="#e96900">select salary, grade_level<br>  from employees e, job_grades g<br>  where salary between lowest_sal and highest_sal<br>  and grade_level in (&#39;A&#39;, &#39;B&#39;);</font></li></ul></li></ul></blockquote><p><strong>2.4、自连接</strong></p><blockquote><p><strong>① 简单自连接</strong></p><ul><li>案例1：查询员工和上级的名称<ul><li><font color="#e96900">select e.employee_id, e.last_name 员工名, m.employee_id, m.last_name 上级名<br>  from employees e, employees m<br>  where e.manager_id &#x3D; m.employee_id;</font></li></ul></li></ul></blockquote></blockquote><p><strong>3、sql99语法，内连接</strong></p><blockquote><p><strong>3.1、语法</strong><br><font color="#e96900">select 查询列表<br>from 表1 别名 【连接类型】join 表2 别名 on 连接条件<br>【where 筛选条件】<br>【group by 分组】<br>【having 筛选条件】<br>【order by 排序字段 【asc|desc】】</font></p><blockquote><p><strong>其中连接类型：</strong></p><ul><li>内连接：<strong>inner</strong></li><li>左外连接：<strong>left [outer]</strong></li><li>右外连接：<strong>right [outer]</strong></li><li>全外连接：<strong>full [outer]</strong></li><li>交叉连接：<strong>cross</strong></li></ul></blockquote><p><strong>3.2、等值连接（inner可省略）</strong></p><blockquote><ul><li><p>案例1：查询员工名、部门名</p><ul><li><font color="#e96900">select last_name, department_name<br>  from employees e<br>  inner join departments d<br>  on e.department_id &#x3D; d.department_id;</font></li><li><font color="#e96900">select last_name, department_name<br>  from departments d<br>  inner join employees e<br>  on e.department_id &#x3D; d.department_id;</font></li></ul></li><li><p>案例2：查询名字中包含’e’的员工名和工种名（添加筛选）</p><ul><li><font color="#e96900">select last_name, job_title<br>  from employees e<br>  inner join jobs j<br>  on e.job_id &#x3D; j.job_id<br>  where last_name like &#39;e&#39;;</font></li></ul></li><li><p>案例3：查询部门个数 &gt;3 的城市名和部门个数（分组+筛选）</p><ul><li><font color="#e96900">select city, count(*) 部门个数<br>  from departments d<br>  inner locations l<br>  on d.location_id &#x3D; l.location_id<br>  group by city<br>  where count(*) &gt; 3;</font></li></ul></li><li><p>案例四：查询哪个部门的部门员工个数 &gt;3 的部门名和员工个数，并按个数排序（排序）</p><ul><li><font color="#e96900">select e.department_id, d.department_name, count(*) 个数<br>  from employees e<br>  inner join departments d on e.department_id &#x3D; d.department_id<br>  group by department_id<br>  having count(*) &gt; 3<br>  order by count(*) desc;</font></li></ul></li><li><p>案例5：查询员工名、部门名、工种名，并按部门名降序（多表连接）</p><ul><li><font color="#e96900">select last_name, department_name, job_title<br>  from employees e<br>  inner join departments d on e.department_id &#x3D; d.department_id<br>  inner join jobs j on e.job_id &#x3D; j.job_id<br>  order by department_name desc;</font></li></ul></li></ul></blockquote><p><strong>3.3、非等值连接（inner可省略）</strong></p><blockquote><ul><li><p>案例1：查询员工的工资级和工资级别</p><ul><li><font color="#e96900">select salary, grade_level<br>  from employees e<br>  inner join job_grades g<br>  on e.salary between g.lowest_sal and g.highest_sal;</font></li></ul></li><li><p>案例2：查询员工的工资级别为’A’或者’B’的工资（加入筛选条件）</p><ul><li><font color="#e96900">select salary, grade_level<br>  from employees e<br>  inner join job_grades g on salary between lowest_sal and highest_sal<br>  where grade_level in (&#39;A&#39;, &#39;B&#39;);</font></li></ul></li><li><p>案例3：查询每个工资级别的个数，并按照工资级别降序（加入分组排序）</p><ul><li><font color="#e96900">select grade_level, count(*)<br>  from employees e<br>  inner join job_grades g on salary between lowest_sal and highest_sal<br>  group by grade_level<br>  order by grade_level desc;</font></li></ul></li></ul></blockquote><p><strong>3.4、自连接（inner可省略）</strong></p><blockquote><ul><li>案例1：查询员工的名字、上级的名字<ul><li><font color="#e96900">select e.last_name 员工名, m.last_name 上级名<br>  from employees e<br>  inner join employees m on e.manager_id &#x3D; m.employee_id;</font></li></ul></li></ul></blockquote></blockquote><p><strong>4、外连接</strong><br>  应用场景：用于查询一个表中有，另一个表中没有的记录。特点：①、外连接的查询结果为主表中的所有记录，如果从表中有和它匹配的，则显示匹配的值，如果从表中没有和它匹配的，则显示null。外连接查询结果 &#x3D; 内连接结果 + 主表中有而从表中没有的记录。②、左外连接，left join 左边的是主表，右外连接，right join 右边的是主表。③、左外连接和右外连接交换连个表的顺序，可以实现同样的查询效果。④、全外连接 &#x3D; 内连接的结果 + 表1中有但表2没有的 + 表2中有但表1中没有的。<strong>但是mysql不支持全外连接的语法。</strong></p><blockquote><p>案例1：查询男朋友 不在男神表的女神名</p><ul><li><font color="#e96900">SELECT b.name, bo.*<br>FROM beauty b<br>LEFT OUTER JOIN boys bo ON b.boyfriend_id &#x3D; bo.id<br>WHERE bo.id IS NULL;</font></li></ul><p>案例2：查询哪个部门没有员工</p><ul><li><p>左外连接</p><ul><li><font color="#e96900">select d.*, e.employee_id<br>  from departments d<br>  left outer join employees e on d.department_id &#x3D; e.department_id<br>  where e.employee_id is null;</font></li></ul></li><li><p>右外连接</p><ul><li><font color="#e96900">select d.*, e.employee_id<br>  from employees e<br>  right outer join departments d on e.department_id &#x3D; d.department_id<br>  where e.employee_id is null;</font></li></ul></li></ul></blockquote><p><strong>5、交叉连接</strong><br>  sql99语法中的交叉连接类似于笛卡尔乘积。mysql中是支持交叉连接的语法的。</p><blockquote><p><font color="#e96900">select b.*, bo.*<br>from beauty b<br>cross join boys bo;</font></p></blockquote><p><strong>6、总结</strong></p><blockquote><p>sql92 和 sql99 相比</p><ul><li>功能：sql99支持的连接查询比较多</li><li>可读性：sql99实现了连接条件和筛选条件的分离，可读性较高</li></ul></blockquote><p><img src="/posts/b6041c1e/1.png"></p><h4 id="G、子查询"><a href="#G、子查询" class="headerlink" title="G、子查询"></a>G、子查询</h4><p>  含义：出现在其他语句（包括增删改）中的 select 语句，称为<strong>子查询</strong>或<strong>内查询</strong>。内部嵌套了其他select语句的查询称为<strong>主查询</strong>或<strong>外查询</strong>。</p><p><strong>1、分类</strong></p><blockquote><p><strong>按照子查询出现的位置：</strong></p><ul><li>select 后面</li><li>from 后面</li><li><font color="#990000"><strong>where 或 having 后面</strong></font></li><li>exists 后面（相关子查询）</li></ul><p><strong>按照结果集的行数不同：</strong></p><ul><li><font color="#990000"><strong>标量子查询</strong></font>（结果集只有一行一列，也叫作单行子查询）</li><li><font color="#990000"><strong>列子查询</strong></font>（结果集只有一列多行，或叫做多行子查询）</li><li>行子查询（结果集有一行多列，多行多列其实也行）</li><li>表子查询（结果集就可以很随意了，一般为多行多列）</li></ul><p><strong>用法限制：</strong></p><ul><li>select后面 仅仅支持标量子查询</li><li>from后面 支持表子查询</li><li><font color="#990000"><strong>where或having后面 支持标量子查询(单行)、列子查询(多行)</strong></font>、行子查询（较少使用）</li><li>exists后面 支持表子查询</li></ul><p><strong>用法特点：</strong></p><ul><li>子查询要放在小括号内部</li><li>子查询一般放在条件的右侧</li><li>标量子查询，一般搭配着单行操作符使用 “&gt;”、“&lt;”、“&gt;&#x3D;”、“&lt;&#x3D;”、“&#x3D;”、“&lt;&gt;”</li><li>列子查询，一般搭配着多行操作符使用 “in”、“any”、“some”、“all”</li><li>子查询的执行会优先于主查询的执行，主查询的条件用到了子查询的结果</li></ul></blockquote><p><strong>2、where或having 后面的标量子查询（单行子查询）</strong><br>  标量子查询返回的值就是一个单值，所以也称为单行子查询。</p><blockquote><p>案例1：谁的工资比 “Abel” 高</p><ul><li><font color="#e96900">select *<br>from employees<br>where salary &gt; (<strong>SELECT salary FROM employees WHERE last_name &#x3D; &quot;Abel&quot;</strong>);</font></li></ul><p>案例2：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</p><ul><li><font color="#e96900">select last_name, job_id, salary<br>from employees<br>where job_id &#x3D; (<strong>select job_id from employees where employee_id &#x3D; 141</strong>)<br>and salary &gt; (<strong>select salary from employees where employee_id &#x3D; 143</strong>);</font></li></ul><p>案例3：返回公司工资最少的员工的last_name, job_id 和 salary</p><ul><li><font color="#e96900">select last_name, job_id, salary<br>from employees<br>where salary &#x3D; (<strong>select min(salary) from employees</strong>);</font></li></ul><p>案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资</p><ul><li><font color="#e96900">select department_id, min(salary)<br>from employees<br>group by department_id<br>having min(salary) &gt; (<strong>select min(salary) from employees where department_id &#x3D; 50</strong>);</font></li></ul></blockquote><p><strong>3、where或having 后面的列子查询（多行子查询）</strong><br>  列子查询返回多行单列值，主查询会使用到一些<strong>多行比较操作符</strong>。当然包含这些多行操作符的查询往往可以使用其他的方式进行替换，使其可读性更高。</p><ul><li><table><thead><tr><th>多行比较操作符</th><th>含义</th><th>替换</th></tr></thead><tbody><tr><td>in &#x2F; not in</td><td>等于列表中的<strong>任意一个</strong></td><td>in()可以替换为“&#x3D;any()”；not int()可以替换为“&lt;&gt;all()”</td></tr><tr><td>any 或 some</td><td>和子查询返回的<strong>某一个</strong>值比较</td><td>“&lt;any()”可以替换为“&lt;max()”；“&gt;any()”可以替换为“&gt;min()”；“&#x3D;any()”可以替换为“in()”</td></tr><tr><td>all</td><td>和子查询返回的<strong>所有</strong>值比较</td><td>“&lt;all()”可以替换为“&lt;min()”；“&gt;all()”可以替换为“&gt;max()”</td></tr></tbody></table></li></ul><blockquote><p>案例1：返回 location_id 是 1400或1700的部门中的所有员工姓名</p><ul><li><font color="#e96900">select last_name<br>from employees<br>where department_id in (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<strong>select department_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from departments<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where location_id in (1400, 1700)</strong><br>);</font></li><li><font color="#e96900">select last_name<br>from employees<br>where department_id &#x3D; any(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<strong>select department_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from departments<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where location_id in (1400, 1700)</strong><br>);</font></li></ul><p>案例2：返回其他工种中比job_id为“IT_PROG”的工种任一工资低的员工的：工号、姓名、job_id、以及salary</p><ul><li><font color="#e96900">select employee_id, last_name, job_id, salary<br>from employees<br>where salary &lt; any(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<strong>select distinct salary<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where job_id &#x3D; &quot;IT_PROG&quot;</strong><br>) and job_id &lt;&gt; &quot;IT_PROG&quot;;</font></li><li><font color="#e96900">select employee_id, last_name, job_id, salary<br>from employees<br>where salary &lt; (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<strong>select max(salary)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where job_id &#x3D; &quot;IT_PROG&quot;</strong><br>) and job_id &lt;&gt; &quot;IT_PROG&quot;;</font></li></ul><p>案例3：返回其他工种中比job_id为“IT_PROG”的工种所有工资低的员工的：工号、姓名、job_id、以及salary</p><ul><li><font color="#e96900">select employee_id, last_name, job_id, salary<br>from employees<br>where salary &lt; all(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<strong>select distinct salary<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where job_id &#x3D; &quot;IT_PROG&quot;</strong><br>) and job_id &lt;&gt; &quot;IT_PROG&quot;;</font></li><li><font color="#e96900">select employee_id, last_name, job_id, salary<br>from employees<br>where salary &lt; (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<strong>select min(salary)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where job_id &#x3D; &quot;IT_PROG&quot;</strong><br>) and job_id &lt;&gt; &quot;IT_PROG&quot;;</font></li></ul></blockquote><p><strong>4、where或having 后面的行子查询</strong><br>  行子查询一般返回一行多列值，也可以是多行多列值。行子查询一般很少使用。</p><blockquote><p>案例1：查询员工编号最小并且工资最高的员工信息</p><ul><li><font color="#e96900">select *<br>from employees<br>where employee_id &#x3D; (<strong>select min(employee_id) from employees</strong>)<br>and salary &#x3D; (<strong>select max(salary) from employees</strong>);</font></li><li><font color="#e96900">select *<br>from employees<br>where (employee_id, salary) &#x3D; (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<strong>select min(employee_id), max(salary)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees</strong><br>);</font></li></ul></blockquote><p><strong>5、select 后面的子查询</strong><br>  select后面的子查询仅仅只支持标量子查询，返回值只能是单值。</p><blockquote><p>案例1：查询每个部门的员工个数</p><ul><li><font color="#e96900">select d.*, (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select count(*)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees e<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where e.department_id &#x3D; d.department_id<br>) as 员工个数<br>from departments d;</font></li></ul><p>案例1：查询员工号为102的员工的部门名</p><ul><li><font color="#e96900">select (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select department_name<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from departments d<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inner join employees e on d.department_id &#x3D; e.department_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where e.employee_id&#x3D;102<br>) 部门名;</font></li></ul></blockquote><p><strong>6、from 后面的子查询</strong><br>  from后面的子查询一般是表子查询。该子查询结果直接充当一个新的数据表来使用，要求必须要起别名。</p><blockquote><p>案例1：查询每个部门的平均工资的工资等级</p><ul><li><font color="#e96900">select temp.*, grade_level<br>from (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select department_id, avg(salary) avg_sal<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;group by department_id<br>) as temp<br>left join job_grades g on temp.avg_sal between g.lowest_sal and g.highest_sal;</font></li></ul></blockquote><p><strong>7、exists 后面的子查询</strong><br>  有时也称为相关子查询。用exists来判断后面的子查询是否存在结果，返回 1 或 0。</p><blockquote><p>案例1：查询有员工名的部门名</p><ul><li><font color="#e96900">select department_name<br>from departments d<br>where exists(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select employee_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees e<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where e.department_id &#x3D; d.department_id<br>);</font></li><li><font color="#e96900">select department_name<br>from departments d<br>where d.department_id in (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select distinct department_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>);</font></li></ul><p>案例2：查询没有女朋友的男神信息</p><ul><li><font color="#e96900">select bo.*<br>from boys bo<br>where not exists(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from beauty<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where boyfriend_id &#x3D; bo.id<br>);</font></li><li><font color="#e96900">select bo.*<br>from boys bo<br>where bo.id not in (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select distinct boyfriend_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from beauty<br>);</font></li></ul></blockquote><p><strong>8、子查询案例</strong></p><blockquote><p>案例1：查询和‘Zlotkey’相同部门的员工姓名和工资</p><ul><li><font color="#e96900" size="3">select last_name, salary<br>from employees<br>where department_id &#x3D; (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select department_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where last_name &#x3D; &quot;Zlotkey&quot;<br>);</font></li></ul><p>案例2：查询工资比公司平均工资高的员工的员工号，姓名和工资</p><ul><li><font color="#e96900" size="3">select employee_id, last_name, salary<br>from employees<br>where salary &gt; (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select avg(salary)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>);</font></li></ul><p>案例3：查询各部门中工资比本部门中平均工资高的员工的员工号、姓名和工资</p><ul><li><font color="#e96900" size="3">select employee_id, last_name, salary<br>from employees e<br>left join (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select department_id, avg(salary) avg_sal<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;group by department_id<br>) as temp on e.department_id &#x3D; temp.department_id<br>where e.salary &gt; temp.avg_sal;</font></li></ul><p>案例4：查询与姓名中包含字母‘u’的员工在相同部门的员工的员工号和姓名</p><ul><li><font color="#e96900" size="3">select employee_id, last_name<br>from employees<br>where department_id in (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select distinct department_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where last_name like &#39;%u%&#39;<br>);</font></li></ul><p>案例5：查询在部门的location_id为1700的部门工作的员工的员工号</p><ul><li><font color="#e96900" size="3">select employee_id<br>from employees<br>where department_id &#x3D; any(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select distinct department_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from departments<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where location_id &#x3D; 1700<br>);</font></li></ul><p>案例6：查询管理者是K_ing的员工姓名和工资</p><ul><li><font color="#e96900" size="3">select last_name, salary<br>from employees<br>where manager_id in (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select employee_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where last_name &#x3D; &quot;K_ing&quot;<br>);</font></li></ul><p>案例7：查询工资最高的员工的姓名，要求first_name和last_name显示为一列，列明为 姓·名</p><ul><li><font color="#e96900" size="3">select concat(last_name, first_name), salary<br>from employees<br>where salary &#x3D; (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select max(salary)<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>);</font></li><li><font color="#e96900" size="3">select concat(last_name, first_name), salary<br>from employees<br>where salary &#x3D; (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select salary<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;order by salary desc<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;limit 1<br>);</font></li></ul></blockquote><h4 id="H、分页查询"><a href="#H、分页查询" class="headerlink" title="H、分页查询"></a>H、分页查询</h4><p>  非常具有应用场景，当要显示的数据，一页显示不全，就需要提交分页查询的sql请求。<br><strong>1、语法</strong></p><blockquote><p><font color="#e96900">select 查询列表<br>from 表1 别名1<br>【连接类型】join 表2 别名2 on 连接条件<br>【where 筛选条件】<br>【group by 分组字段】<br>【having 筛选条件】<br>【order by 排序字段 【asc|desc】】<br>limit offset, size;</font><br><strong>offset表示要显示条目的其实索引（起始索引从0开始）</strong><br><strong>size表示要显示的条目数</strong></p><blockquote><p><strong>特点：</strong></p><ul><li>limit语句放在查询语句的最后，是最后被执行的语句</li><li>分页公式：假设要显示的页数为 page，每页的条目数为 size<ul><li><code>select 查询列表 from 表 limit (page-1)*size, size;</code></li></ul></li></ul></blockquote></blockquote><p><strong>2、例子</strong></p><blockquote><p>案例1：查询前五条员工的信息</p><ul><li><font color="#e96900">select * from employees limit 0, 5;</font></li><li><font color="#e96900">select * from employees limit 5;</font>（当offset为0时，可以省略）</li></ul><p>案例2：查询第11条至第25条员工信息</p><ul><li><font color="#e96900">select * from employees limit 10, 15;</font></li></ul><p>案例3：查询有奖金的员工信息，并且工资较高的前10名显示</p><ul><li><font color="#e96900">select *<br>from employees<br>where commission_pct is not null<br>order by salary desc<br>limit 10;</font></li></ul></blockquote><h4 id="I、union联合查询"><a href="#I、union联合查询" class="headerlink" title="I、union联合查询"></a>I、union联合查询</h4><p>  联合查询是将多条查询语句的结果合并成一个结果。union会自动去掉重复的结果，可以使用union all达到不去重的效果。<br><strong>1、语法</strong></p><blockquote><p><font color="#e96900">查询语句1<br>union<br>查询语句2<br>union<br>查询语句3<br>……</font></p><blockquote><p><strong>应用场景：</strong></p><ul><li>要查询的结果可能来自于多个表，且多个表没有直接的连接关系，但查询的信息一致</li></ul><p><strong>特点：</strong></p><ol><li>要求多条查询语句的查询列数是一致的</li><li>要求多条查询语句的查询列表中每一列的类型和顺序最好一致，这样才有意义</li><li>union关键字默认是去重的，如果使用union all则可以包含重复项</li></ol></blockquote></blockquote><p><strong>2、例子</strong></p><blockquote><p>案例1：查询邮箱中部门编号&gt;90或邮箱中包含a的员工信息</p><ul><li><font color="#e96900">select * from employees where department_id &gt; 90<br>union<br>select * from employees where email like &quot;%a%&quot;;</font></li><li><font color="#e96900">select *<br>from employees<br>where department_id &gt; 90<br>or email like &#39;%a%&#39;;</font></li></ul></blockquote><hr><h3 id="四、DML-数据操纵语言"><a href="#四、DML-数据操纵语言" class="headerlink" title="四、DML 数据操纵语言"></a>四、DML 数据操纵语言</h3><p>  <strong>Data Manipulation Language</strong><br>  DML主要涉及到数据的插入（insert）、修改（update）和删除（delete）。</p><h4 id="A、插入语句"><a href="#A、插入语句" class="headerlink" title="A、插入语句"></a>A、插入语句</h4><p><strong>1、语法</strong></p><blockquote><ul><li>方式一：<ul><li>单行：<font color="#e96900" size="4">insert into 表名(列名, …) values(值1, …);</font></li><li>多行：<font color="#e96900" size="4">insert into 表名(列名, …)<br>  values(值1, …),<br>  (值2, …),<br>  ……<br>  (值n, …);</font></li></ul></li><li>方式二：<font color="#e96900" size="4">insert into 表名 set 列名1&#x3D;值, 列名2&#x3D;值, … ;</font></li></ul></blockquote><p><strong>2、案例特点</strong></p><blockquote><ul><li>插入的值的类型要与列的类型一致或兼容<blockquote><ul><li><font color="#e96900">insert into beauty(id, NAME, sex, borndate, phone, photo, boyfriend_id)<br>values(13, &#39;唐老鸭&#39;, &#39;女&#39;, &#39;1990-4-23&#39;, &#39;13676542378&#39;, null, 2);</font></li><li><font color="#e96900">insert into beauty<br>set id&#x3D;13, name&#x3D;&#39;唐老鸭&#39;, sex&#x3D;&#39;女&#39;, borndate&#39;1990-4-23&#39;, phone&#x3D;&#39;13676542378&#39;, photo&#x3D;null, boyfriend_id&#x3D;2;</font></li></ul></blockquote></li><li>不可以为null的列必须插入值，可以为null的列可以插入null值，或直接不插入值<blockquote><ul><li><font color="#e96900">insert into beauty(id, name, sex, borndate, phone, photo, boyfriend_id)<br>values(13, &#39;唐老鸭&#39;, &#39;女&#39;, &#39;1990-4-23&#39;, &#39;13676542378&#39;, null, 2);</font></li><li><font color="#e96900">insert into beauty(id, name, sex, borndate, phone, boyfriend_id)<br>values(13, &#39;唐老鸭&#39;, &#39;女&#39;, &#39;1990-4-23&#39;, &#39;13676542378&#39;, 9);</font></li><li><font color="#e96900">insert into beauty(id, name, sex, phone)<br>values(14, &#39;米老鼠&#39;, &#39;女&#39;, &#39;12398776543&#39;);</font></li><li><font color="#e96900">insert into beauty<br>set id&#x3D;14, name&#x3D;&#39;米老鼠&#39;, sex&#x3D;&#39;女&#39;, phone&#x3D;&#39;12398776543&#39;;</font></li></ul></blockquote></li><li>列的顺序可以调换，但是后面的值需要一一对应</li><li>列数和值的个数必须要一致</li><li>可以省略列名，省略后就是默认所有列，而且列的顺序和表中列的顺序一致<blockquote><ul><li><font color="#e96900">insert into beauty<br>values(15, &#39;张飞&#39;, &#39;男&#39;, &#39;1990-5-12&#39;, &#39;12387656789&#39;, null, null);</font></li></ul></blockquote></li></ul></blockquote><p><strong>3、插入方式对比</strong></p><blockquote><ul><li>values的方式支持多行插入，set的方式不支持多行插入<blockquote><ul><li><font color="#e96900">insert into 表名(列明, …)<br>values(值1, …),<br>values(值2, …),<br>……<br>values(值n, …);</font></li><li><font color="#e96900">insert into beauty<br>values(16, &#39;张飞&#39;, &#39;男&#39;, &#39;1990-5-12&#39;, &#39;12387656789&#39;, null, null),<br>(17, &#39;张飞&#39;, &#39;男&#39;, &#39;1990-5-12&#39;, &#39;12387656789&#39;, null, null),<br>(18, &#39;张飞&#39;, &#39;男&#39;, &#39;1990-5-12&#39;, &#39;12387656789&#39;, null, null);</font></li></ul></blockquote></li><li>values的方式支持子查询，set的方式不支持子查询<blockquote><ul><li><font color="#e96900">insert into beauty(id, name, sex, phone)<br>select 19, &#39;貂蝉&#39;, &#39;女&#39;, &#39;12345687654&#39;;</font></li><li><font color="#e96900">insert into beauty(id, name, sex, phone)<br>select id+20, boyname, &#39;男&#39;, &#39;112&#39;<br>from boys where id &lt; 3;</font></li></ul></blockquote></li></ul></blockquote><h4 id="B、修改语句"><a href="#B、修改语句" class="headerlink" title="B、修改语句"></a>B、修改语句</h4><p><strong>1、修改单表记录</strong></p><blockquote><ul><li><strong>语法：</strong><blockquote><p><font color="#e96900" size="4">update 表名<br>set 列1&#x3D;新值, 列2&#x3D;新值, …<br>where 筛选条件;</font></p></blockquote></li><li>案例1：修改beauty表中id大于等于13的记录的电话为12345678909<blockquote><ul><li><font color="#e96900">update beauty<br>set phone&#x3D;&#39;12345678909&#39;<br>where id &gt;&#x3D; 13;</font></li></ul></blockquote></li></ul></blockquote><p><strong>2、修改多表记录【补充】</strong></p><blockquote><ul><li><strong>语法：</strong><blockquote><ul><li>sql92语法：<br><font color="#e96900" size="4">update 表1 别名, 表2 别名<br>set 列1&#x3D;新值, 列2&#x3D;新值, …<br>where 连接条件<br>and 筛选条件;</font></li><li>sql99语法：<br><font color="#e96900" size="4">update 表1 别名<br>inner|left|right| join 表2 别名<br>on 连接条件<br>set 列1&#x3D;新值, 列2&#x3D;新值, …<br>where 筛选条件;</font></li></ul></blockquote></li><li>案例1：修改张无忌的女朋友的手机号为114<blockquote><ul><li><font color="#e96900">update boys bo<br>inner join beauty b on bo.id &#x3D; b.boyfriend_id<br>set b.phone &#x3D; &#39;114&#39;<br>where bo.boyName &#x3D; &quot;张无忌&quot;;</font></li></ul></blockquote></li><li>案例2：修改没有男盆友的女神的男盆友编号都为2号<blockquote><ul><li><font color="#e96900">update boys bo<br>right join beauty b on bo.id &#x3D; b.boyfriend_id<br>set b.boyfriend_id &#x3D; 2<br>where bo.id is null;</font></li></ul></blockquote></li></ul></blockquote><h4 id="C、删除语句"><a href="#C、删除语句" class="headerlink" title="C、删除语句"></a>C、删除语句</h4><p><strong>1、语法</strong></p><blockquote><ul><li>方式一：delete（可按照筛选进行删除）<ul><li>单表删除：<font color="#e96900" size="4">delete from 表名 where 筛选条件;</font></li><li>多表删除：<ul><li>sql92：<br>  <font color="#e96900" size="4">delete 别名1【,别名2】<br>  from 表1 别名1, 表2 别名2<br>  where 连接条件<br>  and 筛选条件;</font></li><li>sql99：<br>  <font color="#e96900" size="4">delete 别名1【,别名2】<br>  from 表1 别名1<br>  inner|left|right join 表2 别名2 on 连接条件<br>  where 筛选条件;</font></li></ul></li></ul></li><li>方式二：truncate（不能筛选，也就是不能加where，只能整表删除）<ul><li><font color="#e96900" size="4">truncate table 表名;</font></li></ul></li></ul></blockquote><p><strong>2、案例</strong></p><blockquote><p>案例1：删除手机号以9结尾的女神信息</p><ul><li><font color="#e96900">delete from beauty where phone like &#39;%9&#39;;</font></li></ul><p>案例2：删除张无忌的女朋友的信息</p><ul><li><font color="#e96900">delete b<br>from beauty b<br>inner join boys bo on b.boyfriend_id &#x3D; bo.id<br>where bo.boyName &#x3D; &quot;张无忌&quot;;</font></li></ul><p>案例3：删除黄晓明的信息以及他女朋友的信息</p><ul><li><font color="#e96900">delete b, bo<br>from beauty b<br>inner join boys bo on b.boyfriend_id &#x3D; bo.id<br>where bo.boyName &#x3D; &quot;黄晓明&quot;;</font></li></ul><p>案例4：truncate清空数据</p><ul><li><font color="#e96900">truncate table boys;</font></li></ul></blockquote><p><strong>3、delete 和 truncate 区别</strong></p><ul><li>delete 可以加where条件，truncate 不能加where条件</li><li>truncate 可以理解为清空全表，效率高一丢丢</li><li>假如要删除的表中有自增长列，如果用delete删除后，再插入数据，自增长列的值从断点开始；而truncate删除后，在插入数据，自增长列的值从1开始</li><li>truncate 删除没有返回值，而delete删除有返回值（受影响的行数）</li><li>truncate 删除后不能回滚，delete删除后可以回滚</li></ul><hr><h3 id="五、DDL-数据库模式定义语言"><a href="#五、DDL-数据库模式定义语言" class="headerlink" title="五、DDL 数据库模式定义语言"></a>五、DDL 数据库模式定义语言</h3><p>  <strong>Data Definition Language</strong>，与DML语言不同，DML语言是在操作库中数据表中的数据，而DDL语言是操作库和表的结构。DML对应增删改（insert，delete，update）数据，DDL对应创建删除修改（create，drop，alter）库和表的结构。<code>IF EXISTS</code>或<code>IF NOT EXISTS</code>只能用在库或表的创建和删除时，新建列和删除列时不能用。</p><h4 id="A、库和表的管理"><a href="#A、库和表的管理" class="headerlink" title="A、库和表的管理"></a>A、库和表的管理</h4><p><strong>1、库的管理（创建create、修改alter、删除drop）</strong></p><ul><li><p>库的创建：<font color="e96900" size="4">create database [if not exists] 库名;</font></p><blockquote><p>案例1：创建Books库</p><ul><li><font color="#e96900">CREATE DATABASE Books;</font></li></ul><p>案例2：创建Books库，但是创建前先判断是否存在</p><ul><li><font color="#e96900">create database if not exists Books;</font></li></ul></blockquote></li><li><p>库的修改：<font color="e96900" size="4">alter database 库名 修改操作;</font><br>  一般来说数据库不修改。<font color="#e96900">rename database books to 新库名;</font>（已废弃，不够安全，有丢失数据的风险）</p><blockquote><p>案例1：更改库的字符集</p><ul><li><font color="#e96900">alter database books character set gbk;</font></li></ul></blockquote></li><li><p>库的删除：<font color="e96900" size="4">drop database [if exists] 库名;</font></p><blockquote><p>案例1：删除库</p><ul><li><font color="#e96900">drop database if exists books;</font></li></ul></blockquote></li></ul><p><strong>2、表的管理（创建create、修改alter、删除drop）</strong></p><ul><li><p>表的创建 ★</p><blockquote><p>语法：</p><ul><li><font color="#e96900" size="3">create table [if not exists] 表名(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;列名 列的类型[(长度)] [约束],<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;列名 列的类型[(长度)] [约束],<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;列名 列的类型[(长度)] [约束],<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;……<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;列名 列的类型[(长度)] [约束]<br>);</font></li></ul><p>案例1：创建表 Book</p><ul><li><font color="#e96900">create table book(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bName VARCHAR(20),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;price DOUBLE,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;authorID INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;publishDate DATETIME<br>);</font></li></ul><p>案例2：创建表 Author</p><ul><li><font color="#e96900">create table if not exists author(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;au_name VARCHAR(20),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nation VARCHAR(10)<br>);</font></li></ul></blockquote></li><li><p>表的修改</p><blockquote><ul><li>修改列名</li><li>修改列的类型或约束</li><li>添加新的列</li><li>删除列</li><li>修改表名</li></ul><p>语法：</p><ul><li><font color="e96900" size="3">alter table 表名 add | drop | modify | change column 列名 [列类型 约束];</font></li></ul><p>案例：</p><ul><li><code>ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME;</code></li><li><code>ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;</code></li><li><code>ALTER TABLE author ADD COLUMN annual DOUBLE;</code></li><li><code>ALTER TABLE author DROP COLUMN annual; </code></li><li><code>ALTER TABLE author RENAME TO book_author;</code></li></ul></blockquote></li><li><p>表的删除</p><blockquote><p>语法：<font color="#e96900" size="3">drop table [if exists] 表名</font><br><code>drop table if exists book_author;</code></p></blockquote></li><li><p>表的复制</p><blockquote><ul><li>仅复制表的结构<blockquote><p><font color="#e96900">CREATE TABLE copy1_author LIKE author;</font></p></blockquote></li><li>复制表的结构和全部数据<blockquote><p><font color="#e96900">CREATE TABLE copy2_author<br>SELECT * FROM author;</font></p></blockquote></li><li>复制表的结构和部分数据<blockquote><p><font color="#e96900">CREATE TABLE copy3_author<br>SELECT id, au_name, nation<br>FROM author<br>where nation &#x3D; &quot;中国&quot;;</font></p></blockquote></li><li>复制部分表结构（仅仅复制某些字段）<blockquote><p><font color="#e96900">CREATE TABLE copy4_author<br>select id, au_name<br>from author<br>where 0;</font></p></blockquote></li></ul></blockquote></li></ul><p><strong>3、建库建表的通常写法：</strong></p><ul><li><font color="#e96900">DROP DATABASE IF EXISTS 库名;<br>CREATE DATABASE 库名;</font></li><li><font color="#e96900">DROP TABLE IF EXISTS 表名;<br>CREATE TABLE 表名(…);</font></li></ul><h4 id="B、常见数据类型介绍"><a href="#B、常见数据类型介绍" class="headerlink" title="B、常见数据类型介绍"></a>B、常见数据类型介绍</h4><ul><li>数值型：<ul><li>整型 ★</li><li>小数：<ul><li>定点数</li><li>浮点数 ★</li></ul></li></ul></li><li>字符型：★<ul><li>较短的文本：char、varchar</li><li>较长的文本：text、blob（二进制数据，比如图片）</li></ul></li><li>日期型 ★</li></ul><p><strong>1、整型</strong><br>  <strong>tinyint、smallint、mediumint、int&#x2F;integer、bigint</strong></p><blockquote><table><thead><tr><th>整数类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>Tinyint</td><td>1</td><td>有符号：-128 ~ 127<br>无符号：0 ~ 255</td></tr><tr><td>Samllint</td><td>2</td><td>有符号：-(2)<sup>15</sup> ~ 2<sup>15</sup>-1<br>无符号：0 ~ 2<sup>16</sup>-1</td></tr><tr><td>Mediumint</td><td>3</td><td>有符号：-(2)<sup>23</sup> ~ 2<sup>23</sup>-1<br>无符号：0 ~ 2<sup>24</sup>-1</td></tr><tr><td>Int、Integer</td><td>4</td><td>有符号：-(2)<sup>31</sup> ~ 2<sup>31</sup>-1<br>无符号：0 ~ 2<sup>32</sup>-1</td></tr><tr><td>Bigint</td><td>8</td><td>有符号：-(2)<sup>63</sup> ~ 2<sup>63</sup>-1<br>无符号：0 ~ 2<sup>64</sup>-1</td></tr></tbody></table><p><strong>特点：</strong></p><ul><li><p>如果不设置无符号还是有符号，则默认是有符号的。如果想设置无符号，需要添加<strong>unsigned</strong>关键字。</p></li><li><p>如果插入的数值超出了该整数类型的数值范围，会报out of range异常，并且会<strong>插入临界值</strong>。</p></li><li><p>如果不设置长度，会有默认的长度。该长度代表了显示的最大宽度，如果不够会用0在左侧填充，但必须搭配<strong>zerofill</strong>关键字一起使用才有效果。使用zerofill后，就<strong>自动变为了无符号的整数类型</strong>。</p></li><li><p><font color="#e96900">drop table if exists tab_int;<br>create table tab_int(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c1 INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c2 INT(7) ZEROFILL,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c3 INT UNSIGNED,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c4 INT(8) UNSIGNED<br>);</font></p></li></ul></blockquote><p><strong>2、小数</strong></p><blockquote><table><thead><tr><th>浮点数类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>float</td><td>4</td><td>±1.75494351E-38 ~ ±3.402823466E+38</td></tr><tr><td>double</td><td>8</td><td>±2.2250738585072014E-308 ~ ±1.7976931348623157E+308</td></tr></tbody></table><table><thead><tr><th>定点数</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>dec(M, D)<br>decimal(M, D)</td><td>M+2</td><td>最大取值范围与double相同，给定decimal的有效取值范围由M和D决定</td></tr></tbody></table><ul><li>浮点型 float(M, D)、double(M, D)</li><li>定点型 dec(M, D)、decimal(M, D)</li></ul><p><strong>特点：</strong></p><ul><li><font color="#0088ee"><strong>M</strong> 表示整部位 + 小数部位的长度。</font></li><li><font color="#0088ee"><strong>D</strong> 表示小数部位的长度。</font></li><li>如果超过范围，则插入临界值。</li><li><font color="#0088ee"><strong>M</strong> 和 <strong>D</strong>都可以省略。如果是decimal，则M默认为10，D默认为0；如果是float和double，则会根据插入的数值的精度来决定精度。</font></li><li>定点型的精度较高，如果要求插入数值的精度较高如货币运算等则考虑使用。</li><li><font color="#e96900">drop table if exists tab_float;<br>create table tab_float(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f1 FLOAT(5, 2),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f2 DOUBLE(5, 2),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;f3 DECIMAL(5, 2)<br>);</font></li><li><code>insert into tab_float values(123.45, 123.45, 123.45);</code> 执行成功</li><li><code>insert into tab_float values(123.456, 123.456, 123.456);</code> 四舍五入成123.46</li><li><code>insert into tab_float values(123.4, 123.4, 123.4);</code> 结果为123.40</li><li><code>insert into tab_float values(1523.4, 1523.4, 1523.4);</code> 如果能插入，插入的值为999.99</li></ul></blockquote><p><strong>3、字符型</strong></p><ul><li>较短的文本：char、varchar</li><li>较长的文本：text、blob（较大二进制）</li><li>binary和varbinary用于保存较短的二进制</li><li>enum用于保存枚举</li><li>set用于保存集合<blockquote><table><thead><tr><th>字符串类型</th><th>最多字符数</th><th>描述及存储需求</th></tr></thead><tbody><tr><td>char(M)</td><td>M</td><td>M为0~255之间的整数</td></tr><tr><td>varchar(M)</td><td>M</td><td>M为0~65535之间的整数</td></tr><tr><td>说明：</td><td></td><td></td></tr></tbody></table><ul><li><strong>binary和varbinary类型</strong>类似于char和varchar类型，不同的是它们包含二进制字符串而不包含非二进制字符串。</li><li><strong>bit(M)表示位类型</strong>，占 1 ~ 8 个字节，范围为 bit(1) ~ bit(8)。</li><li><strong>enum类型</strong>，又称为枚举类型。要求插入的值必须为列表中指定的值之一。如果列表成员为1 ~ 255，则需要1个字节存储；如果列表成员为255 ~ 65535，则需要2个字节存储；最多需要65535个成员。</li><li><font color="#e96900">drop table if exists tab_char;<br>create table tab_char(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c1 ENUM(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;)<br>);</font></li><li><code>insert into tab_char values(&#39;a&#39;);</code> 成功插入</li><li><code>insert into tab_char values(&#39;m&#39;);</code> 报错</li><li><strong>set类型</strong>，和enum类型类似，里面可以保存0 ~ 64个成员。和enum类型最大的区别是：set类型一次可以选取多个成员，而enum只能选取一个。根据成员个数的不同，存储所占的字节也不同。成员数1 ~ 8，字节数为1；成员数9 ~ 16，字节数为2；成员数17 ~ 24，字节数为3；成员数25 ~ 32，字节数为4；成员数33 ~ 64，字节数为8；</li><li><font color="#e96900">drop table if exists tab_char;<br>create table tab_char(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s1 SET(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)<br>);</font></li><li><code>insert into tab_char values(&#39;a&#39;);</code> 成功插入</li><li><code>insert into tab_char values(&#39;A,B&#39;);</code> 成功插入</li><li><code>insert into tab_char values(&#39;a,b,d&#39;);</code> 成功插入</li></ul><p><strong>char和varchar的特点：</strong></p><ul><li>语法相同char(M)、varchar(M)，其中M代表的含义也相同，表示最多字符数。</li><li>char(M) 表示固定长度的字符，M可以省略，默认为1；varchar(M) 表示可变长度的字符，M不可以省略。</li><li>char 比较耗费存储空间，varchar 比较节省存储空间。</li><li>char 的效率高，varchar 的效率低。</li></ul></blockquote></li></ul><p><strong>4、日期型</strong></p><blockquote><table><thead><tr><th>日期和时间类型</th><th>字节</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>date</td><td>4</td><td>1000-01-01</td><td>9999-12-31</td></tr><tr><td>time</td><td>3</td><td>-838:59:59</td><td>838:59:59</td></tr><tr><td>year</td><td>1</td><td>1901</td><td>2155</td></tr><tr><td>datetime</td><td>8</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td></tr><tr><td>timestamp</td><td>4</td><td>19700101080001</td><td>2038年的某个时刻</td></tr><tr><td>说明：</td><td></td><td></td><td></td></tr></tbody></table><ul><li>date值保存日期，time只保存时间，year只保存年</li><li>datetime保存日期 + 时间</li><li>timestamp保存日期 + 时间</li><li>timestamp支持的时间范围较小，取值范围：19700101080001 —— 2038年的某个时刻</li><li>datetime的取值范围是：1000-01-01 00:00:00 —— 9999-12-31 23:59:59</li><li><strong>timestamp和实际时区有关，更能反映实际的日期</strong>，而datetime则只能反映出插入时的当地时区</li><li>timestamp的属性受MySql版本和SQLMode的影响很大</li><li><font color="#e96900">drop table if exists tab_date;<br>create table tab_date(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t1 DATETIME,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;t2 TIMESTAMP<br>);</font></li><li><code>insert into tab_date values(now(), now());</code></li></ul></blockquote><h4 id="C、常见约束"><a href="#C、常见约束" class="headerlink" title="C、常见约束"></a>C、常见约束</h4><p>  约束是一种限制，用于限制表中的数据，为了保证表中数据的准确性和可靠性。</p><ul><li>分类：（六大约束）<ul><li><strong>NOT NULL</strong>（非空，用于保证该字段的值不能为空）</li><li><strong>DEFAULT</strong>（默认，用于保证该字段有默认值）</li><li><strong>PRIMARY KEY</strong>（主键，用于保证该字段的值具有唯一性，并且非空）</li><li><strong>UNIQUE</strong>（唯一，用于保证该字段的值具有唯一性，可以为空）</li><li><strong>CHECK</strong>（检查约束，【mysql中不支持】，用于保证该字段满足一定条件）</li><li><strong>FOREIGN KEY</strong>（外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值。在从表中添加外键约束，用于引用主表中某列的值）</li></ul></li><li>添加约束的时机：<ul><li>创建表时</li><li>修改表时</li></ul></li><li>约束的添加分类：<ul><li>列级约束：六大约束语法上都支持列级约束，但<strong>外键约束和检查约束加在列级约束上没有效果</strong></li><li>表级约束：除了非空和默认约束外，其他约束都支持，但不一定都有效果，比如check可以加，但没效果</li></ul></li><li>主键和唯一的对比：<ul><li>主键保证了唯一性，且不能为空。一个表中最多只能有一个主键。允许多个字段组合成一个主键，但是要满足唯一性要求。</li><li>唯一性约束也保证了唯一性，但是可以为空，但是只能有一个记录的值为空，多个记录为空那不就重复了吗。一个表中可以有多个唯一键。允许多个字段组合成一个唯一键，但是得满足唯一性要求。</li></ul></li><li>外键说明：<ul><li>要求在从表设置外键关系</li><li>从表的外键列的类型和主表的关联列的类型要求一直或兼容，名称无要求</li><li><strong>主表的关联列必须是一个key（一般是主键或唯一）</strong></li><li>插入数据时，先插入主表，再插入从表；删除数据时，先删除从表，再删除主表</li></ul></li></ul><p><strong>1、列级约束（创建表时）</strong><br>  直接在字段名和字段类型后面追加 约束类型即可。只支持：default、not null、primary key、unique</p><blockquote><p>案例：</p><ul><li><font color="#e96900">drop database if exists students;<br>create database students;<br>use students;<br>drop table if exists major;<br>create table major(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id INT primary key,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;majorName VARCHAR(20) not null<br>);</font></li><li><font color="#e96900">use students;<br>drop table if exists stuinfo;<br>create table stuinfo(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id INT primary key,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stuName VARCHAR(20) not null,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gender CHAR(1) check(gender&#x3D;&#39;男&#39; or gender&#x3D;&#39;女&#39;),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;seat INT unique,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;age INT default 18,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;majorId INT foreign key references major(id)<br>);</font></li><li>使用<code>show index from stuinfo;</code>可以查看该表上的索引，包括主键、外键、唯一键。主键(primary key)和唯一键(unique)会自动生成索引，主键会生成主键索引，整个表的数据是按照主键索引生成的树结构来组织的，唯一键会生成唯一索引，唯一索引不同于普通索引。这里使用<code>show index from stuinfo;</code>只能看到主键和唯一键，不能看到外键，因为外键约束加在列级约束上没有效果。</li></ul></blockquote><p><strong>2、表级约束（创建表时）</strong><br>  在各个字段声明完成后的最下面，加上表级约束即可。语法：<code>【constraint 约束名】 约束类型(字段名)</code></p><blockquote><p>案例：</p><ul><li><font color="#e96900">drop table if exists stuinfo;<br>create table stuinfo(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stuName VARCHAR(20),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gender CHAR(1),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;seat INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;age INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;majorId INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CONSTRAINT pk PRIMARY KEY(id),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CONSTRAINT uq UNIQUE(seat),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CONSTRAINT ck CHECK(gender in (&#39;男&#39;, &#39;女&#39;)),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorId) references major(id)<br>);</font></li><li>这里使用<code>show index from stuinfo;</code>可以查看该表上的索引，包括主键、外键、唯一键。主键的名称即使我们为其改名为”pk”也没有效果，主键名称就叫”PRIMARY”（MySql中的奇怪规则）。</li></ul></blockquote><p><strong>3、一般的约束写法</strong><br>  主键约束、非空约束、唯一约束、默认约束可以作为列级约束直接追加到每列申明的后面，外键约束使用表级约束的方式添加。而检查约束在mysql中只支持语法，也就是不报错，但是没有任何效果。</p><blockquote><p><font color="#e96900">create table if not exists stuinfo(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id INT primary key,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stuName VARCHAR(20) not null,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gender CHAR(1),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;seat INT unique,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;age int default 18,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;majorId INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorId) REFERENCES major(id)<br>);</font></p></blockquote><p><strong>4、修改表时添加约束</strong></p><ul><li>添加列级约束<ul><li><code>alter table 表名 modify column 字段名 字段类型 列级约束;</code></li></ul></li><li>添加表级约束<ul><li><code>alter table 表名 add [constraint 自定义约束名] 表级类型(字段名) [外键的引用];</code></li></ul></li></ul><blockquote><p>建表：</p><ul><li><font color="#e96900">drop table if exists stuinfo;<br>create table stuinfo(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stuName VARCHAR(20),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;gender CHAR(1),<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;seat INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;age INT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;majorID INT<br>);</font></li></ul><p>添加非空约束：</p><ul><li><code>ALTER TABLE stuinfo MODIFY COLUMN stuName VARCHAR(20) NOT NULL;</code> 列级约束</li></ul><p>添加默认约束：</p><ul><li><code>ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;</code> 列级约束</li></ul><p>添加主键：</p><ul><li><code>ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;</code> 列级约束</li><li><code>ALTER TABLE stuinfo ADD PRIMARY KEY(id);</code> 表级约束</li></ul><p>添加唯一约束：</p><ul><li><code>ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;</code> 列级约束</li><li><code>ALTER TABLE stuinfo ADD UNIQUE(seat);</code> 表级约束</li></ul><p>添加外键：</p><ul><li><code>ALTER TABLE stuinfo ADD FOREIGN KEY(majorId) REFERENCES major(id);</code> 表级约束</li><li><code>ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorId) REFERENCES major(id);</code> 表级约束</li></ul></blockquote><p><strong>4、修改表时删除约束</strong></p><blockquote><p>删除非空约束</p><ul><li><code>ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;</code></li></ul><p>删除默认约束</p><ul><li><code>ALTER TABLE stuinfo MODIFY COLUMN age INT;</code></li></ul><p>删除主键</p><ul><li><code>ALTER TABLE stuinfo MODIFY COLUMN id INT;</code></li><li><code>ALTER TABLE stuinfo DROP PRIMARY KEY;</code></li></ul><p>删除唯一约束</p><ul><li><code>ALTER TABLE stuinfo DROP INDEX seat;</code></li></ul><p>删除外键</p><ul><li><code>ALTER TABLE sutinfo DROP FOREIGN KEY fk_stuinfo_major;</code></li></ul></blockquote><h4 id="D、自增长列（标识列）"><a href="#D、自增长列（标识列）" class="headerlink" title="D、自增长列（标识列）"></a>D、自增长列（标识列）</h4><p>  标识列又称为自增长列，可以不用手动地插入值，系统提供默认的序列值。<br><strong>1、创建表时设置标识列</strong></p><blockquote><ul><li><font color="#e96900">drop table if exists tab_identity;<br>create table tab_identity(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id INT PRIMARY KEY AUTO_INCREMENT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name VARCHAR(20)<br>);</font></li><li><code>INSERT INTO tab_identity VALUES(NULL, &#39;Tom&#39;);</code> id字段的值自动插入1</li><li><code>INSERT INTO tab_identity VALUES(NULL, &#39;john&#39;);</code> id字段的值自动增长到2</li><li><code>INSERT INTO tab_identity(name) VALUES(&#39;jerry&#39;);</code>id字段的值自动增长到3</li><li><code>INSERT INTO tab_identity SET name=&#39;marry&#39;;</code>id字段的值自动增长到4</li><li>使用<code>delete from tab_identity;</code>后再次添加数据时，id字段的值自动从断点处开始增长</li><li>使用<code>truncate table tab_identity;</code>后再次添加数据时，id字段的值又重新从1开始自增</li></ul></blockquote><p><strong>2、自增长的系统参数设置</strong></p><blockquote><ul><li><font color="#e96900">show variables like &#39;%auto_increment%&#39;;</font></li><li><table><thead><tr><th>Variable_name</th><th>Value</th></tr></thead><tbody><tr><td>auto_increment_increment</td><td>1</td></tr><tr><td>auto_increment_offset</td><td>1</td></tr></tbody></table></li><li><strong>auto_increment_offset</strong> 表示起始值是 1</li><li><strong>auto_increment_increment</strong> 表示每次增长的步长是 1</li><li>MySql中不支持对 auto_increment_offset 的更改，即使改了也没效果<ul><li>但是你可以在插入值的时候指定一个值，之后的插入就会以你指定的值开始增长</li><li><code>insert into tab_identity values(10, &#39;jack&#39;);</code> id字段的值直接就是10了</li><li><code>insert into tab_identity values(null, &#39;rose&#39;);</code> id字段的值自动增长到11</li></ul></li><li>auto_increment_increment 在MySql中是支持更改的，并且改了确确实实有效果<ul><li><code>SET auto_increment_increment = 3;</code></li></ul></li></ul></blockquote><p><strong>3、使用特点</strong></p><ul><li>标识列不一定要和主键搭配，但是要求标识列一定是一个key（比如primary key, unique, foreign key）</li><li>一个表中最多只能有一个标识列</li><li>标识列的类型只能是数值型（比如int，float，double），一般是 int</li><li>标识列可以通过 <code>SET auto_increment_increment = 3;</code> 设置步长；也可以通过手动插入值的方式设置起始值</li><li>可以在修改表的时候设置标识列，遵循修改表的语法。<code>ALTER TABLE tab_identity MODIFY COLUMN id INT PRIMARY KEY AUTO_INCREMENT;</code></li><li>可以在修改表的时候删除标识列，遵循修改表的语法。<code>ALTER TABLE tab_identity MODIFY COLUMN id INT;</code></li></ul><hr><h3 id="六、TCL-事务控制语言"><a href="#六、TCL-事务控制语言" class="headerlink" title="六、TCL 事务控制语言"></a>六、TCL 事务控制语言</h3><p>  <strong>Transaction Control Language</strong><br>  事务：一个或一组sql语句组成一个执行单元，这个执行单元作为一个不可分割的整体，要么全部执行，要么全部不执行。如果这个执行单元中某条SQL语句执行失败或产生错误，整个单元将会回滚，所有受到影响的数据将会返回到该事务开始以前的状态；如果单元中的的所有sql语句均执行成功，则事务被顺利执行。<br>  在mysql中，数据用各种不同的技术存储在文件或内存中。通过 <code>show engines;</code> 可以查看mysql支持的存储引擎。在mysql中用的最多的存储引擎有：innodb、myisam、memory等。其中<strong>innodb支持事务，而myisam、memory等不支持事务</strong>。</p><h4 id="A、事务的ACID属性"><a href="#A、事务的ACID属性" class="headerlink" title="A、事务的ACID属性"></a>A、事务的ACID属性</h4><blockquote><p>事务的ACID属性：</p><ul><li>原子性（Atomicity）<ul><li>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li></ul></li><li>一致性（Consistency）<ul><li>事务必须使数据库从一个一致性状态变换到另一个一致性状态。</li></ul></li><li>隔离性（Isolation）<ul><li>事务的隔离性是指一个事务的执行不能被其他事务所干扰，即一个事务内部的操作及使用的数据对并发的其他事务来说是隔离的，并发执行的各个事务之间不能相互干扰。</li></ul></li><li>持久性（Durability）<ul><li>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</li></ul></li></ul></blockquote><p>  <strong>隐式的事务：</strong> 事务没有明显的开启和结束标记。比如单独的 insert、update、delete语句（DML）。使用 <code>show variables like &#39;autocommit&#39;</code> 可以看到默认的值为ON，表示开启了自动事务提交。<br>  <strong>显式的事务：</strong> 事务具有明显的开启和结束标记。前提是必须先设置自动提交功能为禁用。<code>set autocommit = 0;</code> 该方法只对当前Session有效。多条sql语句要想以事务的方式执行，就可以使用隐式的事务，先禁用掉 autocommit。</p><h4 id="B、多语句以事务的方式执行"><a href="#B、多语句以事务的方式执行" class="headerlink" title="B、多语句以事务的方式执行"></a>B、多语句以事务的方式执行</h4><blockquote><p>多语句以事务的方式执行：</p><ul><li><font color="#e96900">步骤一：开始显式的事务<br>set autocommit &#x3D; 0;<br>start transaction;<br>步骤二：编写事务中的多条sql语句（select、insert、update、delete）;<br>语句1;<br>语句2;<br>……<br>步骤三：结束事务<br>commit;提交事务<br>rollback;回滚事务</font></li><li>只是针对DQL语言和DML语言来说有事务，对于DDL语言（数据库和表结构的定义）来说，一般不谈论事务。</li></ul></blockquote><blockquote><p>演示事务的使用步骤</p><ul><li>先建个表：<ul><li><font color="#e96900">drop table if exists account;<br>  create table account(<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id INT PRIMARY KEY AUTO_INCREMENT,<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;username VARCHAR(20),<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;balance DOUBLE<br>  );</font></li></ul></li><li>插入数据进去：<ul><li><font color="#e96900">insert into account(username, balance)<br>  values(&#39;A&#39;, 1000),(&#39;B&#39;, 1000);</font></li></ul></li><li>转账事务正常提交演示：<ul><li><font color="#e96900">SET autocommit&#x3D;0;<br>  START TRANSACTION;<br>  update account set balance&#x3D;balance-500 where username&#x3D;&#39;A&#39;;<br>  update account set balance&#x3D;balance+500 where username&#x3D;&amp;#39B;&#39;;<br>  commit;</font></li></ul></li><li>转账事务回滚演示：<ul><li><font color="#e96900">SET autocommit&#x3D;0;<br>  START TRANSACTION;<br>  update account set balance&#x3D;balance-500 where username&#x3D;&#39;A&#39;;<br>  update account set balance&#x3D;balance+500 where username&#x3D;&amp;#39B;&#39;;<br>  rollback;  </font></li></ul></li></ul></blockquote><h4 id="C、并发事务控制"><a href="#C、并发事务控制" class="headerlink" title="C、并发事务控制"></a>C、并发事务控制</h4><blockquote><ul><li><strong>对于同时运行的多个事务，当这些事务访问数据库中的相同数据时，如果没有采取必要的隔离机制，就会导致各种并发问题。</strong><ul><li><strong>脏读：</strong> 对于两个事务T1，T2。事务T1读取了被T2更新但还<strong>没有被提交</strong>的字段，之后若T2回滚，那么T1读取的内容就是临时且无效的脏数据。</li><li><strong>不可重复读：</strong> 对于两个事务T1，T2。事务T1读取了一个字段，然后T2<strong>更新</strong>了该字段，之后T1再次读取同一个字段，值就不同了。</li><li><strong>幻读：</strong> 对于两个事务T1，T2。事务T1从表中读取了一个字段，然后T2在该表中<strong>插入</strong>了一些新的行，之后T1再次读取同一个表，就会多出几行。</li></ul></li><li><strong>数据库事务的隔离性：数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。</strong></li><li><font color="#e96900">一个事务与其他事务隔离的程度称为隔离级别。</font>数据库规定了很多事务的隔离级别，不同的隔离级别对应不同的干扰程度，<font color="#e96900">隔离级别越高，数据一致性就越好，但并发性越弱</font>。</li><li><strong>数据库提供的4中事务隔离级别</strong><ul><li><font color="#e96900"><strong>读未提交（READ UNCOMMITTED）：</strong></font>允许事务读取其他事务提交的变更。脏读、不可重复读和幻读的问题都会出现。</li><li><font color="#e96900"><strong>读已提交（READ COMMITTED）：</strong></font>只允许事务读取已经被其他事务提交的变更。可以避免脏读，但是不可重复读和幻读的问题仍然可能出现。</li><li><font color="#e96900"><strong>可重复读（REPEATABLE READ）：</strong></font>确保事物可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事务对这个字段进行更新。可以避免脏读和不可重复读，但是幻读的问题仍然存在。</li><li><font color="#e96900"><strong>串行化（SERIALIZABLE）：</strong></font>确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入，更新和删除操作。所有并发问题都可以避免，但是性能十分低下。</li></ul></li><li><strong>Oracle 支持的2种事务隔离级别：READ COMMITTED，SERIALIZABLE。Oracle 默认的事务隔离级别为：READ COMMITTED</strong></li><li><strong>MySql 支持以上4种事务的隔离级别。MySql默认的事务隔离级别为：REPEATABLE READ</strong></li><li>每启动一个mysql程序，就会获得一个单独的数据库连接，每个数据库连接都有一个全局变量 <font color="#e96900">@@tx_isolation</font> ，表示当前的事务隔离级别</li><li>查看当前的隔离级别：<code>SELECT @@tx_isolation;</code></li><li>设置当前mysql连接的隔离级别：<code>set session transaction isolation level read committed;</code></li><li>设置数据库系统的全局的隔离级别：<code>set global transaction isolation level read committed;</code></li></ul></blockquote><h4 id="D、回滚点（savepoint）"><a href="#D、回滚点（savepoint）" class="headerlink" title="D、回滚点（savepoint）"></a>D、回滚点（savepoint）</h4><blockquote><ul><li><font color="#e96900">savepoint 节点名;</font> #设置保存点</li><li>演示 savepoint 的使用（只能搭配 rollback 使用）<ul><li><font color="#e96900">set autocommit&#x3D;0;<br>  start transaction;<br>  delete from account where id &#x3D; 1;<br>  savepoint a;<br>  delete from account where id &#x3D; 2;<br>  rollback to a;</font></li></ul></li></ul></blockquote><h4 id="E、事务中的delete和truncate"><a href="#E、事务中的delete和truncate" class="headerlink" title="E、事务中的delete和truncate"></a>E、事务中的delete和truncate</h4><blockquote><p>事务中使用delete时，能被正常回滚，数据不会被删除掉</p><ul><li><font color="#e96900">set autocommit&#x3D;0;<br>start transaction;<br>delete from account;<br>rollback;</font></li></ul><p>事务中使用truncate时，不能回滚被删除的数据，数据会被真的删除掉</p><ul><li><font color="#e96900">set autocommit&#x3D;0;<br>start transaction;<br>truncate table account;<br>rollback;</font></li></ul><p><strong>总结：</strong></p><ul><li>事务中的delete能被正常回滚，记录只是被标记上删除，但实际上还并未被删除；而事务中的truncate没办法正常回滚，数据是真的被删除了。</li><li>再啰嗦一句：truncate删除全表数据后，再插入数据时，表中的自增长列会重新从1开始自增；而delete删除数据后，再插入数据时，表中的自增长列还是从原来的断点处继续自增。</li><li>truncate只支持删除全表记录，不支持筛选条件。delete支持按照筛选条件删除。</li></ul></blockquote><hr><h3 id="七、DCL-数据库控制语言"><a href="#七、DCL-数据库控制语言" class="headerlink" title="七、DCL 数据库控制语言"></a>七、DCL 数据库控制语言</h3><p>  <strong>Data Control Language</strong></p><h4 id="A、用户角色权限控制"><a href="#A、用户角色权限控制" class="headerlink" title="A、用户角色权限控制"></a>A、用户角色权限控制</h4><p><strong>待续。。。。。。</strong></p><hr><h3 id="八、视图"><a href="#八、视图" class="headerlink" title="八、视图"></a>八、视图</h3><p>  视图其实就是一个虚拟的表，可以和普通的表一样使用。mysql5.1版本出现的新特性，是通过现有的的表动态生成的数据，并且是在使用视图时才动态生成，<font color="#e96900"><strong>只保存了sql逻辑，不保存查询结果。</strong></font>当多个地方用到同样的查询结果或该查询结果使用的sql语句较为复杂时可以使用视图功能。</p><blockquote><p>案例：查询姓张的学生名和专业名</p><ul><li><font color="#e96900">select stuname, majorname<br>from stuinfo s<br>inner join major m on s.majorid&#x3D;m.id<br>where stuname like &#39;张%&#39;;</font></li><li><font color="#e96900">create view v1<br>as<br>select stuname, majorname<br>from stuinfo s inner join major m on s.majorid&#x3D;m.id;</font></li><li><font color="#e96900">select * from v1 where stuname like &#39;张%&#39;;</font></li></ul></blockquote><h4 id="A、视图的创建"><a href="#A、视图的创建" class="headerlink" title="A、视图的创建"></a>A、视图的创建</h4><blockquote><p>语法：</p><ul><li><font color="#e96900" size="4">create view 视图名<br>as<br>查询语句;</font></li></ul><p>案例1：查询姓名包含a字符的员工名，部门名和工种信息</p><ol><li><font color="#e96900">create view myview1<br>as<br>select last_name, department_name, job_title<br>from employees e<br>join departments d on e.department_id&#x3D;d.department_id<br>join jobs j on e.job_id &#x3D; j.job_id;</font></li><li><font color="#e96900">select * from myview1 where last_name like &quot;%a%&quot;;</font></li></ol><p>案例2：查询各部门的平均工资级别</p><ol><li>创建视图查看各部门平均工资<br><font color="#e96900">create view myv2 as<br>select AVG(salary) avg_sal, department_id<br>from employees<br>group by department_id;</font></li><li>使用视图<br><font color="#e96900">select m.avg_sal, g.grade_level<br>from myv2 m<br>join job_grades g on m.avg_sal between g.lowest_sal and g.highest_sal;</font></li></ol><p>案例3：查询平均工资最低的部门信息</p><ul><li><font color="#e96900">直接使用以上创建好的视图myv2<br>select d.*<br>from departments d<br>where d.department_id &#x3D; (<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select department_id from myv2 order by avg_sal limit 1<br>);</font></li></ul></blockquote><ul><li>视图可以重用sql语句</li><li>简化了复杂的sql操作，不必知道它的查询细节</li><li>保护数据，提高了安全性（因为不知道原表的情况）</li></ul><h4 id="B、视图的修改"><a href="#B、视图的修改" class="headerlink" title="B、视图的修改"></a>B、视图的修改</h4><blockquote><p>方式一：</p><ul><li><font color="#e96900" size="4">create or replace view 视图名<br>as<br>查询语句;</font></li><li><strong>若视图存在，则替换；若视图不存在，则创建</strong></li><li><strong><code>create or replace view myv2 as select * from employees;</code></strong></li></ul><p>方式二：</p><ul><li><font color="#e96900" size="4">alter view 视图名<br>as<br>查询语句;</font></li><li><strong><code>alter view myv2 as select * from departments;</code></strong></li></ul></blockquote><h4 id="C、视图的删除"><a href="#C、视图的删除" class="headerlink" title="C、视图的删除"></a>C、视图的删除</h4><blockquote><p>语法：</p><ul><li><font color="#e96900" size="4">drop view 视图名, 视图名, …;</font></li><li><font color="#e96900" size="4">drop view if exists 视图名, 视图名, …;</font></li><li><code>drop view if exists myview1, myv2;</code></li></ul></blockquote><h4 id="D、查看视图的结构"><a href="#D、查看视图的结构" class="headerlink" title="D、查看视图的结构"></a>D、查看视图的结构</h4><p>  类似于表的查看。</p><blockquote><p>先创建一个视图</p><ul><li><font color="#e96900">create or replace view myview as<br>select * from employees;</font></li></ul><p>查看视图的结构</p><ul><li><font color="#e96900">desc myview;</font></li><li><font color="#e96900">show create view myview;</font> 能看到创建视图时的sql语句</li></ul></blockquote><h4 id="E、视图的更新"><a href="#E、视图的更新" class="headerlink" title="E、视图的更新"></a>E、视图的更新</h4><p>  这里视图的更新并不是指的视图的逻辑修改，而是指视图的逻辑不变，而视图中数据的更新。</p><blockquote><p>1、先来创建两个视图</p><ul><li><font color="#e96900">create or replace view myview1 as<br>select last_name, email, salary*12*(1+IFNULL(commission_pct, 0)) annual_salary<br>from employees;</font></li><li><font color="#e96900">create or replace view myview2 as<br>select last_name, email<br>from employees;</font></li></ul><p>2、查看视图中的数据</p><ul><li><font color="#e96900">select * from myview1;</font></li><li><font color="#e96900">select * from myview2;</font></li></ul><p>3、<strong>插入</strong>数据到视图中</p><ul><li><font color="#e96900">insert into myview1 values(&#39;A&#39;, &#39;<a href="mailto:&#x61;&#x61;&#97;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#109;">&#x61;&#x61;&#97;&#x40;&#113;&#113;&#x2e;&#99;&#111;&#109;</a>&#39;, 1000000), (&#39;B&#39;, &#39;<a href="mailto:&#98;&#98;&#x62;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;">&#98;&#98;&#x62;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#109;</a>&#39;, 1100000);</font><br><font color="#0000ee">报错：Column ‘annual_salary’ is not updatable. 并不是所有的字段都能更新。</font></li><li><font color="#e96900">insert into myview2 values(&#39;A&#39;, &#39;<a href="mailto:&#x61;&#97;&#97;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#109;">&#x61;&#97;&#97;&#64;&#113;&#x71;&#x2e;&#99;&#111;&#109;</a>&#39;), (&#39;B&#39;, &#39;<a href="mailto:&#98;&#98;&#x62;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;">&#98;&#98;&#x62;&#x40;&#113;&#x71;&#46;&#99;&#111;&#109;</a>&#39;);</font><br><font color="#0000ee">成功插入，并且会插入到原始表中。这个时候由于原始表有了新数据，视图myview1中的数据也会变多，因为myview1是由原始表动态生成的。</font></li></ul><p>4、<strong>修改</strong>视图中的数据</p><ul><li><font color="#e96900">update myview1 set last_name&#x3D;&quot;AAAAA&quot; where last_name&#x3D;&quot;A&quot;;</font><br><font color="0000ee">成功修改，原始表中的数据也会被修改，本质上就是修改的原始表中的数据，因为视图就是一个sql逻辑而已，并不保存数据，数据都是在原始表上的。</font></li><li><font color="#e96900">update myview2 set last_name&#x3D;&quot;A&quot; where last_name&#x3D;&quot;AAAAA&quot;;</font><br><font color="0000ee">同上，成功修改。</font></li><li><font color="#e96900">update myview1 set annual_salary&#x3D;3000000 where last_name&#x3D;&quot;A&quot;;</font><br><font color="0000ee">这个会报错：Column ‘annual_salary’ is not updatable。</font></li></ul><p>5、<strong>删除</strong>视图中的数据</p><ul><li><font color="#e96900">delete from myview1 where last_name in (&quot;A&quot;, &quot;B&quot;);</font><br><font color="0000ee">同样，删除的是原始表中的数据，会同时影响myview1和myview2。</font></li></ul></blockquote><p><strong>注意：视图的可更新性与创建视图时定义的查询有关，以下类型的视图是不能更新的</strong></p><ul><li>包含以下关键字的sql语句：分组函数、distinct、group by、having、union、或者 union all</li><li>常量视图 <code>create view v as select &#39;常量1&#39;;</code></li><li>select 中包含子查询</li><li>join 关联查询</li><li>from 一个不能更新的视图</li><li>where 子句的子查询引用了from子句中的表</li></ul><h4 id="F、视图和表的对比"><a href="#F、视图和表的对比" class="headerlink" title="F、视图和表的对比"></a>F、视图和表的对比</h4><ul><li>创建视图和表所使用的关键字不一样，<code>&quot;create view&quot;</code> <code>&quot;create table&quot;</code></li><li>视图只是保存了一组sql逻辑，不保存数据；数据都在原始的表中</li><li>视图也是能增删改的，但是有些情况下不能增删改，一般也不使用其增删改的功能</li></ul><hr><h3 id="九、变量"><a href="#九、变量" class="headerlink" title="九、变量"></a>九、变量</h3><ul><li>系统变量<ul><li>全局变量（针对于mysql服务器有效）</li><li>会话变量（只针对当前会话，或一次客户端连接有效）</li></ul></li><li>自定义变量<ul><li>用户变量（类似于java的全局变量）</li><li>局部变量（类似于java的局部变量）</li></ul></li></ul><h4 id="A、系统变量（全局、会话）"><a href="#A、系统变量（全局、会话）" class="headerlink" title="A、系统变量（全局、会话）"></a>A、系统变量（全局、会话）</h4><p>  由MySql系统为我们提供的变量，不是用户定义的，属于服务器层面的。分为<strong>全局变量</strong>和<strong>会话变量</strong>。因为这些变量由系统提供，所以并不需要我们自己定义，我们只需要学会如何去<strong>查看</strong>和<strong>赋值</strong>就行。如果是操作全局变量，则需要加global关键字；如果是操作会话变量，则可以加上session关键字；如果不加这两关键字，则默认操作会话变量。<br>  对于全局变量来说，mysql服务器每次启动会为所有的全局变量赋初始值，可以修改全局变量的值，针对于所有的会话（连接）有效，但不能跨重启，也就是说每次mysql重启后，全局变量的值会被重新初始化。如果要想每次重启后都是修改后的值，那得去改配置文件了。<br>  对于会话变量来说，会话变量仅仅针对于当前会话（连接）有效。实测后发现，会话变量比全局变量多。</p><blockquote><p><strong>1、查看所有的系统变量：</strong></p><ul><li><strong><code>show global variables;</code></strong> global表示全局变量</li><li><strong><code>show session variables;</code></strong> session表示会话变量</li><li><strong><code>show variables;</code></strong> 默认表示查看会话变量</li></ul><p><strong>2、查看满足条件的系统变量（模糊查询）：</strong></p><ul><li><strong><code>show global variables like &#39;模糊查询条件&#39;;</code></strong></li><li><strong><code>show session variables like &#39;模糊查询条件&#39;;</code></strong></li><li><strong><code>show variables like &#39;模糊查询条件&#39;;</code></strong></li><li>比如：<code>show variables like &#39;%character_set%&#39;;</code></li></ul><p><strong>3、查看指定的某个系统变量的值：</strong></p><ul><li><strong><code>select @@global.系统变量名;</code></strong> global表示全局变量</li><li><strong><code>select @@session.系统变量名;</code></strong> session表示会话变量</li><li><strong><code>select @@系统变量名;</code></strong> 默认表示会话变量</li><li>比如：<code>select @@character_set_client;</code></li></ul><p><strong>4、为某个系统变量赋值：</strong></p><ul><li>方式一：<ul><li><code>set global 系统变量名 = 值;</code></li><li><code>set session 系统变量名 = 值;</code></li><li><code>set 系统变量名 = 值;</code></li><li>比如：<code>set autocommit = 0;</code></li></ul></li><li>方式二：<ul><li><code>set @@global.系统变量名 = 值;</code></li><li><code>set @@session.系统变量名 = 值;</code></li><li><code>set @@系统变量 = 值;</code></li><li>比如：<code>set @@autocommit = 0;</code></li></ul></li></ul></blockquote><h4 id="B、自定义变量（用户、局部）"><a href="#B、自定义变量（用户、局部）" class="headerlink" title="B、自定义变量（用户、局部）"></a>B、自定义变量（用户、局部）</h4><p>  用户自己定义的变量，不是由系统提供的。必须在用户声明、赋值后才能使用（查看，比较，运算等）。</p><blockquote><p><strong>1、用户变量</strong><br>  用户变量的作用域为：针对当前会话（连接）有效，等同于会话变量的作用域。可以应用在任何地方，begin end 里或则begin end外都行。</p><ul><li>① 声明并初始化（用户变量在声明时必须初始化）<ul><li>方式一： <font color="#e96900">set @用户变量名 &#x3D; 值;</font></li><li>方式二： <font color="#e96900">set @用户变量名 :&#x3D; 值;</font></li><li>方式三： <font color="#e96900">select @用户变量 :&#x3D; 值;</font></li><li>赋值的操作符为 “&#x3D;” 或 “:&#x3D;”。在使用set来声明变量时，”&#x3D;” 或 “:&#x3D;” 都可以当做赋值操作符来使用；但是在使用select来声明变量时，只能将 “:&#x3D;” 当做赋值操作符来使用。</li></ul></li><li>② 赋值（更新用户变量的值）<ul><li>方式一：通过 <strong>SET</strong> 或 <strong>SELECT</strong>。同上（既能当声明用又能当赋值用）。<ul><li><code>set @name = &#39;john&#39;;</code></li><li><code>set @name = 100;</code></li><li><code>set @count := 0;</code></li></ul></li><li>方式二：通过 <strong>SELECT INTO</strong>。<ul><li><font color="#e96900">select 字段 into @用户变量名 from 某表;</font></li><li><code>select count(*) into @count from employees;</code></li></ul></li></ul></li><li>③ 简单使用（查看用户变量的值）<ul><li><font color="#e96900">select @系统变量名;</font></li><li><code>select @count;</code></li></ul></li></ul></blockquote><blockquote><p><strong>2、局部变量</strong><br>  局部变量的作用域为：仅仅在定义它的begin end中有效。也就是说局部变量只能应用在begin end中，而且<strong>只能放在begin end中的第一句话中声明</strong>，生命周期很短。</p><ul><li>① 声明<ul><li><font color="#e96900">DECLARE 变量名 类型;</font></li><li><font color="#e96900">DECLARE 变量名 类型 DEFAULT 值;</font></li></ul></li><li>② 赋值<ul><li>方式一：通过 <strong>SET</strong> 或 <strong>SELECT</strong>。<ul><li><font color="#e96900">set 局部变量名 &#x3D; 值;</font></li><li><font color="#e96900">set 局部变量名 :&#x3D; 值;</font></li><li><font color="#e96900">select @局部变量名 :&#x3D; 值;</font></li></ul></li><li>方式二：通过 <strong>SELECT INTO</strong>。<ul><li><font color="#e96900">select 字段 into 局部变量名 from 某表;</font></li><li><code>select count(*) into aaa from employees;</code></li></ul></li></ul></li><li>③ 简单使用<ul><li><font color="#e96900">SELECT 局部变量名;</font></li></ul></li></ul></blockquote><blockquote><p><strong>3、用户变量和局部变量的对比</strong></p><ul><li>用户变量的作用域为当前会话；而局部变量的作用域为begin end中</li><li>用户变量可以使用在会话中的任何位置；而局部变量只能放在begin end的第一句话中声明</li><li>用户变量必须加 @ 符号；而局部变量一般不用加 @ 符号，当使用select赋值时需要加 @ 符号</li><li>用户变量不需要限定变量的类型；而局部变量需要在声明时限定变量的类型</li></ul></blockquote><blockquote><p><strong>4、使用案例</strong></p><ul><li>案例1：声明两个变量并赋值，求和，并打印<ul><li>方式一：使用用户变量<br>  <font color="#e96900">set @m &#x3D; 1;<br>  set @n &#x3D; 2;<br>  set @sum &#x3D; @m + @n;<br>  select @sum;</font></li><li>方式二：使用局部变量<br>  <font color="#e96900">declare m int default 1;<br>  declare n int default 2;<br>  declare sum;<br>  set sum &#x3D; m + n;<br>  select sum;</font></li></ul></li></ul></blockquote><hr><h3 id="十、存储过程和函数"><a href="#十、存储过程和函数" class="headerlink" title="十、存储过程和函数"></a>十、存储过程和函数</h3><p>  存储过程和函数，类似于java中的方法。</p><h4 id="A、存储过程"><a href="#A、存储过程" class="headerlink" title="A、存储过程"></a>A、存储过程</h4><p>  存储过程就是一组预先编译好的SQL语句的集合，批处理语句。提高了代码的重用性，简化操作，减少了编译次数并且减少了和数据库服务器的连接次数，提高效率。</p><blockquote><p><strong><font color="#0000ee">1、创建存储过程</font></strong></p><ul><li><font color="#e96900">create procedure 存储过程名(参数列表)<br>BEGIN<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;存储过程体(一组合法有效的sql语句)<br>END</font></li><li>注意事项<ul><li>参数列表包含三部分信息：参数模式、参数名、参数类型。比如 <strong><code>IN stuname VARCHAR(20)</code></strong> 。</li><li>其中参数模式有三种，分别是：<font color="#e96900">IN，OUT，INOUT</font><ul><li><strong>INT</strong> 参数模式表示该参数可以作为输入，也就是该参数需要调用方传入值。</li><li><strong>OUT</strong> 参数模式表示该参数可以作为输出，也就是该参数可以作为返回值。</li><li><strong>INOUT</strong> 参数模式表示该参数既可以作为输入，又可以作为输出，也就是该参数既需要传入值，又可以返回值。</li></ul></li><li>如果省略了参数模式，增默认的参数模式为 IN</li><li>如果存储过程仅仅只有一句话，那么 BEGIN END 可以省略</li><li>存储过程中的每条SQL语句的结尾要求必须加 <font color="#e96900">分号</font></li><li>存储过程的结尾可以使用 <font color="#e96900">delimiter</font> 关键字来重新设置<ul><li>语法： <strong><code>DELIMITER 结束标记</code></strong></li><li>比如：<code>delimiter $</code></li></ul></li></ul></li></ul><p><strong><font color="#0000ee">2、调用存储过程</font></strong></p><ul><li><font color="#e96900">CALL 存储过程名(实参列表);</font></li></ul><p><strong><font color="#0000ee">3、空参的存储过程</font></strong></p><ul><li>案例：插入到admin表中五条记录<ul><li><font color="#e96900">delimiter $<br>  create procedure myp1()<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;insert into admin(username, `password`)<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values(&#39;A&#39;, &#39;0000&#39;), (&#39;B&#39;, &#39;0000&#39;), (&#39;C&#39;, &#39;0000&#39;), (&#39;D&#39;, &#39;0000&#39;), (&#39;E&#39;, &#39;0000&#39;);<br>  end $</font></li><li>调用：<font color="#e96900">call myp1();</font></li></ul></li></ul><p><strong><font color="#0000ee">4、带 IN 参数模式的存储过程</font></strong></p><ul><li>案例1：创建存储过程，根据女神名，查询对应的男神信息<ul><li><font color="#e96900">delimiter $<br>  create procedure myp2(in beautyName varchar(20))<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select bo.*<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from boys bo<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;right join beauty b on bo.id&#x3D;b.boyfriend_id<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where b.name&#x3D;beautyName;<br>  end $</font></li><li>调用方式一：<font color="#e96900">call myp2(&#39;赵敏&#39;);</font></li><li>调用方式二：（新建一个变量作为参数传入）<ul><li><font color="#e96900">set @beautyName&#x3D;&#39;赵敏&#39;;<br>  call myp2(@beautyName);</font></li></ul></li></ul></li><li>案例2：创建存储过程，实现判断用户是否登录成功<ul><li><font color="#e96900">delimiter $<br>  create procedure myp3(in username varchar(20), in password varchar(20))<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare result int default 0; #① 声明并初始化<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select count(*) into result #② 赋值<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from admin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where admin.username&#x3D;username<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and admin.`password`&#x3D;password;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select if(result&gt;0, &#39;成功&#39;, &#39;失败&#39;); #③ 使用<br>  end $</font></li><li>调用：<font color="#e96900">call myp3(&#39;A&#39;, &#39;0000&#39;);</font> 返回”成功”</li><li>调用：<font color="#e96900">call myp3(&#39;A&#39;, &#39;1111&#39;);</font> 返回”失败”</li></ul></li></ul><p><strong><font color="#0000ee">5、带 OUT 参数模式的存储过程</font></strong></p><ul><li>案例1：根据女神名，返回对应的男神名<ul><li><font color="#e96900">delimiter $<br>  create procedure myp4(in beautyName varchar(20), out boyName varchar(20))<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select bo.boyName into boyName<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from boys bo<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inner join beauty b on bo.id&#x3D;b.boyfriend_id<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where b.name&#x3D;beautyName;<br>  end $</font></li><li>调用：<ul><li><font color="#e96900">call myp4(&#39;赵敏&#39;, @bName);</font></li><li><font color="#e96900">select @bName;</font></li></ul></li></ul></li><li>案例2：根据女神名，返回对应的男神名和男神魅力值<ul><li><font color="#e96900">delimiter $<br>  create procedure myp5(in beautyName varchar(20), out boyName varchar(20), out userCp int)<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select bo.boyName,bo.userCp into boyName, userCp<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from boys bo<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inner join beauty b on bo.id&#x3D;b.boyfriend_id<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where b.name&#x3D;beautyName;<br>  end $</font></li><li>调用<ul><li><font color="#e96900">call myp5(&#39;赵敏&#39;, @bName, @userPc);</font></li><li><font color="#e96900">select @bName, @userPc;</font></li></ul></li></ul></li></ul><p><strong><font color="#0000ee">6、带 INOUT 参数模式的存储过程</font></strong></p><ul><li>案例：传入a和b两个值，最终a和b都翻倍并返回<ul><li><font color="#e96900">delimiter $<br>  create procedure myp6(inout a int, inout b int)<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set a &#x3D; 2 * a;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set b &#x3D; 2 * b;<br>  end $</font></li><li>调用：<ul><li><font color="#e96900">set | [select] @a:&#x3D;2, @b:&#x3D;3;</font> #首先需要定义出变量</li><li><font color="#e96900">call myp6(@a, @b);</font></li><li><font color="#e96900">select @a, @b;</font></li></ul></li></ul></li></ul><p><strong><font color="#0000ee">7、存储过程的删除</font></strong></p><ul><li><font color="#e96900">drop procedure 存储过程名;</font></li><li><font color="#e96900">drop procedure if exists 存储过程名;</font></li></ul><p><strong><font color="#0000ee">8、存储过程的查看</font></strong></p><ul><li><font color="#e96900">desc 存储过程名;</font> <strong>错误语法，desc只能用来查看表或视图的结构</strong></li><li><font color="#e96900">show create procedure 存储过程名;</font> 正确语法<ul><li><code>show create procedure myp6;</code></li></ul></li><li>查看所有的存储过程：<font color="#e96900"><strong>show procedure status;</strong></font></li><li>存储过程不能修改，要想修改，只能删掉重建。</li></ul></blockquote><h4 id="B、函数"><a href="#B、函数" class="headerlink" title="B、函数"></a>B、函数</h4><p>  函数与存储过程非常的相似，存储过程可以有0个或多个返回值，函数有且只能有1个返回值。存储过程适合做批量插入，批量更新的操作；函数适合用来处理数据后返回一个结果。</p><blockquote><p><strong><font color="#0000ee">1、函数的创建</font></strong></p><ul><li><font color="#e96900" size="4">create function 函数名(参数列表) returns 返回类型<br>begin<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;函数体<br>end</font></li><li>注意事项<ul><li>参数列表包含两部分：参数名和参数类型。</li><li>函数体中肯定会有 return 语句，如果没有就会报错。如果return语句没有放在函数体的最后也不会报错，但是不建议这样用。</li><li>当函数体中只用一句话时，则可以省略begin end</li><li>存储过程中的每条SQL语句的结尾要求必须加 <font color="#e96900">分号</font></li><li>存储过程的结尾可以使用 <font color="#e96900">delimiter</font> 关键字来重新设置<ul><li>语法： <strong><code>DELIMITER 结束标记</code></strong></li><li>比如：<code>delimiter $</code></li></ul></li></ul></li></ul><p><strong><font color="#0000ee">2、函数的调用</font></strong></p><ul><li><font color="#e96900" size="4">select 函数名(实参列表);</font></li><li>执行函数中的所有语句，并且查询出返回值，函数一定要有返回值<blockquote><p><strong>案例1（无参有返回）：返回公司的员工个数</strong></p><ul><li><font color="#e96900">delimiter $<br>create function myf1() returns int<br>begin<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare result int default 0; #定义局部变量<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select count(*) into result from employees;<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return result;<br>end $</font></li><li>可能会报错 <code>This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)</code>。需要设置一下全局变量的值：<code>set @@global.log_bin_trust_function_creators=1;</code></li><li>调用：<font color="#e96900">select myf1();</font></li></ul><p><strong>案例2（带参有返回值）：根据员工名，返回他的工资</strong></p><ul><li><font color="#e96900">delimiter $<br>create function myf2(empName varchar(20)) returns double<br>begin<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set @sal&#x3D;0.0; #也可以定义用户变量<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select salary into @sal<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees;<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where last_name&#x3D;empName;<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return @sal;<br>end $</font></li><li>调用：<font color="#e96900">select myf2(&#39;Kochhar&#39;);</font></li><li>注意：当查询结果多于一条时会报错 <code>Result consisted of more than one row</code></li></ul><p><strong>案例3（带参有返回值）：根据部门名，返回该部门的平均工资</strong></p><ul><li><font color="#e96900">delimiter $<br>create function myf3(deptName varchar(20)) returns double<br>begin<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare sal double; #定义局部变量<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;select avg(salary) into sal<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;from employees e<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;join departments d on e.department_id&#x3D;d.department_id<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;where d.department_name&#x3D;deptName;<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return sal;<br>end $</font></li><li>调用：<font color="#e96900">select myf3(&#39;IT&#39;);</font></li></ul></blockquote></li></ul><p><strong><font color="#0000ee">3、函数的删除</font></strong></p><ul><li><font color="#e96900">drop function 函数名;</font></li><li><font color="#e96900">drop function if exists 函数名;</font></li></ul><p><strong><font color="#0000ee">4、函数的查看</font></strong></p><ul><li><font color="#e96900">desc 函数名;</font> <strong>错误语法，desc只能用来查看表或视图的结构</strong></li><li><font color="#e96900">show create function 函数名;</font> 正确语法<ul><li><code>show create function myf1;</code></li></ul></li><li>查看所有的函数：<font color="#e96900"><strong>show function status;</strong></font></li><li>同样函数也不能修改，要想修改，只能删掉重建。</li></ul></blockquote><hr><h3 id="十一、流程控制结构"><a href="#十一、流程控制结构" class="headerlink" title="十一、流程控制结构"></a>十一、流程控制结构</h3><p>  顺序结构是指程序从上往下依次执行。分支结构是指程序从两条或多条执行路径中选择一条去执行。循环结构是指程序在满足一定条件的基础上，重复执行一段代码。</p><h4 id="A、分支结构"><a href="#A、分支结构" class="headerlink" title="A、分支结构"></a>A、分支结构</h4><blockquote><p><strong><font color="#0000ee">1、if函数（实现简单的双分支）</font></strong></p><ul><li><p><code>IF(表达式1, 表达式2, 表达式3);</code> 如果表达式1成立，则if函数返回表达式2的值，否则返回表达式3的值。这个函数可以放在任何地方使用，比如 select 语句中，begin end 中也可以使用。<br><strong><font color="0000ee">2、case结构（可实现多分支）</font></strong></p></li><li><p><strong>情况一：类似于java中的switch语句，一般用于实现等值判断</strong></p><table><thead><tr><th>java中</th><th>mysql中</th></tr></thead><tbody><tr><td><font color="#e96900">switch (变量或表达式) {<br>  case 常量1: 语句1; break;<br>  …<br>  defualt: 语句n; break;<br>}</font></td><td><font color="#e96900">case 要判断的字段、变量或表达式 <br>when 常量1 then 返回的值1或 语句1;<br>when 常量2 then 返回的值2或 语句2;<br>…<br>else 返回的值n或 语句n;<br>end case;</font></td></tr></tbody></table></li><li><p><strong>情况二：类似于java中的多重if语句，一般用于实现区间判断</strong></p><table><thead><tr><th>java中</th><th>mysql中</th></tr></thead><tbody><tr><td><font color="#e96900">if (条件1) { 语句1; }<br>else if (条件2) { 语句2; }<br>…<br>else { 语句n; }</font></td><td><font color="#e96900">case<br>when 条件1 then 返回的值1或 语句1;<br>when 条件2 then 返回的值2或 语句2;<br>…<br>else 返回的值n或 语句n;<br>end case;</font></td></tr></tbody></table></li><li><p>特点：</p><ul><li>可以作为表达式嵌套在其他语句中使用，这时可以用在任何地方，begin end 中或 begin end外面。也可以作为独立的语句去使用，但只能放在begin end中使用。</li><li>如果 WHEN 中的值满足或条件成立，则执行对应的 THEN 后面的语句，并且结束 CASE；如果都不满足，则执行 ELSE 中的语句或值。</li><li>ELSE 可以省略，如果 ELSE 省略了，并且所有的 WHEN 条件都不满足，则返回 null。</li></ul></li><li><p>案例；创建存储过程，根据传入的成绩，来显示等级。（90——100 显示A，80——90 显示B，60——80 显示C，否则显示D）</p><ul><li><font color="#e96900">delimiter $<br>  create procedure test_case(in score int)<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;when score &gt;&#x3D; 90 then select &#39;A&#39;;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;when score &gt;&#x3D; 80 then select &#39;B&#39;;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;when score &gt;&#x3D; 60 then select &#39;C&#39;;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else select &#39;D&#39;;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;end case;<br>  end $</font></li><li>调用：<font color="#e96900">call test_case(85);</font></li></ul></li></ul><p><strong><font color="#0000ee">3、if结构（实现多重分支）</font></strong></p><ul><li><font color="#e96900" size="4">if 条件1 then 语句1;<br>elseif 条件2 then 语句2;<br>……<br>[else 语句n;]<br>end if;</font></li><li>只能应用在begin end中，比如存储过程、函数</li><li>案例：根据传入的成绩，来返回等级。（90——100 返回，80——90 返回，60——80 返回，否则返回D）<ul><li><font color="#e96900">delimiter $<br>  create function test_if(score int) returns char<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if score &gt;&#x3D; 90 then return &#39;A&#39;;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elseif score &gt;&#x3D; 80 then return &#39;B&#39;;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;elseif score &gt;&#x3D; 60 then return &#39;C&#39;;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else return &#39;D&#39;;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;end if;<br>  end $</font></li><li>调用：<font color="#e96900">select test_if(85);</font></li></ul></li></ul></blockquote><h4 id="B、循环结构"><a href="#B、循环结构" class="headerlink" title="B、循环结构"></a>B、循环结构</h4><blockquote><ul><li><strong><font color="#0000ee">1、分类：</font></strong><ul><li><font color="#e96900">while</font></li><li><font color="#e96900">loop</font></li><li><font color="#e96900">repeat</font></li></ul></li><li><strong><font color="#0000ee">2、循环控制：</font></strong><ul><li><font color="#e96900">iterate</font>：类似于continue，结束本次循环，继续下一次</li><li><font color="#e96900">leave</font>：类似于brek，跳出，结束当前所在循环</li></ul></li><li><strong><font color="#0000ee">3、while 循环的语法：（类似于java中的while）</font></strong><ul><li><font color="#e96900" size="4">[标签:] while 循环条件 do<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;循环体;<br>  end while [标签];</font></li></ul></li><li><strong><font color="#0000ee">4、loop 循环的语法：（没有条件的死循环）</font></strong><ul><li><font color="#e96900">[标签:] loop<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;循环体<br>  end loop [标签];</font></li><li>可以用来模拟简单的死循环，搭配循环控制语句使用</li></ul></li><li><strong><font color="#0000ee">5、repeat 循环的语法：（类似java中的do while）</font></strong><ul><li><font color="#e96900">[标签:] repeat<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;循环体;<br>  util 结束循环的条件<br>  end repeat [标签];</font></li></ul></li><li><strong><font color="#0000ee">6、案例演示：</font></strong><ul><li><strong>案例1（无循环控制语句）：批量插入，根据次数插入到admin表中多条记录</strong><ul><li><font color="#e96900">delimiter $<br>  create procedure test_while1(in insertCount int)<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare i int default 1;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while i&lt;&#x3D;insertCount do<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;insert into admin(username, `password`)<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;values(concat(&#39;Rose_&#39;, i), &#39;666&#39;);<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set i &#x3D; i+1;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;end while;<br>  end $</font></li><li>调用：<font color="#e96900">call test_while1(100);</font></li></ul></li><li><strong>案例2（带循环控制语句 leave）：批量插入，固定插入20条记录到admin表中</strong><ul><li><font color="#e96900">delimiter $<br>  create procedure test_while2()<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare i int default 1;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;label_a: while true do<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;insert into admin(username, `password`) values(concat(&#39;xiaohua_&#39;, i), &#39;000&#39;);<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if i&gt;&#x3D;20 then leave label_a; # 加了一条循环控制语句，必须带上标签<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;end if;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set i &#x3D; i+1;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;end while label_a;<br>  end $</font></li><li>调用：<font color="#e96900">call test_while2();</font></li></ul></li><li><strong>案例3（带循环控制语句 iterate）：批量插入，传入次数，只插入偶数次记录到admin表中</strong><ul><li><font color="#e96900">delimiter $<br>  create procedure test_while3(in insertCount int)<br>  begin<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare i int default 1;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;label_b: while i&lt;&#x3D;insertCount do<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if i%2&#x3D;1 then<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set i &#x3D; i+1;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;iterate label_b; # 加了一条循环控制语句，必须带上标签<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;insert into admin(username, `password`) values(concat(&#39;yczlab_&#39;, i), &#39;000&#39;);<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set i &#x3D; i+1;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;end if;<br>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;end while label_b;<br>  end $</font></li><li>调用：<font color="#e96900">call test_while3(100);</font></li></ul></li></ul></li></ul></blockquote><h4 id="C、经典案例"><a href="#C、经典案例" class="headerlink" title="C、经典案例"></a>C、经典案例</h4><blockquote><p>案例1：已知表 stringcontent(id int 自增长, content varchar(20))，向该表插入指定个数的随机字符串</p><ul><li><font color="#e96900">drop table if exists stringcontent;<br>create table stringcontent(<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;id int PRIMARY KEY AUTO_INCREMENT,<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;content varchar(20)<br>);</font></li><li><font color="#e96900">delimiter $<br>create procedure test_randstr_insert(in insertCount int)<br>begin<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare str varchar(26) default &#39;abcdefghijklmnopqrstuvwxyz&#39;;<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare startIndex int default 1;<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;declare len int default 1;<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while insertCount&gt;&#x3D;1 do<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set startIndex &#x3D; floor(rand()*26 + 1); #随机产生[1,26]的整数<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set len &#x3D; floor(rand()*(26-startIndex+1)+1); #随机产生[1, 26-startIndex+1]的整数<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set len &#x3D; if(len&gt;20, 20, len); #保证长度最多为20<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;insert into stringcontent(content) values(substr(str, startIndex, len));<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;set insertCount &#x3D; insertCount-1;<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;end while;<br>end $</font></li><li><font color="#e96900">call test_randstr_insert(100);</font></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常用命令</title>
      <link href="/posts/ed3b1c3a.html"/>
      <url>/posts/ed3b1c3a.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Remote Dictionary Server（Redis）通常被称为结构服务器，因为值（value）可以是字符串（String）、哈希（Hash）、列表（List）、集合（Set）和有序集合（Sorted Set）等类型。</p></blockquote><h3 id="一、Redis命令"><a href="#一、Redis命令" class="headerlink" title="一、Redis命令"></a>一、Redis命令</h3><p>1、本机登录Redis客户端</p><pre class="language-none"><code class="language-none">redis-cli</code></pre><p>2、连接远程Redis服务</p><pre class="language-none"><code class="language-none">redis-cli -h host -p port -a password</code></pre><hr><h3 id="二、Redis键-key"><a href="#二、Redis键-key" class="headerlink" title="二、Redis键(key)"></a>二、Redis键(key)</h3><p>Redis 键命令用于管理 redis 的键。基本语法为<code>command key_name</code><br><strong>1、KEYS pattern</strong></p><blockquote><p>查找所有符合指定模式（pattern）的key。符合给定模式的 key 列表 (Array)</p></blockquote><p><strong>2、TYPE key</strong></p><blockquote><p>返回key所储存的值的类型。</p></blockquote><p><strong>3、DEL key</strong></p><blockquote><p>该命令用于在 key 存在时删除 key。不存在的 key 会被忽略。</p></blockquote><p><strong>4、DUMP key</strong></p><blockquote><p>序列化给定的 key，并返回序列化的值。</p></blockquote><p><strong>5、EXISTS key</strong></p><blockquote><p>检查给定的 key 是否存在</p></blockquote><p><strong>6、MOVE key db</strong></p><blockquote><p>将当前数据库中的key移动到指定的数据库db中。移动成功返回 1 ，失败则返回 0 。</p></blockquote><p><strong>7、RENAME key newkey</strong></p><blockquote><p>修改key的名称为newkey。改名成功时提示 OK ，失败时候返回一个错误。当 OLD_KEY_NAME 和 NEW_KEY_NAME 相同，或者 OLD_KEY_NAME 不存在时，返回一个错误。 当 NEW_KEY_NAME 已经存在时， RENAME 命令将覆盖旧值。</p></blockquote><p><strong>8、RENAMENX key newkey</strong></p><blockquote><p>仅当newkey不存在时将key改名为newkey。修改成功时，返回 1 。 如果 NEW_KEY_NAME 已经存在，返回 0 。</p></blockquote><p><strong>9、EXPIRE key seconds</strong></p><blockquote><p>为给定的 key 设置过期时间，单位为秒。设置成功返回1，当key不存在或者不能为key设置过期时间时返回0。比如在低版本中尝试设置过期时间。</p></blockquote><p><strong>10、EXPIREAT key timestamp</strong></p><blockquote><p>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</p></blockquote><p><strong>11、PEXPIRE key milliseconds</strong></p><blockquote><p>为给定的 key 设置过期时间，单位为秒。设置成功，返回 1。key 不存在或设置失败，返回 0</p></blockquote><p><strong>12、PEXPIREAT key milliseconds-timestamp</strong></p><blockquote><p>设置 key 过期时间的时间戳(unix timestamp) 以毫秒计。</p></blockquote><p><strong>13、PERSIST key</strong></p><blockquote><p>移除key的过期时间，key将持久保持。当过期时间移除成功时，返回 1 。 如果 key 不存在或 key 没有设置过期时间，返回 0 。</p></blockquote><p><strong>14、PTTL key</strong></p><blockquote><p>以毫秒为单位返回key的剩余过期时间。当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以毫秒为单位，返回 key 的剩余生存时间。但是具体根据版本情况而定。</p></blockquote><p><strong>15、TTL key</strong></p><blockquote><p>以秒为单位返回key的剩余过期时间。当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以秒为单位，返回 key 的剩余生存时间。但是具体根据版本情况而定。</p></blockquote><p><strong>16、RANDOMKEY</strong></p><blockquote><p>从当前数据库中随机返回一个key。当数据库不为空时，返回一个 key 。 当数据库为空时，返回 nil （windows 系统返回 null）。</p></blockquote><p><strong>17、SCAN cursor [MATCH pattern] [COUNT count]</strong></p><blockquote><p><code>cursor</code>表示游标，<code>pattern</code>表示匹配的模式，<code>count</code>指定从数据集里返回多少元素，默认值为10。SCAN 命令是一个基于游标的迭代器，每次被调用之后， 都会向用户返回一个新的游标， 用户在下次迭代时需要使用这个新游标作为 SCAN 命令的游标参数， 以此来延续之前的迭代过程。SCAN 返回一个包含两个元素的数组， 第一个元素是用于进行下一次迭代的新游标， 而第二个元素则是一个数组， 这个数组中包含了所有被迭代的元素。如果新游标返回 0 表示迭代已结束。<code>SSCAN</code>命令用于迭代集合键中的元素；<code>HSCAN</code>命令用于迭代哈希键中的键值对；<code>ZSCAN</code>命令用于迭代有序集合中的元素（包括元素成员和元素分值）</p></blockquote><hr><h3 id="三、Redis字符串-String"><a href="#三、Redis字符串-String" class="headerlink" title="三、Redis字符串(String)"></a>三、Redis字符串(String)</h3><p><strong>1、SET key value</strong></p><blockquote><p>设置指定key的值。如果 key 已经存储其他值， SET 就覆写旧值，且无视类型。</p></blockquote><p><strong>2、GET key</strong></p><blockquote><p>获取指定key的值。如果 key 不存在，返回 nil 。如果key 储存的值不是字符串类型，返回一个错误。</p></blockquote><p><strong>3、GETRANGE key start end</strong></p><blockquote><p>返回 key 中字符串值的子字符</p></blockquote><p><strong>4、GETSET key value</strong></p><blockquote><p>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</p></blockquote><p><strong>5、GETBIT key offset</strong></p><blockquote><p>对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</p></blockquote><p><strong>6、MGET key1 [key2]…</strong></p><blockquote><p>获取所有(一个或多个)给定 key 的值。</p></blockquote><p><strong>7、SETBIT key offset value</strong></p><blockquote><p>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</p></blockquote><p><strong>8、SETEX key seconds value</strong></p><blockquote><p>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</p></blockquote><p><strong>9、SETNX key value</strong></p><blockquote><p>只有在 key 不存在时设置 key 的值。</p></blockquote><p><strong>10、SETRANGE key offset value</strong></p><blockquote><p>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</p></blockquote><p><strong>11、STRLEN key</strong></p><blockquote><p>返回 key 所储存的字符串值的长度。</p></blockquote><p><strong>12、MSET key value [key value]…</strong></p><blockquote><p>同时设置一个或多个 key-value 对。</p></blockquote><p><strong>13、MSETNX key value [key value]…</strong></p><blockquote><p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p></blockquote><p><strong>14、PSETEX key milliseconds value</strong></p><blockquote><p>这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</p></blockquote><p><strong>15、INCR key</strong></p><blockquote><p>将 key 中储存的数字值增一。</p></blockquote><p><strong>16、INCRBY key increment</strong></p><blockquote><p>将 key 所储存的值加上给定的增量值（increment） 。</p></blockquote><p><strong>17、INCRBYFLOAT key increment</strong></p><blockquote><p>将 key 所储存的值加上给定的浮点增量值（increment） 。</p></blockquote><p><strong>18、DECR key</strong></p><blockquote><p>将 key 中储存的数字值减一。</p></blockquote><p><strong>19、DECRBY key decrement</strong></p><blockquote><p>key 所储存的值减去给定的减量值（decrement） 。</p></blockquote><p><strong>20、APPEND key value</strong></p><blockquote><p>如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</p></blockquote><hr><h3 id="四、Redis哈希-Hash"><a href="#四、Redis哈希-Hash" class="headerlink" title="四、Redis哈希(Hash)"></a>四、Redis哈希(Hash)</h3><p><strong>1、HLEN key</strong></p><blockquote><p>获取哈希表中字段的数量</p></blockquote><p><strong>2、HSET key field value</strong></p><blockquote><p>将哈希表 key 中的字段 field 的值设为 value 。</p></blockquote><p><strong>3、HSETNX key field value</strong></p><blockquote><p>只有在字段 field 不存在时，设置哈希表字段的值。</p></blockquote><p><strong>4、HMSET key field1 value1 [field2 value2]…</strong></p><blockquote><p>同时将多个 field-value (域-值)对设置到哈希表 key 中。</p></blockquote><p><strong>5、HGET key field</strong></p><blockquote><p>获取存储在哈希表中指定字段的值</p></blockquote><p><strong>6、HMGET key field1 [field2]</strong></p><blockquote><p>获取所有给定字段的值</p></blockquote><p><strong>7、HEXISTS key field</strong></p><blockquote><p>查看哈希表 key 中，指定的字段是否存在。</p></blockquote><p><strong>8、HDEL key field1 [field2]</strong></p><blockquote><p>删除一个或多个哈希表字段</p></blockquote><p><strong>9、HGETALL key</strong></p><blockquote><p>获取在哈希表中指定 key 的所有字段和值</p></blockquote><p><strong>10、HKEYS key</strong></p><blockquote><p>获取所有哈希表中的字段</p></blockquote><p><strong>11、HVALS key</strong></p><blockquote><p>获取哈希表中所有值。</p></blockquote><p><strong>12、HINCRBY key field increment</strong></p><blockquote><p>为哈希表 key 中的指定字段的整数值加上增量 increment 。</p></blockquote><p><strong>13、HINCRBYFLOAT key field increment</strong></p><blockquote><p>为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</p></blockquote><p><strong>14、HSCAN key cursor [Match pattern] [COUNT count]</strong></p><blockquote><p>迭代哈希表中的键值对。</p></blockquote><hr><h3 id="五、Redis列表-List"><a href="#五、Redis列表-List" class="headerlink" title="五、Redis列表(List)"></a>五、Redis列表(List)</h3><p><strong>1、LLEN key</strong></p><blockquote><p>获取列表长度</p></blockquote><p><strong>2、LPUSH key value1 [value2]…</strong></p><blockquote><p>将一个或多个值插入到列表头部</p></blockquote><p><strong>3、LPUSHX key value</strong></p><blockquote><p>将一个值插入到已存在的列表头部</p></blockquote><p><strong>4、RPUSH key value1 [value2]…</strong></p><blockquote><p>在列表中添加一个或多个值</p></blockquote><p><strong>5、RPUSHX key value</strong></p><blockquote><p>为已存在的列表添加值</p></blockquote><p><strong>6、LPOP key</strong></p><blockquote><p>移出并获取列表的第一个元素</p></blockquote><p><strong>7、RPOP key</strong></p><blockquote><p>移除列表的最后一个元素，返回值为移除的元素。</p></blockquote><p><strong>8、RPOPLPUSH source destination</strong></p><blockquote><p>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</p></blockquote><p><strong>9、LINDEX key index</strong></p><blockquote><p>通过索引获取列表中的元素</p></blockquote><p><strong>10、LSET key index value</strong></p><blockquote><p>通过索引设置列表元素的值</p></blockquote><p><strong>11、LRANGR key start stop</strong></p><blockquote><p>获取列表指定范围内的元素</p></blockquote><p><strong>12、LINSERT key BEFORE|AFTER pivot value</strong></p><blockquote><p>在列表的元素前或者后插入元素</p></blockquote><p><strong>13、BLPOP key1 [key2] timeout</strong></p><blockquote><p>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p></blockquote><p><strong>14、BRPOP key1 [key2] timeout</strong></p><blockquote><p>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p></blockquote><p><strong>15、BRPOPLPUSH source destination timeout</strong></p><blockquote><p>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p></blockquote><p><strong>16、LREM key count value</strong></p><blockquote><p>移除列表元素</p></blockquote><p><strong>17、LTRIM key start stop</strong></p><blockquote><p>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p></blockquote><hr><h3 id="六、Redis集合-Set"><a href="#六、Redis集合-Set" class="headerlink" title="六、Redis集合(Set)"></a>六、Redis集合(Set)</h3><p><strong>1、SADD key member1 [member2]…</strong></p><blockquote><p>向集合添加一个或多个成员</p></blockquote><p><strong>2、SCARD key</strong></p><blockquote><p>获取集合的成员数</p></blockquote><p><strong>3、SMEMBERS key</strong></p><blockquote><p>返回集合中的所有成员</p></blockquote><p><strong>4、SPOP key</strong></p><blockquote><p>移除并返回集合中的一个随机元素</p></blockquote><p><strong>5、SRANDMEMBER key [count]</strong></p><blockquote><p>返回集合中一个或多个随机数</p></blockquote><p><strong>6、SISMEMBER key member</strong></p><blockquote><p>判断 member 元素是否是集合 key 的成员</p></blockquote><p><strong>7、SREM key member1 [member2]</strong></p><blockquote><p>移除集合中一个或多个成员</p></blockquote><p><strong>8、SMOVE source destination member</strong></p><blockquote><p>将 member 元素从 source 集合移动到 destination 集合</p></blockquote><p><strong>9、SINTER key1 [key2]</strong></p><blockquote><p>返回给定所有集合的交集</p></blockquote><p><strong>10、SINTERSTORE destination key1 [key2]</strong></p><blockquote><p>返回给定所有集合的交集并存储在 destination 中</p></blockquote><p><strong>11、SUNION key1 [key2]</strong></p><blockquote><p>返回所有给定集合的并集</p></blockquote><p><strong>12、SUNIONSTORE destination key1 [key2]</strong></p><blockquote><p>所有给定集合的并集存储在 destination 集合中</p></blockquote><p><strong>13、SDIFF key1 [key2]</strong></p><blockquote><p>返回第一个集合与其他集合之间的差异。</p></blockquote><p><strong>14、SDIFFSTORE destination key1 [key2]</strong></p><blockquote><p>返回给定所有集合的差集并存储在 destination 中</p></blockquote><p><strong>15、SSCAN key cursor [MATCH pattern] [COUNT count]</strong></p><blockquote><p>迭代集合中的元素</p></blockquote><hr><h3 id="七、Redis有序集合-Sorted-set"><a href="#七、Redis有序集合-Sorted-set" class="headerlink" title="七、Redis有序集合(Sorted set)"></a>七、Redis有序集合(Sorted set)</h3><p><strong>1、ZADD key score1 member1 [score2 member2]</strong></p><blockquote><p>向有序集合添加一个或多个成员，或者更新已存在成员的分数</p></blockquote><p><strong>2、ZCARD key</strong></p><blockquote><p>获取有序集合的成员数</p></blockquote><p><strong>3、ZSCORE key member</strong></p><blockquote><p>返回有序集中，成员的分数值</p></blockquote><p><strong>4、ZCOUNT key min max</strong></p><blockquote><p>计算在有序集合中指定区间分数的成员数</p></blockquote><p><strong>5、ZLEXCOUNT key min max</strong></p><blockquote><p>在有序集合中计算指定字典区间内成员数量</p></blockquote><p><strong>6、ZINCRBY key increment member</strong></p><blockquote><p>有序集合中对指定成员的分数加上增量 increment</p></blockquote><p><strong>7、ZRANK key member</strong></p><blockquote><p>返回有序集合中指定成员的索引</p></blockquote><p><strong>8、ZREVRANK key member</strong></p><blockquote><p>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</p></blockquote><p><strong>9、ZRANGE key start stop [WITHSCORES]</strong></p><blockquote><p>通过索引区间返回有序集合指定区间内的成员</p></blockquote><p><strong>10、ZREVRANGE key start stop [WITHSCORES]</strong></p><blockquote><p>返回有序集中指定区间内的成员，通过索引，分数从高到低</p></blockquote><p><strong>11、ZRANGEBYLEX key min max [LIMIT offset count]</strong></p><blockquote><p>通过字典区间返回有序集合的成员</p></blockquote><p><strong>12、ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</strong></p><blockquote><p>通过分数返回有序集合指定区间内的成员</p></blockquote><p><strong>13、ZREVRANGEBYSCORE key max min [WITHSCORES]</strong></p><blockquote><p>返回有序集中指定分数区间内的成员，分数从高到低排序</p></blockquote><p><strong>14、ZREM key member [member …]</strong></p><blockquote><p>移除有序集合中的一个或多个成员</p></blockquote><p><strong>15、ZREMRANGEBYLEX key min max</strong></p><blockquote><p>移除有序集合中给定的字典区间的所有成员</p></blockquote><p><strong>16、ZREMRANGEBYRANK key start stop</strong></p><blockquote><p>移除有序集合中给定的排名区间的所有成员</p></blockquote><p><strong>17、ZREMRANGEBYSCORE key min max</strong></p><blockquote><p>移除有序集合中给定的分数区间的所有成员</p></blockquote><p><strong>18、ZINTERSTORE destination numkeys key [key …]</strong></p><blockquote><p>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中</p></blockquote><p><strong>19、ZUNIONSTORE destination numkeys key [key …]</strong></p><blockquote><p>计算给定的一个或多个有序集的并集，并存储在新的 key 中</p></blockquote><p><strong>20、ZSCAN key cursor [MATCH pattern] [COUNT count]</strong></p><blockquote><p>迭代有序集合中的元素（包括元素成员和元素分值）</p></blockquote><hr><h3 id="八、Redis-HyperLogLog"><a href="#八、Redis-HyperLogLog" class="headerlink" title="八、Redis HyperLogLog"></a>八、Redis HyperLogLog</h3><p>  Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>1、PFADD key element [element…]</p><blockquote><p>添加指定元素到 HyperLogLog 中。</p></blockquote><p>2、PFCOUNT key [key…]</p><blockquote><p>返回给定 HyperLogLog 的基数估算值。</p></blockquote><p>3、PFMERGE destkey sourcekey [sourcekey…]</p><blockquote><p>将多个 HyperLogLog 合并为一个 HyperLogLog</p></blockquote><hr><h3 id="九、Redis发布订阅"><a href="#九、Redis发布订阅" class="headerlink" title="九、Redis发布订阅"></a>九、Redis发布订阅</h3><p>  Redis 发布订阅 (pub&#x2F;sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。Redis 客户端可以订阅任意数量的频道。</p><p>1、PSUBSCRIBE pattern [pattern …]</p><blockquote><p>订阅一个或多个符合给定模式的频道。</p></blockquote><p>2、PUBSUB subcommand [argument [argument …]]</p><blockquote><p>查看订阅与发布系统状态。</p></blockquote><p>3、PUBLISH channel message</p><blockquote><p>将信息发送到指定的频道。</p></blockquote><p>4、PUNSUBSCRIBE [pattern [pattern …]]</p><blockquote><p>退订所有给定模式的频道。</p></blockquote><p>5、SUBSCRIBE channel [channel …]</p><blockquote><p>订阅给定的一个或多个频道的信息。</p></blockquote><p>6、UNSUBSCRIBE [channel [channel …]]</p><blockquote><p>指退订给定的频道。</p></blockquote><hr><h3 id="十、Redis事务"><a href="#十、Redis事务" class="headerlink" title="十、Redis事务"></a>十、Redis事务</h3><p>  Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p><blockquote><ul><li>批量操作在发送 EXEC 命令前被放入队列缓存。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。</li></ul></blockquote><p>  一个事务从开始到执行会经历以下三个阶段：</p><blockquote><ul><li>开始事务。</li><li>命令入队。</li><li>执行事务。</li></ul></blockquote><p>  <strong>注意：</strong>单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p><p>1、DISCARD</p><blockquote><p>取消事务，放弃执行事务块内的所有命令。</p></blockquote><p>2、EXEC</p><blockquote><p>执行所有事务块内的命令。</p></blockquote><p>3、MULTI</p><blockquote><p>标记一个事务块的开始。</p></blockquote><p>4、UNWATCH</p><blockquote><p>取消 WATCH 命令对所有 key 的监视。</p></blockquote><p>5、WATCH key [key …]</p><blockquote><p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p></blockquote><hr><h3 id="十一、Redis脚本"><a href="#十一、Redis脚本" class="headerlink" title="十一、Redis脚本"></a>十一、Redis脚本</h3><p>  Redis 脚本使用 Lua 解释器来执行脚本。 Redis 2.6 版本通过内嵌支持 Lua 环境。执行脚本的常用命令为 EVAL。<br>1、EVAL script numkeys key [key …] arg [arg …]</p><blockquote><p>执行 Lua 脚本。</p></blockquote><p>2、EVALSHA sha1 numkeys key [key …] arg [arg …]</p><blockquote><p>执行 Lua 脚本。</p></blockquote><p>3、SCRIPT EXISTS script [script …]</p><blockquote><p>查看指定的脚本是否已经被保存在缓存当中。</p></blockquote><p>4、SCRIPT FLUSH</p><blockquote><p>从脚本缓存中移除所有脚本。</p></blockquote><p>5、SCRIPT KILL</p><blockquote><p>杀死当前正在运行的 Lua 脚本。</p></blockquote><p>6、SCRIPT LOAD script</p><blockquote><p>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM参数使用手册</title>
      <link href="/posts/fc33e821.html"/>
      <url>/posts/fc33e821.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>JVM提供了大量的参数配置，可以通过配置这些参数对JVM进行调优、记录GC日志等等。</p></blockquote><h3 id="一、内存相关"><a href="#一、内存相关" class="headerlink" title="一、内存相关"></a>一、内存相关</h3><p>  通过这些参数可以对JVM的内存分配做调整</p><h4 id="Xms"><a href="#Xms" class="headerlink" title="Xms"></a>Xms</h4><blockquote><p><strong>英文解释：</strong>Initial heap size(in bytes)<br><strong>中文释义：</strong>堆区初始值<br><strong>使用方法：</strong>-Xms2g 或 -XX:InitialHeapSize&#x3D;2048m<br><strong>等价于：</strong>-XX:InitialHeapSize<br><strong>说明：</strong>memory start。默认情况下，初始的堆区(年轻代+老年代)内存大小为“物理电脑内存大小 &#x2F; 64”</p></blockquote><h4 id="Xmx"><a href="#Xmx" class="headerlink" title="Xmx"></a>Xmx</h4><blockquote><p><strong>英文解释：</strong>Maximum heap size(in bytes)<br><strong>中文释义：</strong>堆区最大值<br><strong>使用方法：</strong>-Xmx2g 或 -XX:MaxHeapSize&#x3D;2048m<br><strong>等价于：</strong>-XX:MaxHeapSize<br><strong>说明：</strong>memory max。一旦堆区中的内存大小超过“-Xmx”所指定的最大内存时，将会抛出OutOfMemoryError异常。默认情况下，最大的堆区(年轻代+老年代)内存大小为“物理电脑内存大小 &#x2F; 4”。</p></blockquote><h4 id="Xmn"><a href="#Xmn" class="headerlink" title="Xmn"></a>Xmn</h4><blockquote><p><strong>英文解释：</strong>Maximum new generation size(in bytes)<br><strong>中文释义：</strong>新生代最大值<br><strong>使用方法：</strong>-Xmn512m 或 -XX:MaxNewSize&#x3D;512m</p></blockquote><h4 id="PermSize"><a href="#PermSize" class="headerlink" title="PermSize"></a>PermSize</h4><p>(JDK1.8以后已废弃)</p><blockquote><p><strong>英文解释：</strong>Initial size of permanent generation(in bytes)<br><strong>中文释义：</strong>永久代初始大小<br><strong>使用方法：</strong>-XX:PermSize&#x3D;128m</p></blockquote><h4 id="MaxPermSize"><a href="#MaxPermSize" class="headerlink" title="MaxPermSize"></a>MaxPermSize</h4><p>(JDK1.8以后已废弃)</p><blockquote><p><strong>英文解释：</strong>Maximum size of permanent generation(in bytes)<br><strong>中文释义：</strong>永久代最大值<br><strong>使用方法：</strong>-XX:MaxPermSize&#x3D;256m</p></blockquote><h4 id="MetaspaceSize"><a href="#MetaspaceSize" class="headerlink" title="MetaspaceSize"></a>MetaspaceSize</h4><p>(JDK1.8以后用于替换PermSize)</p><blockquote><p><strong>英文解释：</strong>Initial size of Metaspaces (in bytes)<br><strong>中文释义：</strong>元数据区初始大小<br><strong>使用方法：</strong>-XX:MetaspaceSize&#x3D;128m</p></blockquote><h4 id="MaxMetaspaceSize"><a href="#MaxMetaspaceSize" class="headerlink" title="MaxMetaspaceSize"></a>MaxMetaspaceSize</h4><p>(JDK1.8以后用于替换MaxPermSize)</p><blockquote><p><strong>英文解释：</strong>Maximum size of Metaspaces (in bytes)<br><strong>中文释义：</strong>元数据区最大值<br><strong>使用方法：</strong>-XX:MaxMetaspaceSize&#x3D;256m</p></blockquote><h4 id="Xss"><a href="#Xss" class="headerlink" title="Xss"></a>Xss</h4><blockquote><p><strong>英文解释：</strong>Thread Stack Size(in Kbytes)<br><strong>中文释义：</strong>线程栈最大值<br><strong>使用方法：</strong>-Xss256k 或 -XX:ThreadStackSize&#x3D;256k</p></blockquote><h4 id="MaxDirectMemorySize"><a href="#MaxDirectMemorySize" class="headerlink" title="MaxDirectMemorySize"></a>MaxDirectMemorySize</h4><blockquote><p><strong>英文解释：</strong>Maximum total size of NIO direct-buffer allocations<br><strong>中文释义：</strong>最大直接内存（堆外）大小<br><strong>使用方法：</strong>-XX:MaxDirectMemorySize&#x3D;256m</p></blockquote><hr><h3 id="二、GC策略相关"><a href="#二、GC策略相关" class="headerlink" title="二、GC策略相关"></a>二、GC策略相关</h3><p>  通过这些参数可以对JVM的GC性能进行调优</p><h4 id="NewRatio"><a href="#NewRatio" class="headerlink" title="NewRatio"></a>NewRatio</h4><blockquote><p><strong>英文解释：</strong>Ratio of old&#x2F;new generation sizes<br><strong>中文释义：</strong>老年代和新生代的比值<br><strong>使用方法：</strong>-XX:NewRatio&#x3D;2<br><strong>使用经验：</strong>假如设为6，则表示老年代最大内存占堆最大内存的2&#x2F;3，新生代则为1&#x2F;3。如果设置了Xmn或者NewSize&#x2F;MaxNewSize，那么NewRatio配置无效</p></blockquote><h4 id="SurvivorRatio"><a href="#SurvivorRatio" class="headerlink" title="SurvivorRatio"></a>SurvivorRatio</h4><blockquote><p><strong>英文解释：</strong>Rato of eden&#x2F;survivor space size<br><strong>中文释义：</strong>新生代中eden区和survivor区的比值<br><strong>使用方法：</strong>-XX:SurvivorRatio&#x3D;6<br><strong>使用经验：</strong>假如设为6，则表示每个survivor区跟eden区的比值为1:6,每个survivor区占新生代的八分之一</p></blockquote><h4 id="PretenureSizeThreshold"><a href="#PretenureSizeThreshold" class="headerlink" title="PretenureSizeThreshold"></a>PretenureSizeThreshold</h4><blockquote><p><strong>英文解释：</strong>Maximum size in bytes of objects allocated in DefNew generation;zero means no maximum<br><strong>中文释义：</strong>可以在新生代直接分配的对象最大值，0表示没有最大值<br><strong>使用方法：</strong>-XX:PretenureSizeThreshold&#x3D;1000000<br><strong>使用经验：</strong>设置该参数，可以使大于这个值的对象直接在老年代分配，避免在Eden区和Survivor区发生大量的内存复制，该参数只对Serial和ParNew收集器有效，Parallel Scavenge并不认识该参数</p></blockquote><h4 id="MaxTenuringThreshold"><a href="#MaxTenuringThreshold" class="headerlink" title="MaxTenuringThreshold"></a>MaxTenuringThreshold</h4><blockquote><p><strong>英文解释：</strong>Maximum value fo tenuring threshold<br><strong>中文释义：</strong>年轻代最大年龄<br><strong>使用方法：</strong>-XX:MaxTenuringThreshold&#x3D;10<br><strong>使用经验：</strong>每个对象在坚持过一次Minor GC之后，年龄就增加1，当超过这个参数值时就进入老年代，最大支持15</p></blockquote><h4 id="UseSerialGC"><a href="#UseSerialGC" class="headerlink" title="UseSerialGC"></a>UseSerialGC</h4><blockquote><p><strong>英文解释：</strong>Use the Serial garbage collector<br><strong>中文释义：</strong>年轻代使用Serial垃圾收集器<br><strong>使用方法：</strong>开启 -XX:+UseSerialGC<br><strong>使用经验：</strong>不推荐使用，性能太差，老年代将会使用SerialOld垃圾收集器</p></blockquote><h4 id="UseParNewGC"><a href="#UseParNewGC" class="headerlink" title="UseParNewGC"></a>UseParNewGC</h4><blockquote><p><strong>英文解释：</strong>Use parallel threads in the new generation<br><strong>中文释义：</strong>年轻代使用ParNew垃圾收集器<br><strong>使用方法：</strong>开启 -XX:+UseParNewGC</p></blockquote><h4 id="ParallelGCThreads"><a href="#ParallelGCThreads" class="headerlink" title="ParallelGCThreads"></a>ParallelGCThreads</h4><blockquote><p><strong>英文解释：</strong>Number of parallel threads parallel gc will use<br><strong>中文释义：</strong>并行执行gc的线程数<br><strong>使用方法：</strong>-XX:ParallelGCThreads&#x3D;16</p></blockquote><h4 id="UseParallelGC"><a href="#UseParallelGC" class="headerlink" title="UseParallelGC"></a>UseParallelGC</h4><blockquote><p><strong>英文解释：</strong>Use the Parallel Scavenge garbage collector<br><strong>中文释义：</strong>年轻代使用Parallel Scavenge垃圾收集器<br><strong>使用方法：</strong>开启 -XX:+UseParallelGC<br><strong>使用经验：</strong>Linux下1.6,1.7,1.8默认开启，老年代将会使用SerialOld垃圾收集器</p></blockquote><h4 id="UseParallelOldGC"><a href="#UseParallelOldGC" class="headerlink" title="UseParallelOldGC"></a>UseParallelOldGC</h4><blockquote><p><strong>英文解释：</strong>Use the Parallel Old garbage collector<br><strong>中文释义：</strong>年轻代使用Parallel Scavenge收集器<br><strong>使用方法：</strong>开启 -XX:+UseParallelOldGC<br><strong>使用经验：</strong>老年代将会使用Parallel Old收集器</p></blockquote><h4 id="UseConcMarkSweepGC"><a href="#UseConcMarkSweepGC" class="headerlink" title="UseConcMarkSweepGC"></a>UseConcMarkSweepGC</h4><blockquote><p><strong>英文解释：</strong>Use Concurrent Mark-Sweep GC in the old generation<br><strong>中文释义：</strong>老年代使用CMS收集器（如果出现”Concurrent Mode Failure”，会使用SerialOld收集器）<br><strong>使用方法：</strong>开启 -XX:+UseConcMarkSweepGC<br><strong>使用经验：</strong>年轻代将会使用ParNew收集器</p></blockquote><h4 id="CMSInitiatingOccupancyFraction"><a href="#CMSInitiatingOccupancyFraction" class="headerlink" title="CMSInitiatingOccupancyFraction"></a>CMSInitiatingOccupancyFraction</h4><blockquote><p><strong>英文解释：</strong>Percentage CMS generation occupancy to start a CMS collection cycle. A negative value means that CMSTriggerRatio is used<br><strong>中文释义：</strong>触发执行CMS回收的当前年代区内存占用的百分比，负值表示使用CMSTriggerRatio设置的值<br><strong>使用方法：</strong>-XX:CMSInitiatingOccupancyFraction&#x3D;75<br><strong>使用经验：</strong>该参数需配合UseCMSInitiatingOccupancyOnly一起使用</p></blockquote><h4 id="UseCMSInitiatingOccupancyOnly"><a href="#UseCMSInitiatingOccupancyOnly" class="headerlink" title="UseCMSInitiatingOccupancyOnly"></a>UseCMSInitiatingOccupancyOnly</h4><blockquote><p><strong>英文解释：</strong>Only use occupancy as a criterion for staring a CMS collection<br><strong>中文释义：</strong>只根据占用情况作为开始执行CMS收集的标准，默认关闭<br><strong>使用方法：</strong>开启 -XX:+UseCMSInitiatingOccupancyOnly</p></blockquote><h4 id="UseCMSCompactAtFullCollection"><a href="#UseCMSCompactAtFullCollection" class="headerlink" title="UseCMSCompactAtFullCollection"></a>UseCMSCompactAtFullCollection</h4><blockquote><p><strong>英文解释：</strong>Use Mark-Sweep-Compact algorithm at full collections<br><strong>中文释义：</strong>使用CMS执行Full GC时对内存进行压缩，默认关闭<br><strong>使用方法：</strong>开启 -XX:+UseCMSCompactAtFullCollection</p></blockquote><h4 id="CMSFullGCsBeforeCompaction"><a href="#CMSFullGCsBeforeCompaction" class="headerlink" title="CMSFullGCsBeforeCompaction"></a>CMSFullGCsBeforeCompaction</h4><blockquote><p><strong>英文解释：</strong>Number of CMS full collection done before compaction if &gt; 0<br><strong>中文释义：</strong>多少次FGC后进行内存压缩<br><strong>使用方法：</strong>-XX:CMSFullGCsBeforeCompaction&#x3D;1</p></blockquote><h4 id="CMSClassUnloadingEnabled"><a href="#CMSClassUnloadingEnabled" class="headerlink" title="CMSClassUnloadingEnabled"></a>CMSClassUnloadingEnabled</h4><blockquote><p><strong>英文解释：</strong>Whether class unloading enabled when using CMS GC<br><strong>中文释义：</strong>当使用CMS GC时是否启用类卸载功能，默认关闭<br><strong>使用方法：</strong>开启 -XX:+CMSClassUnloadingEnabled</p></blockquote><h4 id="CMSParallelRemarkEnabled"><a href="#CMSParallelRemarkEnabled" class="headerlink" title="CMSParallelRemarkEnabled"></a>CMSParallelRemarkEnabled</h4><blockquote><p><strong>英文解释：</strong>Whether parallel remark enabled (only if ParNewGC)<br><strong>中文释义：</strong>是否启用并行标记（仅限于ParNewGC），默认关闭<br><strong>使用方法：</strong>开启 -XX:+CMSParallelRemarkEnabled</p></blockquote><h4 id="UseG1GC"><a href="#UseG1GC" class="headerlink" title="UseG1GC"></a>UseG1GC</h4><blockquote><p><strong>英文解释：</strong>Use the Garbage-First garbage collector<br><strong>中文释义：</strong>使用G1垃圾收集器<br><strong>使用方法：</strong>开启 -XX:+UseG1GC</p></blockquote><h4 id="MaxGCPauseMillis"><a href="#MaxGCPauseMillis" class="headerlink" title="MaxGCPauseMillis"></a>MaxGCPauseMillis</h4><blockquote><p><strong>英文解释：</strong>Adaptive size policy maximum GC pause time goal in millisecond, or (G1 Only) the maximum GC time per MMU time slice<br><strong>中文释义：</strong>自适应大小策略的最大GC暂停时间目标（以毫秒为单位），或（仅G1）每个MMU时间片的最大GC时间<br><strong>使用方法：</strong>-XX:MaxGCPauseMillis&#x3D;200</p></blockquote><h4 id="DisableExplicitGC"><a href="#DisableExplicitGC" class="headerlink" title="DisableExplicitGC"></a>DisableExplicitGC</h4><blockquote><p><strong>英文解释：</strong>Ignore calls to System.gc()<br><strong>中文释义：</strong>禁用System.gc()触发FullGC<br><strong>使用方法：</strong>开启 -XX:+DisableExplicitGC<br><strong>PS：</strong>不建议开启，如果开启了这个参数可能会导致堆外内存无法及时回收造成内存溢出</p></blockquote><hr><h3 id="三、GC日志相关"><a href="#三、GC日志相关" class="headerlink" title="三、GC日志相关"></a>三、GC日志相关</h3><p>  通过这些参数可以对JVM的GC日志输出进行配置，方便分析</p><h4 id="Xloggc"><a href="#Xloggc" class="headerlink" title="Xloggc"></a>Xloggc</h4><blockquote><p><strong>英文解释：</strong>GC log file<br><strong>中文释义：</strong>GC日志文件路径<br><strong>使用方法：</strong>-Xloggc:&#x2F;data&#x2F;gclog&#x2F;gc.log</p></blockquote><h4 id="UseGCLogFileRotation"><a href="#UseGCLogFileRotation" class="headerlink" title="UseGCLogFileRotation"></a>UseGCLogFileRotation</h4><blockquote><p><strong>英文解释：</strong>Rotate gclog files(for long running applications). It requires -Xloggc:&lt;filename&gt;<br><strong>中文释义：</strong>滚动GC日志文件，须配置Xloggc<br><strong>使用方法：</strong>开启 -XX:+UseGCLogFileRotation</p></blockquote><h4 id="NumberOfGCLogFiles"><a href="#NumberOfGCLogFiles" class="headerlink" title="NumberOfGCLogFiles"></a>NumberOfGCLogFiles</h4><blockquote><p><strong>英文解释：</strong>Number of gclog files in rotation(default:0,no rotation)<br><strong>中文释义：</strong>滚动GC日志文件数，默认0，不滚动<br><strong>使用方法：</strong>-XX:NumberOfGCLogFiles&#x3D;4</p></blockquote><h4 id="GCLogFileSize"><a href="#GCLogFileSize" class="headerlink" title="GCLogFileSize"></a>GCLogFileSize</h4><blockquote><p><strong>英文解释：</strong>GC log file size,requires UseGCLogFileRotation. Set to 0 to only trigger rotation via jcmd<br><strong>中文释义：</strong>GC文件滚动大小，需配置UseGCLogFileRotation，设置为0表示仅通过jcmd命令触发<br><strong>使用方法：</strong>-XX:GCLogFileSize&#x3D;100k</p></blockquote><h4 id="PrintGCDetails"><a href="#PrintGCDetails" class="headerlink" title="PrintGCDetails"></a>PrintGCDetails</h4><blockquote><p><strong>英文解释：</strong>Print more details at garbage collection<br><strong>中文释义：</strong>GC时打印更多详细信息，默认关闭<br><strong>使用方法：</strong>开启 -XX:+PrintGCDetails<br><strong>PS：</strong>可以通过jinfo -flag [+|-]PrintGCDetails &lt;pid&gt; 或 jinfo -flag PrintGCDetails&#x3D;&lt;value&gt; &lt;pid&gt; 来动态开启或设置值</p></blockquote><h4 id="PrintGCDateStamps"><a href="#PrintGCDateStamps" class="headerlink" title="PrintGCDateStamps"></a>PrintGCDateStamps</h4><blockquote><p><strong>英文解释：</strong>Print date stamps at garbage collection<br><strong>中文释义：</strong>GC时打印时间戳信息，默认关闭<br><strong>使用方法：</strong>开启 -XX:+PrintGCDateStamps<br><strong>PS：</strong>可以通过jinfo -flag [+|-]PrintGCDateStamps &lt;pid&gt; 或 jinfo -flag PrintGCDateStamps&#x3D;&lt;value&gt; &lt;pid&gt; 来动态开启或设置值</p></blockquote><h4 id="PrintTenuringDistribution"><a href="#PrintTenuringDistribution" class="headerlink" title="PrintTenuringDistribution"></a>PrintTenuringDistribution</h4><blockquote><p><strong>英文解释：</strong>Print tenuring age information<br><strong>中文释义：</strong>打印存活实例年龄信息，默认关闭<br><strong>使用方法：</strong>开启 -XX:+PrintTenuringDistribution</p></blockquote><h4 id="PrintGCApplicationStoppedTime"><a href="#PrintGCApplicationStoppedTime" class="headerlink" title="PrintGCApplicationStoppedTime"></a>PrintGCApplicationStoppedTime</h4><blockquote><p><strong>英文解释：</strong>Print the time of application has been stopped<br><strong>中文释义：</strong>打印应用暂停时间，默认关闭<br><strong>使用方法：</strong>开启 -XX:+PrintGCApplicationStoppedTime</p></blockquote><h4 id="PrintHeapAtGC"><a href="#PrintHeapAtGC" class="headerlink" title="PrintHeapAtGC"></a>PrintHeapAtGC</h4><blockquote><p><strong>英文解释：</strong>Print heap layout before and after each GC<br><strong>中文释义：</strong>GC前后打印堆区使用信息，默认关闭<br><strong>使用方法：</strong>开启 -XX:+PrintHeapAtGC</p></blockquote><hr><h3 id="四、异常相关"><a href="#四、异常相关" class="headerlink" title="四、异常相关"></a>四、异常相关</h3><p>  通过这些参数可以在JVM异常情况下执行某些操作，以保留现场做分析用</p><h4 id="HeapDumpOnOutOfMemoryError"><a href="#HeapDumpOnOutOfMemoryError" class="headerlink" title="HeapDumpOnOutOfMemoryError"></a>HeapDumpOnOutOfMemoryError</h4><blockquote><p><strong>英文解释：</strong>Dump heap to file when java.lang.OutOfMemoryError is thrown<br><strong>中文释义：</strong>抛出内存溢出错误时导出堆信息到指定文件，默认关闭<br><strong>使用方法：</strong>开启 -XX:+HeapDumpOnOutOfMemoryError<br><strong>PS：</strong>可以通过jinfo -flag [+|-]HeapDumpOnOutOfMemoryError &lt;pid&gt; 或 jinfo -flag HeapDumpOnOutOfMemoryError&#x3D;&lt;value&gt; &lt;pid&gt; 来动态开启或设置值</p></blockquote><h4 id="HeapDumpPath"><a href="#HeapDumpPath" class="headerlink" title="HeapDumpPath"></a>HeapDumpPath</h4><blockquote><p><strong>英文解释：</strong>When HeapDumpOnOutOfMemoryError is on, the path(filename or directory) of the dump file(defaults to java_pid&lt;pid&gt;.hprof in the working directory)<br><strong>中文释义：</strong>当HeapDumpOnOutOfMemoryError开启的时候，dump文件的保存路径，默认为工作目录下的java_pid&lt;pid&gt;.hprof文件<br><strong>使用方法：</strong>-XX:HeapDumpPath&#x3D;&#x2F;data&#x2F;dump&#x2F;jvm.dump<br><strong>使用经验：</strong>除非必要，建议不设置</p></blockquote><h4 id="OmitStackTraceInFastThrow"><a href="#OmitStackTraceInFastThrow" class="headerlink" title="OmitStackTraceInFastThrow"></a>OmitStackTraceInFastThrow</h4><blockquote><p><strong>英文解释：</strong>Omit backtraces for some ‘hot’ exceptions in optimized code<br><strong>中文释义：</strong>在优化代码里面忽略热点异常回溯<br><strong>使用方法：</strong>关闭 -XX:-OmitStackTraceInFastThrow<br><strong>使用经验：</strong>某些热点异常抛的太多的话，JVM默认会做优化，会使用JVM初始化的时候创建的异常代替实际的异常，这些异常是没有异常栈信息的，不方便定位问题，如果有碰到这种情况，可以考虑关闭这个配置</p></blockquote><hr><h3 id="五、问题定位及优化相关"><a href="#五、问题定位及优化相关" class="headerlink" title="五、问题定位及优化相关"></a>五、问题定位及优化相关</h3><p>  通过这些参数可以对JVM进行性能优化或者排查定位问题</p><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><blockquote><p><strong>英文解释：</strong>server mode<br><strong>中文释义：</strong>使用服务端模式<br><strong>使用方法：</strong>-server</p></blockquote><h4 id="TieredCompilation"><a href="#TieredCompilation" class="headerlink" title="TieredCompilation"></a>TieredCompilation</h4><blockquote><p><strong>英文解释：</strong>Enable tiered compilation<br><strong>中文释义：</strong>启用多层编译<br><strong>使用经验：</strong>java 1.8默认开启分层编译，该参数无效<br><strong>使用方法：</strong></p><ul><li>开启 -XX:+TieredCompilation</li><li>关闭 -XX:-TieredCompilation</li></ul></blockquote><h4 id="NativeMemoryTracking"><a href="#NativeMemoryTracking" class="headerlink" title="NativeMemoryTracking"></a>NativeMemoryTracking</h4><blockquote><p><strong>英文解释：</strong>Native memory tracking options<br><strong>中文释义：</strong>开启本机内存追踪<br><strong>使用经验：</strong>开启的话，大概会增加5%-10%的性能消耗<br><strong>使用方法：</strong></p><ul><li>开启详细信息 -XX:NativeMemoryTracking&#x3D;detail</li><li>开启概要信息 -XX:NativeMemoryTracking&#x3D;summary</li></ul></blockquote><h4 id="UnlockDiagnosticVMOptions"><a href="#UnlockDiagnosticVMOptions" class="headerlink" title="UnlockDiagnosticVMOptions"></a>UnlockDiagnosticVMOptions</h4><blockquote><p><strong>英文解释：</strong>Enable normal processing of flags<br><strong>中文释义：</strong>解锁对JVM进行诊断的选项参数，默认关闭<br><strong>使用方法：</strong>开启 -XX:+UnlockDiagnosticVMOptions</p></blockquote><h4 id="PrintNMTStatistics"><a href="#PrintNMTStatistics" class="headerlink" title="PrintNMTStatistics"></a>PrintNMTStatistics</h4><blockquote><p><strong>英文解释：</strong>Print native memory tracking summary data if it is on<br><strong>中文释义：</strong>在jvm shutdown的时候输出整体的native memory统计，默认关闭<br><strong>使用方法：</strong>开启 -XX:+PrintNMTStatistics<br><strong>使用经验：</strong>必须配合参数-XX:+UnlockDiagnosticVMOptions使用，并且只能加在其后才能生效</p></blockquote><h4 id="UseAdaptiveSizePolicy"><a href="#UseAdaptiveSizePolicy" class="headerlink" title="UseAdaptiveSizePolicy"></a>UseAdaptiveSizePolicy</h4><blockquote><p><strong>英文解释：</strong>Use adaptive generation sizing policies<br><strong>中文释义：</strong>使用自适应分代内存策略<br><strong>使用经验：</strong>1.7以后默认会开启该参数，如果使用CMS回收算法，则会关闭该参数，该参数开启以后会使SurvivorRatio参数失效，如果显示指定了SurvivorRatio，需要关闭该参数<br><strong>使用方法：</strong></p><ul><li>开启 -XX:+UseAdaptiveSizePolicy</li><li>关闭 -XX:-UseAdaptiveSizePolicy</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的遍历</title>
      <link href="/posts/ea4681d0.html"/>
      <url>/posts/ea4681d0.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>对于二叉树的递归遍历比较简单，所以本文主要想讨论的是非递归版。其中，中序遍历和前序遍历的非递归写法都比较简单，后序遍历最难。</p></blockquote><h3 id="一、二叉树节点表示"><a href="#一、二叉树节点表示" class="headerlink" title="一、二叉树节点表示"></a>一、二叉树节点表示</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二、前序遍历"><a href="#二、前序遍历" class="headerlink" title="二、前序遍历"></a>二、前序遍历</h3><h4 id="2-1-递归版本"><a href="#2-1-递归版本" class="headerlink" title="2.1 递归版本"></a>2.1 递归版本</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preOrder1</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2-2-非递归版本"><a href="#2-2-非递归版本" class="headerlink" title="2.2 非递归版本"></a>2.2 非递归版本</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preOrder2</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span>  stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="三、中序遍历"><a href="#三、中序遍历" class="headerlink" title="三、中序遍历"></a>三、中序遍历</h3><h4 id="3-1-递归版本"><a href="#3-1-递归版本" class="headerlink" title="3.1 递归版本"></a>3.1 递归版本</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inOrder1</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">inOrder1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inOrder1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3-2-非递归版本"><a href="#3-2-非递归版本" class="headerlink" title="3.2 非递归版本"></a>3.2 非递归版本</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">inOrder2</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node<span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="四、后序遍历"><a href="#四、后序遍历" class="headerlink" title="四、后序遍历"></a>四、后序遍历</h3><h4 id="4-1-递归版本"><a href="#4-1-递归版本" class="headerlink" title="4.1 递归版本"></a>4.1 递归版本</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">postOrder1</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">postOrder1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrder1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="4-2-非递归版本"><a href="#4-2-非递归版本" class="headerlink" title="4.2 非递归版本"></a>4.2 非递归版本</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">postOrder2</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> stack  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> lastNode <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token comment">//主要用来记录上次访问的节点。判断上次访问的节点是否为当前节点的右节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//①当前节点没有右节点；②当前节点的右节点已访问过</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> lastNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastNode <span class="token operator">=</span> node<span class="token punctuation">;</span>            node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="五、层序遍历"><a href="#五、层序遍历" class="headerlink" title="五、层序遍历"></a>五、层序遍历</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">LevelorderTraversal</span> <span class="token punctuation">(</span> <span class="token class-name">TreeNode</span> root <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> <span class="token class-name">Q</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">/* 若是空树则直接返回 */</span>     <span class="token class-name">Q</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Q</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         node <span class="token operator">=</span> <span class="token class-name">Q</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 访问取出队列的结点 */</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token class-name">Q</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token class-name">Q</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM的符号引用和直接引用</title>
      <link href="/posts/ac269cc4.html"/>
      <url>/posts/ac269cc4.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在JVM中类加载过程中，在链接（验证、准备、解析）的解析阶段，Java虚拟机会把类的二进制数据中的符号引用替换为直接引用。</p></blockquote><h3 id="一、符号引用"><a href="#一、符号引用" class="headerlink" title="一、符号引用"></a>一、符号引用</h3><p>  符号引用（Symbolic Reference）以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能够无歧义的定位到目标即可。例如，在Class文件中它以CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等类型的常量出现。符号引用与虚拟机的内存布局无关，引用的目标并不一定加载到内存中。<strong>在Java中，一个java类将会编译成一个class文件。在编译时，java类并不知道所引用的类的实际地址，因此只能使用符号引用来代替，而在解析阶段虚拟机就是为了把这个符号引用转换成真正的引用地址。</strong>比如org.simple.People类引用了org.simple.Language类，在编译时People类并不知道Language类的实际内存地址，因此只能使用符号org.simple.Language（假设是这个，当然实际中是由类似于CONSTANT_Class_info的常量来表示的）来表示Language类的地址。各种虚拟机实现的内存布局可能有所不同，但是它们能接受的符号引用都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p><h3 id="二、直接引用"><a href="#二、直接引用" class="headerlink" title="二、直接引用"></a>二、直接引用</h3><p>  直接引用和虚拟机的布局是相关的，不同的虚拟机对于相同的符号引用所翻译出来的直接引用一般是不同的。<strong>如果有了直接引用，那么直接引用的目标一定被加载到了内存中的。</strong>直接引用可以是：</p><ul><li>（1）直接指向目标的指针（比如，指向“类型”【Class对象】、类变量、类方法的直接引用可能是指向方法区的指针）</li><li>（2）相对偏移量（比如，指向实例变量、实例方法的直接引用都是偏移量）</li><li>（3）一个能间接定位到目标的句柄</li></ul><h3 id="三、关于偏移量以及内存布局"><a href="#三、关于偏移量以及内存布局" class="headerlink" title="三、关于偏移量以及内存布局"></a>三、关于偏移量以及内存布局</h3><p>  符号引用是只包含语义信息，不涉及具体实现的；而解析（resolve）过后的直接引用则是与具体实现息息相关的。所以当谈及某个符号引用被resolve成怎样的直接引用时，必须要结合某个具体的内存布局实现来讨论才行。<br>  在对象实例方面，HotSpot VM所采用的对象模型是比较直观的一种：Java引用通过直接指针（direct pointer）或语义上是直接指针的压缩指针（compressed pointer）来实现；指针指向的是对象的真实起始位置（没有在负偏移量上放任何数据）。对象内的布局是：最前面是对象头，有两个VM内部字段：_mark 和 _klass。后面紧跟着就是对象的所有实例字段，紧凑排布，继承深度越浅的类所声明的字段越靠前，继承深度越深的类所声明的字段越靠后。在同一个类中声明的字段按字段的类型宽度来重排序，对普通Java类默认的排序是：long&#x2F;double - 8字节、int&#x2F;float - 4字节、short&#x2F;char - 2字节、byte&#x2F;boolean - 1字节，最后是引用类型字段（4或8字节）。每个字段按照其宽度来对齐；最终对象默认再做一次8字节对齐。在类继承的边界上如果有因对齐而带来的空隙的话，可以把子类的字段拉到空隙里。这种排布方式可以让原始类型字段最大限度地紧凑排布在一起，减少字段间因为对齐而带来的空隙；同时又让引用类型字段尽可能排布在一起，减少OopMap的开销。<br><strong>举例来说，对于下面的类C：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">boolean</span> b<span class="token punctuation">;</span>  <span class="token class-name">Object</span> o1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">long</span> l<span class="token punctuation">;</span>  <span class="token class-name">Object</span> o2<span class="token punctuation">;</span>  <span class="token keyword">float</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">boolean</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>它的实例对象布局就是：（假定是64位HotSpot VM，开启了压缩指针的话）</strong></p><pre class="language-text" data-language="text"><code class="language-text">-->  +0 [ _mark     ] (64-bit header word)     +8 [ _klass    ] (32-bit header word, compressed klass pointer)    +12 [ A.b       ] (boolean, 1 byte)    +13 [ (padding) ] (padding for alignment, 3 bytes)    +16 [ A.o1      ] (reference, compressed pointer, 4 bytes)    +20 [ B.i       ] (int, 4 bytes)    +24 [ B.l       ] (long, 8 bytes)    +32 [ B.f       ] (float, 4 bytes)    +36 [ B.o2      ] (reference, compressed pointer, 4 bytes)    +40 [ C.b       ] (boolean, 1 byte)    +41 [ (padding) ] (padding for object alignment, 7 bytes)</code></pre><p>  所以C类的对象实例大小，在这个设定下是48字节，其中有10字节是为对齐而浪费掉的padding，12字节是对象头，剩下的26字节是用户自己代码声明的实例字段。<br>  留意到C类里字段的排布是按照这个顺序的：对象头 - Object声明的字段（无） - A声明的字段 - B声明的字段 - C声明的字段——按继承深度从浅到深排布。而每个类里面的字段排布顺序则按前面说的规则，按宽度来重排序。同时，如果类继承边界上有空隙（例如这里A和B之间其实本来会有一个4字节的空隙，但B里正好声明了一些不宽于4字节的字段，就可以把第一个不宽于4字节的字段拉到该空隙里，也就是 B.i 的位置）。<br>  同时也请留意到A类和C类都声明了名字为b的字段。它们之间有什么关系？——没关系。Java里，字段是不参与多态的。派生类如果声明了跟基类同名的字段，则两个字段在最终的实例中都会存在；派生类的版本只会在名字上遮盖（shadow &#x2F; hide）掉基类字段的名字，而不会与基类字段合并或令其消失。上面例子特意演示了一下A.b 与 C.b 同时存在的这个情况。<br><strong>使用JOL工具可以方便地看到同样的信息：</strong></p><pre class="language-text" data-language="text"><code class="language-text">com.yczlab.work.C object internals:OFF  SZ        TYPE DESCRIPTION          VALUE  0   8        (object header: mark)     0x0000000000000005 (biasable; age: 0)  8   4        (object header: class)    0x200ae421 12   1        boolean A.b               false 13   3        (alignment/padding gap) 16   4        java.lang.Object A.o1     null 20   4        int B.i                   0 24   8        long B.l                  0 32   4        float B.f                 0.0 36   4        java.lang.Object B.o2     null 40   1        boolean C.b               false 41   7        (object alignment gap)Instance size: 48 bytesSpace losses: 3 bytes internal + 7 bytes external = 10 bytes total</code></pre><p>  第一行java对象头的Mark Word共占8个字节，第二行是java对象头的Klass Pointer类指针，本来也是占8个字节，但因JDK默认开启类指针压缩所以占4个字节，对象头总共12个字节。后面是其字段的内存占用情况，继承深度越浅的类所声明的字段越靠前，继承深度越深的类所声明的字段越靠后。<br>  所以，对一个这样的对象模型，实例字段的“偏移量”是从对象起始位置开始算的。对于这样的字节码：<code>getfield cp#12  // C.b:Z</code>（这里用cp#12来表示常量池的第12项的意思）这个C.b:Z的符号引用，最终就会被解析为+40这样的偏移量，外加一些VM自己用的元数据。这个偏移量加上额外元数据比原本的constant pool index要宽，没办法放在原本的constant pool里，所以HotSpot VM有另外一个叫做constant pool cache的东西来存放它们。在HotSpot VM里，上面的字节码经过解析后，就会变成：<code>fast_bgetfield cpc#5  // (offset: +40, type: boolean, ...)</code>（这里用cpc#5来表示constant pool cache的第5项的意思）于是解析后偏移量信息就记录在了constant pool cache里，getfield根据解析出来的constant pool cache entry里记录的类型信息被改写为对应类型的版本的字节码fast_bgetfield来避免以后每次都去解析一次，然后fast_bgetfield就可以根据偏移量信息以正确的类型来访问字段了。</p><hr><p>**静态变量（或者有人喜欢叫“类变量”）的情况: **<br>  从JDK 1.3到JDK 6的HotSpot VM，静态变量保存在类的元数据（InstanceKlass）的末尾。而从JDK 7开始的HotSpot VM，静态变量则是保存在类的Java镜像（java.lang.Class实例）的末尾。<br><strong>在HotSpot VM中，对象、类的元数据（InstanceKlass）、类的Java镜像，三者之间的关系是这样的：</strong></p><pre class="language-text" data-language="text"><code class="language-text">Java object      InstanceKlass       Java mirror [ _mark  ]                          (java.lang.Class instance) [ _klass ] --> [ ...          ] &lt;-\ [ fields ]     [ _java_mirror ] --+> [ _mark  ]                [ ...          ]   |  [ _klass ]                                   |  [ fields ]                                    \ [ klass  ]</code></pre><p>  每个Java对象的对象头里，_klass字段会指向一个VM内部用来记录类的元数据用的InstanceKlass对象；InsanceKlass里有个_java_mirror字段，指向该类所对应的Java镜像——java.lang.Class实例。HotSpot VM会给Class对象注入一个隐藏字段“klass”，用于指回到其对应的InstanceKlass对象。这样，klass与mirror之间就有双向引用，可以来回导航。这个模型里，java.lang.Class实例并不负责记录真正的类元数据，而只是对VM内部的InstanceKlass对象的一个包装供Java的反射访问用。<br>  在JDK 6及之前的HotSpot VM里，静态字段依附在InstanceKlass对象的末尾；而在JDK 7开始的HotSpot VM里，静态字段依附在java.lang.Class对象的末尾。<br><strong>假如有这样的A类：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>那么在JDK 6或之前的HotSpot VM里：</strong>可以看到这个A.value静态字段就在InstanceKlass对象的末尾存着了。</p><pre class="language-test" data-language="test"><code class="language-test">Java object      InstanceKlass       Java mirror [ _mark  ]                          (java.lang.Class instance) [ _klass ] --&gt; [ ...          ] &lt;-\ [ fields ]     [ _java_mirror ] --+&gt; [ _mark  ]                [ ...          ]   |  [ _klass ]                [ A.value      ]   |  [ fields ]                                    \ [ klass  ]</code></pre><p><strong>而在JDK 7或之后的HotSpot VM里：</strong>可以看到这个A.value静态字段就在java.lang.Class对象的末尾存着了。</p><pre class="language-text" data-language="text"><code class="language-text">Java object      InstanceKlass       Java mirror [ _mark  ]                          (java.lang.Class instance) [ _klass ] --> [ ...          ] &lt;-\ [ fields ]     [ _java_mirror ] --+> [ _mark   ]                [ ...          ]   |  [ _klass  ]                                   |  [ fields  ]                                    \ [ klass   ]                                      [ A.value ]</code></pre><p>  <strong>所以对于HotSpot VM的对象模型，静态字段的“偏移量”就是：</strong></p><ul><li>JDK 6或之前：相对该类对应的InstanceKlass（实际上是包装InstanceKlass的klassOopDesc）对象起始位置的偏移量</li><li>JDK 7或之后：相对该类对应的java.lang.Class对象起始位置的偏移量。</li></ul><hr><p>好奇的同学可能会关心一下上面说的HotSpot VM里的InstanceKlass和java.lang.Class实例都是放哪里的呢？<br>  在JDK 7或之前的HotSpot VM里，InstanceKlass是被包装在由GC管理的klassOopDesc对象中，存放在GC堆中的所谓Permanent Generation（简称PermGen）中。<br>  从JDK 8开始的HotSpot VM则完全移除了PermGen，改为在native memory里存放这些元数据。新的用于存放元数据的内存空间叫做Metaspace，InstanceKlass对象就存在这里。<br>  至于java.lang.Class对象，它们从来都是“普通”Java对象，跟其它Java对象一样存在普通的Java堆（GC堆的一部分）里。</p><hr><p>那么如果不是HotSpot VM，而是别的JVM呢？——什么可能性都存在。总之“偏移量”什么的全看一个具体的JVM实现的内部各种细节是怎样的。</p><p>  例如说，一个JVM完全可以把所有类的所有静态字段都放在一个大数组里，每新加载一个类就从这个数组里分配一块空间来放该类的静态字段。那么此时静态字段“偏移量”可能直接就是这个静态字段的地址（假定存放它们的数组不移动的话），或者可能是基于这个数组的起始地址的偏移量。<br>  又例如说，一个JVM在实现对象模型时，可能会让指针不指向对象真正的开头，而是指向对象中间的某个位置。例如说，还是HotSpot VM那样的对象布局，指针可以选择指向很多种地方都合理：（下面还是假定64位HotSpot VM，开压缩指针）<br>  <strong>指向对象开头：</strong>_mark位于+0，这是HotSpot VM选择的做法；指向对象头的第二个字段：_klass位于+0，_mark位于-8。这种做法在某些架构上或许可以加快通过_klass做vtable dispatch的速度，所以也有合理性；<br>  <strong>指向实际字段的开头：</strong>_mark位于-12，_klass位于-4，第一个字段位于+0。这主要就是觉得字段访问可能是更频繁的操作，而潜在可能牺牲一点对象头访问的速度。<br>  Maxine VM的对象模型就可以在OHM模型和HOM模型之间选择。所谓OHM就是Origin-Header-Mixed，也就是指针指向对象头第一个字段的做法；所谓HOM就是Header-Origin-Mixed，也就是指针指向对象头之后（也就是第一个字段）的做法。<br>  还有更有趣的对象布局方式：双向布局（bidirectional layout），例如Sable VM所用的布局。一种典型的方案是把引用类型字段全部放在负偏移上，指针指向对象头，然后原始类型字段全部放在正偏移量上。这样的好处是GC在扫描对象的引用类型字段时只需要扫描一块连续的内存，非常方便。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok注解说明</title>
      <link href="/posts/95247d0a.html"/>
      <url>/posts/95247d0a.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在过往的Java项目中，充斥着太多不友好的代码：POJO的getter&#x2F;setter&#x2F;toString；异常处理；I&#x2F;O流的关闭操作等等，这些样板代码既没有技术含量，又影响着代码的美观，Lombok应运而生。Lombok是一种Java™实用工具，可用来帮助开发人员消除Java的冗长代码，尤其是对于简单的Java对象（POJO）。它通过注解实现这一目的。通过在开发环境中实现 Lombok，开发人员可以节省构建诸如hashCode()和equals()，get()和set()这样的方法。</p></blockquote><h3 id="val"><a href="#val" class="headerlink" title="val"></a>val</h3><p>  val用在局部变量前面，相当于将变量声明为 final，但是并不常用。val 可以作为<strong>局部变量</strong>声明的类型，而不必编写实际的类型。val 可以从程序的初始化表达式中推断出类型。此功能仅适用于局部变量和 foreach 循环，不适用于字段（实体类的成员变量）。同时初始化表达式是必需的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    val sets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    val lists <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    val maps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//=>相当于如下</span>    <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sets2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lists2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> maps2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h3><p>  给方法参数增加这个注解会自动在方法内对该参数进行是否为空的校验，如果为空，则抛出NullPointerException。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notNullExample</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//=>相当于</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notNullExample</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>string <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h3><p>  自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成try-finally这样的代码来关闭流。虽然自JDK7以来，原生引入了try–with–resource结构，但还是不如@Cleanup来的简洁。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Cleanup</span> <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//=>相当于</span>    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Getter-x2F-Setter"><a href="#Getter-x2F-Setter" class="headerlink" title="@Getter&#x2F;@Setter"></a>@Getter&#x2F;@Setter</h3><p>  用在属性上，再也不用自己手写setter和getter方法了，还可以指定访问范围。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setter</span><span class="token punctuation">(</span><span class="token class-name">AccessLevel</span><span class="token punctuation">.</span>PUBLIC<span class="token punctuation">)</span><span class="token annotation punctuation">@Getter</span><span class="token punctuation">(</span><span class="token class-name">AccessLevel</span><span class="token punctuation">.</span>PROTECTED<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> shap<span class="token punctuation">;</span></code></pre><h3 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h3><p>  用在类上，可以自动覆写toString方法，当然还可以加其他参数，例如@ToString(exclude&#x3D;”id”)排除id属性，或者@ToString(callSuper&#x3D;true, includeFieldNames&#x3D;true)调用父类的toString方法，包含所有属性。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> includeFieldNames <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//输出LombokDemo(super=LombokDemo@48524010, name=null, age=0)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h3><p>  用在类上，自动生成equals方法和hashCode方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"shape"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> callSuper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> shap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h3><p>  用在类上，自动生成无参构造器</p><h3 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h3><p>  用在类上，自动生成带所有属性字段的全参构造器</p><h3 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h3><p>  用在类上，自动生成把所有@NonNull属性作为参数的构造器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token punctuation">(</span>staticName <span class="token operator">=</span> <span class="token string">"of"</span><span class="token punctuation">)</span><span class="token comment">//可以通过指定staticName = “of”参数，同时生成一个返回类对象的静态工厂方法</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> shap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用静态工厂方法</span>        <span class="token class-name">LombokDemo</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"circle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//无参构造</span>        <span class="token keyword">new</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//包含所有参数</span>        <span class="token keyword">new</span> <span class="token class-name">LombokDemo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"circle"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h3><p>  注解在类上，相当于同时使用了@ToString、@EqualsAndHashCode、@Getter、@Setter和@RequiredArgsConstrutor这些注解，对于POJO类十分有用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Menu</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> shopId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> skuMenuId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> skuName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> normalizeSkuName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dishMenuId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dishName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dishNum<span class="token punctuation">;</span>    <span class="token comment">//默认阈值</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> thresHold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//新阈值</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> newThresHold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//总得分</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> totalScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h3><p>  用在类上，是@Data的不可变形式，相当于为属性添加final声明，只提供getter方法，而不提供setter方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LombokDemo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> shap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//相当于</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h3><p>  用在类、构造器、方法上，为你提供复杂的builder APIs，让你可以像如下方式一样调用Person.builder().name(“Adam Savage”).city(“San Francisco”).job(“Mythbusters”).job(“Unchained Reaction”).build();更多说明参考Builder</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Singular</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> occupations<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BuilderExample</span> test <span class="token operator">=</span> <span class="token class-name">BuilderExample</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h3><p>  自动抛受检异常，而无需显式在方法上使用throws语句</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedEncodingException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//相当于</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedEncodingException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h3><p>  用在方法上，将方法声明为同步的。并自动加锁，而锁对象是一个私有的属性$lock或$LOCK，而java中的synchronized关键字锁对象是this或类对象，锁为this或者自己的类对象上存在副作用，就是你不能阻止非受控代码去锁this或者类对象，这可能会导致竞争条件或者其它线程错误。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedDemo</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Synchronized</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//相当于</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> $LOCK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>$LOCK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Getter-lazy-x3D-true"><a href="#Getter-lazy-x3D-true" class="headerlink" title="@Getter(lazy&#x3D;true)"></a>@Getter(lazy&#x3D;true)</h3><p>  lazy版的getter  annotation， 会提高代码效率。可以在实际使用到cached的时候生成cached，同时，Lombok会自动去管理线程安全的问题，不会存在重复赋值的问题。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterLazyExample</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Getter</span><span class="token punctuation">(</span>lazy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cached <span class="token operator">=</span> <span class="token function">expensive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">expensive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 相当于如下所示:</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterLazyExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token punctuation">></span></span> cached <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getCached</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">final</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualValue <span class="token operator">=</span> <span class="token function">expensive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    value <span class="token operator">=</span> actualValue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cached <span class="token operator">:</span> actualValue<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cached <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">expensive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="log"><a href="#log" class="headerlink" title="@log"></a>@log</h3><p>  根据不同的注解生成不同类型的log对象，但是实例名称都是log，有六种可选实现类</p><ul><li><strong>@CommonsLog</strong> Creates log &#x3D; org.apache.commons.logging.LogFactory.getLog(LogExample.class);</li><li><strong>@Log</strong> Creates log &#x3D; java.util.logging.Logger.getLogger(LogExample.class.getName());</li><li><strong>@Log4j</strong> Creates log &#x3D; org.apache.log4j.Logger.getLogger(LogExample.class);</li><li><strong>@Log4j2</strong> Creates log &#x3D; org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</li><li><strong>@Slf4j</strong> Creates log &#x3D; org.slf4j.LoggerFactory.getLogger(LogExample.class);</li><li><strong>@XSlf4j</strong> Creates log &#x3D; org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRU缓存和LFU缓存</title>
      <link href="/posts/688336e6.html"/>
      <url>/posts/688336e6.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>操作系统中的页面置换算法是很多缓存机制的基础，比较经典的就有LRU和LFU算法。当缓存数据的数量未达到容量大小时，能正常存入缓存的数据结构中；当缓存的数据容量达到了最大容量，而又有新的数据需要缓存时，就得考虑如何删除已存在的缓存。LRU算法考虑删除最近最长时间未使用的缓存，而LFU考虑删除最近最少被使用的缓存。LRU的关键是看缓存数据最后一次被使用的时间，而LFU关键是看一段时间内缓存数据被使用的频率。不管是获取数据还是添加数据都叫做使用。</p></blockquote><h3 id="一、LRU（Least-Recently-Used）缓存机制"><a href="#一、LRU（Least-Recently-Used）缓存机制" class="headerlink" title="一、LRU（Least Recently Used）缓存机制"></a>一、LRU（Least Recently Used）缓存机制</h3><p>  设计和实现一个 LRU (最近最少使用) 缓存机制的数据结构。实现 LRUCache 类：</p><ul><li>LRUCache(int capacity)以正整数作为容量 capacity 初始化 LRU 缓存。</li><li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1。</li><li>void put(int key, int value)如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入改组【关键字-值】。当缓存容量达到上限时，它应该在写入数据之前删除最久未使用的数据，从而为新的数据值流出空间。</li></ul><p><strong>哈希表 + 双向链表 实现</strong><br>  LRU 缓存机制可以通过哈希表辅以双向链表实现，我们用一个哈希表和一个双向链表维护所有在缓存中的键值对。双向链表按照被使用的顺序存储了这些键值对，靠近头部的键值对是最近使用的，而靠近尾部的键值对是最久未使用的。哈希表即为普通的哈希映射（HashMap），通过缓存数据的键映射到其在双向链表中的位置。这样以来，我们首先使用哈希表进行定位，找出缓存项在双向链表中的位置，随后将其移动到双向链表的头部，即可在 O(1) 的时间内完成 get 或者 put 操作。具体的方法如下：<br>  <strong>对于 get 操作，</strong>首先判断 key 是否存在：如果 key 不存在，则返回 -1；如果 key 存在，则 key 对应的节点是最近被使用的节点。通过哈希表定位到该节点在双向链表中的位置，并将其移动到双向链表的头部，最后返回该节点的值。<br>  <strong>对于 put 操作，</strong>首先判断 key 是否存在：如果 key 不存在，使用 key 和 value 创建一个新的节点，在双向链表的头部添加该节点，并将 key 和该节点添加进哈希表中。然后判断双向链表的节点数是否超出容量，如果超出容量，则删除双向链表的尾部节点，并删除哈希表中对应的项；如果 key 存在，则与 get 操作类似，先通过哈希表定位，再将对应的节点的值更新为 value，并将该节点移到双向链表的头部。<br>  上述各项操作中，访问哈希表的时间复杂度为 O(1)，在双向链表的头部添加节点、在双向链表的尾部删除节点的复杂度也为 O(1)。而将一个节点移到双向链表的头部，可以分成「删除该节点」和「在双向链表的头部添加节点」两步操作，都可以在 O(1)O(1) 时间内完成。</p><p><strong>Java实现 LRU 缓存机制</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> cache<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cap <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token comment">//利用put方法将该数据提前</span>        <span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 删除旧的节点，新的插到头部</span>            cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cache<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 更新 map 中对应的数据</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cap <span class="token operator">==</span> cache<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//删除链表最后一个元素</span>                <span class="token class-name">Node</span> last <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>last<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//直接添加到头部</span>            cache<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*双链表节点类*/</span>    <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> key<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二、LFU（Least-Frequently-Used）缓存机制"><a href="#二、LFU（Least-Frequently-Used）缓存机制" class="headerlink" title="二、LFU（Least Frequently Used）缓存机制"></a>二、LFU（Least Frequently Used）缓存机制</h3><p>  设计并实现一个 LFU (最不经常使用) 缓存机制的数据结构，实现 LFU 类:</p><ul><li>LFUCache(int capacity) 初始化缓存的容量</li><li>int get(int key) - 如果键存在于缓存中，则获取键的值，否则返回 -1。</li><li>void put(int key, int value) - 如果键已存在，则变更其值；如果键不存在，请插入键值对。当缓存达到其容量时，则应该在插入新项之前，使最不经常使用的项无效。在此问题中，当存在平局（即两个或更多个键具有相同使用频率）时，应该去除 最近最久未使用 的键。</li></ul><p><strong>哈希表 + 平衡二叉树 实现</strong><br>  首先缓存的数据结构中需要有 cnt 表示缓存使用的频率，time 表示缓存的使用时间，key 和 value 表示缓存的键值。比较直观的想法就是我们用哈希表 key_table 以键 key 为索引存储缓存，建立一个平衡二叉树 S 来保持缓存根据 (cnt，time) 双关键字。<br>  <strong>对于 get(key) 操作，</strong>我们只要查看一下哈希表 key_table 是否有 key 这个键即可，有的话需要同时更新哈希表和集合中该缓存的使用频率以及使用时间，否则返回 -1。<br>  <strong>对于 put(key, value) 操作，</strong>首先需要查看 key_table 中是否已有对应的键值。如果有的话操作基本等同于 get(key)，不同的是需要更新缓存的 value 值。如果没有的话相当于是新插入一个缓存，这时候需要先查看是否达到缓存容量 capacity，如果达到了的话，需要删除最近最少使用的缓存，即平衡二叉树中最左边的结点，同时删除 key_table 中对应的索引，最后向 key_table 和 S 插入新的缓存信息即可。</p><p><strong>Java实现</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LFUCache</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cap<span class="token punctuation">;</span><span class="token comment">//容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> time<span class="token punctuation">;</span><span class="token comment">//时间戳</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">></span></span> key_table<span class="token punctuation">;</span>    <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> cache<span class="token punctuation">;</span>    <span class="token class-name">LFUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cap <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        key_table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key_table<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key_table<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 从哈希表和平衡二叉树中删除最近最少使用的缓存</span>                key_table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">++</span>time<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            key_table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>            cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> key_table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token operator">++</span>time<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>            cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            key_table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cap <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 如果哈希表中没有键 key，返回 -1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>key_table<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> node <span class="token operator">=</span> key_table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从哈希表中得到旧的缓存</span>        cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从平衡二叉树中删除旧的缓存</span>        <span class="token comment">// 将旧缓存更新</span>        node<span class="token punctuation">.</span>cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>time <span class="token operator">=</span> <span class="token operator">++</span>time<span class="token punctuation">;</span>        <span class="token comment">// 将新缓存重新放入哈希表和平衡二叉树中</span>        cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        key_table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> time<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">;</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cnt <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> k<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">!=</span> node<span class="token punctuation">.</span>cnt<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">!=</span> node<span class="token punctuation">.</span>time<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> node<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> val <span class="token operator">==</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> cnt<span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> time<span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> key<span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> val<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>            <span class="token keyword">return</span> cnt <span class="token operator">==</span> node<span class="token punctuation">.</span>cnt <span class="token operator">?</span> time <span class="token operator">-</span> node<span class="token punctuation">.</span>time <span class="token operator">:</span> cnt <span class="token operator">-</span> node<span class="token punctuation">.</span>cnt<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法</title>
      <link href="/posts/827ca9cd.html"/>
      <url>/posts/827ca9cd.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>排序算法是《数据结构与算法》中最基本的算法之一。这里对十大经典的排序算法做一下解释说明。不知道的道友可以来这里扫下盲。转自“菜鸟教程”。</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。常见的内部排序算法有：插入排序、希尔排序、选择排序、冒泡排序、归并排序、快速排序、堆排序、基数排序等。用下图来概括:</p><p><strong>“冒选插希归快堆、计数、基数、桶”</strong><br><img src="/posts/827ca9cd/1.png"><br><strong>名词解释：</strong></p><ul><li>n：数据规模</li><li>k：”桶”的个数</li><li>In-place：占用常数内存，不占用额外内存</li><li>Out-place：占用额外内存</li><li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li></ul><p><img src="/posts/827ca9cd/2.png"></p><p><strong>平方阶 O(n<sup>2</sup>) 排序 各类简单排序：</strong>直接插入、直接选择和冒泡排序。<br><strong>线性对数阶 O(nlog<sub>2</sub>n)) 排序：</strong> 快速排序、堆排序和归并排。<br><strong>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数：</strong> 希尔排序。<br><strong>线性阶 O(n) 排序：</strong> 基数排序，此外还有桶、箱排序。<br><strong>稳定的排序算法：</strong>冒泡排序、插入排序、归并排序和基数排序。<br><strong>不稳定的排序算法：</strong>选择排序、快速排序、希尔排序、堆排序。</p><h3 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h3><p>  冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端。<br>  作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说，并没有什么太大作用。</p><h4 id="1、算法步骤"><a href="#1、算法步骤" class="headerlink" title="1、算法步骤"></a>1、算法步骤</h4><ul><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ul><h4 id="2、动画演示"><a href="#2、动画演示" class="headerlink" title="2、动画演示"></a>2、动画演示</h4><p><img src="/posts/827ca9cd/1.gif"></p><h4 id="3、java代码示例"><a href="#3、java代码示例" class="headerlink" title="3、java代码示例"></a>3、java代码示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//标记。若为true，则表示此次循环没有进行交换</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h3><p>  选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n<sup>2</sup>) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><h4 id="1、算法步骤-1"><a href="#1、算法步骤-1" class="headerlink" title="1、算法步骤"></a>1、算法步骤</h4><ul><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ul><h4 id="2、动画演示-1"><a href="#2、动画演示-1" class="headerlink" title="2、动画演示"></a>2、动画演示</h4><p><img src="/posts/827ca9cd/2.gif"></p><h4 id="3、java代码示例-1"><a href="#3、java代码示例-1" class="headerlink" title="3、java代码示例"></a>3、java代码示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 总共要经过 N-1 轮比较</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment">// 每轮需要比较的次数 N-i</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 记录目前能找到的最小值元素的下标</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 将找到的最小值和i位置所在的值进行交换</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h3><p>  插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。</p><h4 id="1、算法步骤-2"><a href="#1、算法步骤-2" class="headerlink" title="1、算法步骤"></a>1、算法步骤</h4><ul><li>将排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面，保持稳定性）</li></ul><h4 id="2、动画演示-2"><a href="#2、动画演示-2" class="headerlink" title="2、动画演示"></a>2、动画演示</h4><p><img src="/posts/827ca9cd/3.gif"></p><h4 id="3、java代码示例-2"><a href="#3、java代码示例-2" class="headerlink" title="3、java代码示例"></a>3、java代码示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录要插入的数据</span>        <span class="token comment">// 从已经排序的序列最右边的开始比较，找到比其小的数</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tmp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 将第j-1个元素往后挪</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 存在比其小的数，插入</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> i<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="四、希尔排序"><a href="#四、希尔排序" class="headerlink" title="四、希尔排序"></a>四、希尔排序</h3><p>  希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p><blockquote><ul><li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；</li><li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；</li></ul></blockquote><p><strong>希尔排序的基本思想是：</strong>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。</p><h4 id="1、算法步骤-3"><a href="#1、算法步骤-3" class="headerlink" title="1、算法步骤"></a>1、算法步骤</h4><ul><li>选择一个增量序列 t<sub>1</sub>，t<sub>2</sub>，……，t<sub>k</sub>，其中 t<sub>i</sub> &gt; t<sub>j</sub>， t<sub>k</sub> &#x3D; 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 t<sub>i</sub>，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h4 id="2、动画演示-3"><a href="#2、动画演示-3" class="headerlink" title="2、动画演示"></a>2、动画演示</h4><p><img src="/posts/827ca9cd/4.gif"></p><h4 id="3、java代码示例-3"><a href="#3、java代码示例-3" class="headerlink" title="3、java代码示例"></a>3、java代码示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> step <span class="token operator">=</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> step <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> step <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//step相当于增量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> step<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> step<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j <span class="token operator">-=</span> step<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="五、并归排序"><a href="#五、并归排序" class="headerlink" title="五、并归排序"></a>五、并归排序</h3><p>  归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><blockquote><ul><li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）</li><li>自下而上的递归</li></ul></blockquote><p>  和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p><h4 id="1、算法步骤-4"><a href="#1、算法步骤-4" class="headerlink" title="1、算法步骤"></a>1、算法步骤</h4><ul><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li><li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li><li>重复步骤 3 直到某一指针达到序列尾；</li><li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ul><h4 id="2、动画演示-4"><a href="#2、动画演示-4" class="headerlink" title="2、动画演示"></a>2、动画演示</h4><p><img src="/posts/827ca9cd/5.gif"></p><h4 id="3、java代码示例-4"><a href="#3、java代码示例-4" class="headerlink" title="3、java代码示例"></a>3、java代码示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token comment">// 这还排个啥呀</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">sort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>left<span class="token punctuation">.</span>length <span class="token operator">+</span> right<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                right <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="六、快速排序"><a href="#六、快速排序" class="headerlink" title="六、快速排序"></a>六、快速排序</h3><p>  在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。<br>  快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好，可是这是为什么呢，我也不知道。</p><blockquote><p>《算法艺术与信息学竞赛》：快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p></blockquote><h4 id="1、算法步骤-5"><a href="#1、算法步骤-5" class="headerlink" title="1、算法步骤"></a>1、算法步骤</h4><ul><li>从数列中挑出一个元素，称为 “基准”（pivot），通常选择第一个元素;</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序；</li></ul><h4 id="2、动画演示-5"><a href="#2、动画演示-5" class="headerlink" title="2、动画演示"></a>2、动画演示</h4><p><img src="/posts/827ca9cd/6.gif"></p><h4 id="3、java代码示例1（左右挖坑互填）"><a href="#3、java代码示例1（左右挖坑互填）" class="headerlink" title="3、java代码示例1（左右挖坑互填）"></a>3、java代码示例1（左右挖坑互填）</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//快速排序。左右挖坑互填</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//默认选择第一个数位基准，也可以把其他的数交换到第一个数的位置上来作为基准</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 从右向左找第一个小于x的数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 从左向右找第一个大于等于x的数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> s<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归调用</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="4、java代码示例2（左右交换）"><a href="#4、java代码示例2（左右交换）" class="headerlink" title="4、java代码示例2（左右交换）"></a>4、java代码示例2（左右交换）</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//快速排序。左右交换</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//交换i、j位置元素</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//交换i、l位置元素</span>        s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归调用</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="5、java代码示例3（辅助函数）"><a href="#5、java代码示例3（辅助函数）" class="headerlink" title="5、java代码示例3（辅助函数）"></a>5、java代码示例3（辅助函数）</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> partitionIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> partitionIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> partitionIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token comment">// 设定基准值（pivot）</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> pivot <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="七、堆排序"><a href="#七、堆排序" class="headerlink" title="七、堆排序"></a>七、堆排序</h3><p>  堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><blockquote><ul><li>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；</li><li>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；</li></ul></blockquote><p>堆排序的平均时间复杂度为 Ο(nlogn)。</p><h4 id="1、算法步骤-6"><a href="#1、算法步骤-6" class="headerlink" title="1、算法步骤"></a>1、算法步骤</h4><ul><li>创建一个堆 H[0……n-1]；</li><li>把堆首（最大值）和堆尾互换；</li><li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置（可以理解为堆化）；</li><li>重复步骤 2，直到堆的尺寸为 1。</li></ul><h4 id="2、动画演示-6"><a href="#2、动画演示-6" class="headerlink" title="2、动画演示"></a>2、动画演示</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img src="/posts/827ca9cd/7_1.gif"></td><td><img src="/posts/827ca9cd/7_2.gif"></td></tr></tbody></table><h4 id="3、java代码示例1（递归堆化）"><a href="#3、java代码示例1（递归堆化）" class="headerlink" title="3、java代码示例1（递归堆化）"></a>3、java代码示例1（递归堆化）</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            len<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//自底向上堆化</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//其实就是保证父节点满足上面提到的堆积的性质</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> largest <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> largest <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="java代码示例2（迭代堆化）"><a href="#java代码示例2（迭代堆化）" class="headerlink" title="java代码示例2（迭代堆化）"></a>java代码示例2（迭代堆化）</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对 arr 进行拷贝，不改变参数内容</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//建堆，自底向上堆化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> child <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token punctuation">(</span>child <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//父节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> child<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>            child <span class="token operator">=</span> root<span class="token punctuation">;</span>            root <span class="token operator">=</span> <span class="token punctuation">(</span>child <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//首元素向后交换，自顶向下堆化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> root <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> root <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> root <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//原则上的左右孩子</span>            <span class="token keyword">int</span> maxChild <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>maxChild<span class="token punctuation">]</span><span class="token punctuation">)</span> maxChild <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>maxChild<span class="token punctuation">]</span><span class="token punctuation">)</span> maxChild <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxChild <span class="token operator">!=</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> root<span class="token punctuation">,</span> maxChild<span class="token punctuation">)</span><span class="token punctuation">;</span>                root <span class="token operator">=</span> maxChild<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="八、计数排序"><a href="#八、计数排序" class="headerlink" title="八、计数排序"></a>八、计数排序</h3><p>  计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。<strong>特征：</strong>当输入的元素是 n 个 0 到 k 之间的整数时，它的运行时间是 Θ(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。<br>  由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序中的算法来排序数据范围很大的数组。<br>  通俗地理解，例如有 10 个年龄不同的人，统计出有 8 个人的年龄比 A 小，那 A 的年龄就排在第 9 位,用这个方法可以得到其他每个人的位置,也就排好了序。当然，年龄有重复时需要特殊处理（保证稳定性），这就是为什么最后要反向填充目标数组，以及将每个数字的统计减去 1 的原因。</p><h4 id="1、算法步骤-7"><a href="#1、算法步骤-7" class="headerlink" title="1、算法步骤"></a>1、算法步骤</h4><ul><li>找出待排序的数组中最大和最小的元素</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</li></ul><h4 id="2、动画演示-7"><a href="#2、动画演示-7" class="headerlink" title="2、动画演示"></a>2、动画演示</h4><p><img src="/posts/827ca9cd/8.gif"></p><h4 id="3、java代码示例-5"><a href="#3、java代码示例-5" class="headerlink" title="3、java代码示例"></a>3、java代码示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  sourceArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 对 arr 进行拷贝，不改变参数内容</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 找最大最小值</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> min <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> max<span class="token punctuation">)</span> max <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 计数</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> arr<span class="token punctuation">)</span> count<span class="token punctuation">[</span>num <span class="token operator">-</span> min<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sortedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>sortedIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> min <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="九、桶排序"><a href="#九、桶排序" class="headerlink" title="九、桶排序"></a>九、桶排序</h3><p>  桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p><blockquote><ul><li>在额外空间充足的情况下，尽量增大桶的数量</li><li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中</li></ul></blockquote><p>  同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。<strong>什么时候最快：</strong>当输入的数据可以均匀的分配到每一个桶中。<strong>什么时候最慢：</strong>当输入的数据被分配到了同一个桶中。</p><h4 id="1、动画演示"><a href="#1、动画演示" class="headerlink" title="1、动画演示"></a>1、动画演示</h4><table><thead><tr><th>元素分布在桶中</th><th>元素在每个桶中排序</th></tr></thead><tbody><tr><td><img src="/posts/827ca9cd/9_1.png"></td><td><img src="/posts/827ca9cd/9_2.png"></td></tr></tbody></table><h4 id="2、java代码示例"><a href="#2、java代码示例" class="headerlink" title="2、java代码示例"></a>2、java代码示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  sourceArray<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 对 arr 进行拷贝，不改变参数内容</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 找最大最小值</span>    <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> min <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> max<span class="token punctuation">)</span> max <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> bucketCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>bucketCount<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 利用映射函数将数据分配到各个桶中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">arrAppend</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> arrIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">:</span> buckets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        bucket <span class="token operator">=</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对每个桶进行排序，这里使用了插入排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>arrIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 自动扩容，并保存数据</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrAppend</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 插入排序</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//记录要插入的数据</span>        <span class="token comment">// 从已排序的序列最右边开始比较，找到比其小的数</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> i<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="十、基数排序"><a href="#十、基数排序" class="headerlink" title="十、基数排序"></a>十、基数排序</h3><p>  基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。<br><strong>基数排序 vs 计数排序 vs 桶排序：</strong>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p><blockquote><ul><li>基数排序：根据键值的每位数字来分配桶；</li><li>计数排序：每个桶只存储单一键值；</li><li>桶排序：每个桶存储一定范围的数值；</li></ul></blockquote><p><strong>基数排序有两种方法：</strong><br>  最高位优先(Most Significant Digit first)法，简称<strong>MSD法：</strong>先按k1排序分组，同一组中记录，关键码k1相等，再对各组按k2排序分成子组，之后，对后面的关键码继续这样的排序分组，直到按最次位关键码kd对各子组排序后。再将各组连接起来，便得到一个有序序列。<br>  最低位优先(Least Significant Digit first)法，<strong>简称LSD法：</strong>先从kd开始排序，再对kd-1进行排序，依次重复，直到对k1排序后便得到一个有序序列。<br>  LSD的基数排序适用于位数小的数列，如果位数多的话，使用MSD的效率会比较好。MSD的方式与LSD相反，是由高位数为基底开始进行分配，但在分配之后并不马上合并回一个数组中，而是在每个“桶子”中建立“子桶”，将每个桶子中的数值按照下一数位的值分配到“子桶”中。在进行完最低位数的分配后再合并回单一的数组中。</p><h4 id="1、动画演示-1"><a href="#1、动画演示-1" class="headerlink" title="1、动画演示"></a>1、动画演示</h4><p><img src="/posts/827ca9cd/10.gif" alt="LSD 基数排序动图演示"></p><h4 id="2、java代码示例-1"><a href="#2、java代码示例-1" class="headerlink" title="2、java代码示例"></a>2、java代码示例</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RadixSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 对 arr 进行拷贝，不改变参数内容</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>sourceArray<span class="token punctuation">,</span> sourceArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxDigit <span class="token operator">=</span> <span class="token function">getMaxDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> maxDigit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取最高位数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getMaxDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getNumLenght</span><span class="token punctuation">(</span>maxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getMaxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxValue <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> maxValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getNumLenght</span><span class="token punctuation">(</span><span class="token keyword">long</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lenght <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span> temp <span class="token operator">=</span> num<span class="token punctuation">;</span> temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lenght<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> lenght<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> maxDigit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxDigit<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> dev <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">,</span> mod <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>mod <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> bucket <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">/</span> dev<span class="token punctuation">)</span> <span class="token operator">+</span> mod<span class="token punctuation">;</span>                counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">arrayAppend</span><span class="token punctuation">(</span>counter<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">:</span> counter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> bucket<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    arr<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 自动扩容，并保存数据</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">arrayAppend</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为2021软件精英挑战赛复赛赛后方案分享</title>
      <link href="/posts/338d62e1.html"/>
      <url>/posts/338d62e1.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>我是来自成渝赛区UESTC的选手，成渝赛区初赛排名13名，复赛最终排名12，再一次成功拿到手环。成渝赛区总报名人数全国第二，电子科技大学单校报名人数全国第一，太卷了，太卷了。鄙人十分不幸，生在成渝赛区的电子科技大学，据说成渝赛区的排名若是放在其他赛区可以有飞一般的提升，哇，我哭得好大声。<img src="/posts/338d62e1/1.png" alt="初赛正式赛排名"> <img src="/posts/338d62e1/2.png" alt="复赛正式赛排名">这里做一个复赛的赛后分享吧，对于前排大佬来说没啥用处，仅供后排抱团取暖，菜鸡互学。gitee仓库开源地址</p></blockquote><h3 id="赛题介绍"><a href="#赛题介绍" class="headerlink" title="赛题介绍"></a>赛题介绍</h3><p>  云上资源的规划和调度是云计算场景中非常重要的一个优化问题。好的优化算法能够为云运营商节约上亿的运营成本，并为客户提供更稳定、更流畅的云端体验。本次比赛主要是根据用户每天的添加、删除虚拟机请求序列，为云运营商设计总体花费成本最低的每天的迁移虚拟机、部署虚拟机、购买服务器方案，解决用户的请求。初赛时知晓用户所有天的请求序列；而复赛练习赛时为了贴合实际情况，赛题修改为只知晓后续某个固定时间窗口的请求序列，不知道所有天数的请求序列。（这个地方对于我们的代码来说，影响不大，因为我们都是一天天的处理当天请求，没有考虑用到后续天数的请求信息。这也是我们菜的原因，但我觉等大部分队伍可能都没有用到这个信息）。最终复赛正式赛时，现场临时增加需求。本来每天的迁移次数是有上限的，但是复赛正式赛时，增加了一个规则，就是允许你选择一天进行虚拟机的大迁移，也就是这一天的迁移次数没有上限要求，但只允许选择一天进行这样的大迁移。<br>  主办方提供了不同的服务器和虚拟机。<strong>服务器</strong>具有不同的型号、规格（CPU核心数，内存大小）、硬件成本、每日耗能成本。每台服务器上都有两个节点，A节点和B节点，A、B节点的拥有的资源（CPU核心数，内存大小）各占总资源的一半。比如以型号为 NV603 的服务器为例，其 A、B 两个节点分别包含 46C 和 162G 的资源，且主办方保证所给的数据中服务器的CPU 核数和内存大小均为偶数。硬件成本即为服务器一次性的购买成本；若服务器上当天部署了虚拟机，则当天具有能耗成本；若其上没有虚拟机，则当天不耗能。<strong>虚拟机</strong>具有不同的型号、规格（CPU核心数，内存大小）、部署方式。若虚拟机是单节点部署，则其可部署在服务器的任一A、B节点上；若其为双节点部署，则其需的一半资源部署在A节点上，另一半资源部署在同一服务器的B节点上。当然所部署的虚拟机不能超过服务器上的资源容量。</p><p><img src="/posts/338d62e1/3.png" alt="服务器类型"><br><img src="/posts/338d62e1/4.png" alt="虚拟机类型"></p><h4 id="资源规划和调度"><a href="#资源规划和调度" class="headerlink" title="资源规划和调度"></a>资源规划和调度</h4><ul><li><strong>容量约束：</strong>服务器可以用来容纳用户的虚拟机，但是服务器上的任意一个节点(A和 B)上的资源负载(CPU 和内存)均不能超过其容量上限。</li><li><strong>请求类型：</strong>用户的请求共分为两种类型：创建请求和删除请求。创建请求表示用户向公有云平台提交的一个创建虚拟机的请求；删除请求表示用户提交的删除一台之前创建的虚拟机的请求。</li><li><strong>请求序列：</strong>由一系列请求构成的序列。题目会给出接下来若干天中每一天用户的请求序列，根据每天的请求序列，你需要进行相应的资源规划和调度。</li><li><strong>数据中心扩容：</strong>在得知了一天的请求序列后，你可以在实际进行调度前进行一次数据中心扩容。即购买一些新的服务器来容纳后续用户请求的虚拟机，同时你需要付出所购买服务器相应的硬件成本。你需要指定购买哪些类型的服务器以及购买的数量。初始时你没有任何服务器。</li><li><strong>虚拟机迁移：</strong>在完成扩容后，在处理每一天的新请求之前，你还可以对当前存量虚拟机进行一次迁移，即把虚拟机从一台服务器迁移至另一台服务器。对于单节点部署的虚拟机，将其从一台服务器的 A 节点迁移至 B 节点(或反之)也是允许的。迁移的目的服务器和节点必须有足够的资源容纳所迁移的虚拟机。迁移的虚拟机总量不超过当前存量虚拟机数量的千分之五。即假设当前有 n 台存量虚拟机，每天你可以迁移的虚拟机总量不得超过 5n&#x2F;10000 向下取整。初赛时这个上限是 5n&#x2F;10000，复赛时这个上限提高到了3n&#x2F;100，也就是说每日可迁移的虚拟机数量提高了。</li><li><strong>部署虚拟机：</strong>在完成扩容和迁移之后，你需要按顺序处理当天所有的新请求。对于每一个创建虚拟机的新请求，你要为虚拟机指定一台服务器进行部署。若虚拟机是单节点部署的，你还需要指明部署在服务器的 A 节点还是 B 节点。处理请求的过程中，任意一台服务器上每个节点容纳的虚拟机资源总和都不能超出节点本身的资源容量（指 CPU 和内存两个维度）。</li><li><strong>未知请求序列：</strong>在初赛中，我们面对的是提前知晓了未来所有用户请求序列的场景，这在实际中是很难作到的。现实场景中，我们往往只能预测后续较短的一段时间内用户可能的请求序列。所以在复赛中，你需要面对这种存在未知的场景，进行云上的资源规划和调度。</li></ul><h4 id="输入示例："><a href="#输入示例：" class="headerlink" title="输入示例："></a>输入示例：</h4><p><img src="/posts/338d62e1/5.png" alt="输入示例"></p><blockquote><ul><li>上述示例中，第 1 行表示共有两种类型的服务器可供采购，第 2 和第 3 行分别描述这两种类型服务器的详细信息。</li><li>第 4 行表示共有两种类型的虚拟机提供给用户购买，第 5 和第 6 行分别描述这两种类型的虚拟机的详细信息。</li><li>第 7 行表示共有三天的用户请求序列。</li><li>第 8 行表示第一天的用户请求序列中共有两条请求，第 9 和第 10 行分别描述这两条请求。</li><li>第 11-13 行描述第二天的用户请求。</li><li>第 14-17 行描述第三天的用户请求。</li></ul></blockquote><h4 id="输出示例："><a href="#输出示例：" class="headerlink" title="输出示例："></a>输出示例：</h4><p><img src="/posts/338d62e1/6.png" alt="输出示例"></p><blockquote><ul><li>上述示例中，第 1 行表示在第一天购买两种类型的服务器，第 2 和第 3 行分别表示购买的服务器型号和数量。</li><li>第 4 行表示迁移 0 台虚拟机。若有迁移，则格式为**(虚拟机 ID, 目的服务器 ID)<strong>或</strong>(虚拟机 ID, 目的服务器 ID, 目的服务器节点)**。例如(3, 1)表示将 ID 为 3 的虚拟机从当前所在服务器迁移至 ID 为 1 的服务器，该虚拟机必须是双节点部署的；(4, 1, A)表示将 ID 为 4 的虚拟机从当前所在服务器迁移至 ID 为 1 的服务器的 A 节点，该虚拟机必须是单节点部署的。</li><li>第 5 和第 6 行表示第一天创建的两个虚拟机分别部署到服务器 0 的 A 节点和服务器 0 的 B 节点。</li><li>第 7-12 行描述第二天的决策信息</li></ul></blockquote><h3 id="总体处理流程"><a href="#总体处理流程" class="headerlink" title="总体处理流程"></a>总体处理流程</h3><p><strong>变量数据结构定义（c++实现）</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//服务器结构</span><span class="token keyword">struct</span> <span class="token class-name">Server</span><span class="token punctuation">&#123;</span>string type<span class="token punctuation">;</span><span class="token keyword">int</span> cpuCore<span class="token punctuation">,</span> memSize<span class="token punctuation">;</span><span class="token comment">//这个值保持不变</span><span class="token keyword">int</span> cpuA<span class="token punctuation">,</span> cpuB<span class="token punctuation">,</span> memA<span class="token punctuation">,</span> memB<span class="token punctuation">,</span> serverCost<span class="token punctuation">,</span> powerCost<span class="token punctuation">;</span><span class="token keyword">int</span> rest<span class="token punctuation">;</span><span class="token comment">//空参构造器</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//带参构造器</span><span class="token function">Server</span><span class="token punctuation">(</span>string type<span class="token punctuation">,</span> <span class="token keyword">int</span> cpuCore<span class="token punctuation">,</span> <span class="token keyword">int</span> memSize<span class="token punctuation">,</span> <span class="token keyword">int</span> sCost<span class="token punctuation">,</span> <span class="token keyword">int</span> pCost<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cpuCore</span><span class="token punctuation">(</span>cpuCore<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">memSize</span><span class="token punctuation">(</span>memSize<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">serverCost</span><span class="token punctuation">(</span>sCost<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">powerCost</span><span class="token punctuation">(</span>pCost<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>cpuA <span class="token operator">=</span> cpuCore <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>cpuB <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>cpuA<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>memA <span class="token operator">=</span> memSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>memB <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>memA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//虚拟机结构</span><span class="token keyword">struct</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">&#123;</span>string type<span class="token punctuation">;</span><span class="token keyword">int</span> cpuCore<span class="token punctuation">,</span> memSize<span class="token punctuation">,</span> isDual<span class="token punctuation">;</span><span class="token comment">//空参构造器</span><span class="token function">VirtualMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//带参构造器</span><span class="token function">VirtualMachine</span><span class="token punctuation">(</span>string type<span class="token punctuation">,</span> <span class="token keyword">int</span> cpuCore<span class="token punctuation">,</span> <span class="token keyword">int</span> memSize<span class="token punctuation">,</span> <span class="token keyword">int</span> isDual<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cpuCore</span><span class="token punctuation">(</span>cpuCore<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">memSize</span><span class="token punctuation">(</span>memSize<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">isDual</span><span class="token punctuation">(</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//请求结构</span><span class="token keyword">struct</span> <span class="token class-name">Request</span><span class="token punctuation">&#123;</span>string type<span class="token punctuation">;</span><span class="token comment">//add or del</span>string vmType<span class="token punctuation">,</span> vmId<span class="token punctuation">;</span><span class="token keyword">int</span> vmCpu<span class="token punctuation">,</span> vmMem<span class="token punctuation">,</span> isDual<span class="token punctuation">;</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//空参构造器</span><span class="token function">Request</span><span class="token punctuation">(</span>string type<span class="token punctuation">,</span> string vmType<span class="token punctuation">,</span> string vmId<span class="token punctuation">,</span> <span class="token keyword">int</span> vmCpu<span class="token punctuation">,</span> <span class="token keyword">int</span> vmMem<span class="token punctuation">,</span> <span class="token keyword">int</span> isDual<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmType</span><span class="token punctuation">(</span>vmType<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmId</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmCpu</span><span class="token punctuation">(</span>vmCpu<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmMem</span><span class="token punctuation">(</span>vmMem<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">isDual</span><span class="token punctuation">(</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//当其为一条删除请求时，只有其vmId有效，其他的数据别访问，会出错。</span><span class="token function">Request</span><span class="token punctuation">(</span>string type<span class="token punctuation">,</span> string vmId<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmId</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/******* 全局变量 ***********************/</span><span class="token keyword">int</span> reqDays<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> windowDays<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Server<span class="token operator">></span> svInfos<span class="token punctuation">;</span>              <span class="token comment">//原始的服务器信息</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> VirtualMachine<span class="token operator">></span> vmInfos<span class="token punctuation">;</span>      <span class="token comment">//原始的虚拟机信息</span>vector<span class="token operator">&lt;</span>Server<span class="token operator">></span> svCostServers<span class="token punctuation">;</span>                       <span class="token comment">//按硬件价格排序服务器（小 --> 大）</span>vector<span class="token operator">&lt;</span>Server<span class="token operator">></span> pwCostServers<span class="token punctuation">;</span>                       <span class="token comment">//按每日能耗排序服务器（小 --> 大）</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Request<span class="token operator">>></span> daysReqs<span class="token punctuation">;</span>                   <span class="token comment">//所有的请求</span>vector<span class="token operator">&lt;</span>Server<span class="token operator">></span> svResources<span class="token punctuation">;</span>                         <span class="token comment">//购买的服务器</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DeployInfo</span> <span class="token expression">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>                      </span><span class="token comment">//虚拟机的部署信息。&#123;服务器编号, 占用cpu, 占用mem, maybe 部署节点&#125;。长度为3->双节点部署;当长度为4->单节点部署（0->A, 1->B）</span></span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> DeployInfo<span class="token operator">></span> vmDeployInfos<span class="token punctuation">;</span>    <span class="token comment">//记录虚拟机运行在哪台服务器上(key=虚拟机id(不是类型), value=&#123;服务器编号,占用cpu,占用mem,部署节点&#125;)</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> svRunVms<span class="token punctuation">;</span>                    <span class="token comment">//记录已购的每台服务器上的各自运行的虚拟机Id。长度和已购服务器的数量对应</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> svRunVmsNumber<span class="token punctuation">;</span>                         <span class="token comment">//记录已购的每台服务器上的各自运行的虚拟机数量（看似显得多余，其实是为了方便后续的处理）。长度和已购服务器的数量对应</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> purchase_info<span class="token punctuation">;</span><span class="token comment">//每天的购买信息</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> migrate_info<span class="token punctuation">;</span><span class="token comment">//每天的迁移信息</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> deploy_info<span class="token punctuation">;</span><span class="token comment">//每天的部署信息</span></code></pre><p>  先读取所有的数据，构建所有的服务器和虚拟机信息（<strong>svInfos</strong>、<strong>vmInfos</strong>），并将服务器按照硬件价格和每日耗能排序（<strong>svCostServer</strong>、<strong>pwCostServer</strong>）。然后依次读入所有天的请求，存入 <strong>daysReqs</strong> 中（复赛中不能读入所有天的数据，只能读到指定时间窗口的后续数据），后续可以通过 <strong>dayReqs[day]</strong> 从中取出指定天的请求序列数据。数据处理完成后，便开始依次处理每天的请求序列（包括添加虚拟机和删除虚拟机）。我们队伍的思路是，每天开始处理前，先将当天的请求序列排个序，按照虚拟机所需的资源总量（cpu + mem）从大到小排序，而且把单双节点请求分开，虚拟机核内比（cpu&#x2F;mem）太小或太大的都单独考虑，而且还有一个很重的就是这个排序是分段排序，以删除请求分段。所以在每一段内的顺序是：单节点请求在前面，然后是双节点请求，最后是核内比很奇葩排在最后。分段排序是为了保证删除请求所在序列中的位置固定不变，避免后面处理时出现错误，因为某个已部署的虚拟机删除后，其腾出来的资源就可以部署其他的虚拟机了。如果你问我<strong>为什么要把单节点、双节点、奇葩节点单独弄出来排序？而且单节点还得放前面，奇葩节点放后面？</strong>那我只能说，这是我们调参调出来的结果，确实这样做对于我们的策略来说最后的成本最低。代码中还有一些地方也是用了一些 magic number，不要惊讶，都是一步步调参调出来的。<br>  排序完成后，便可以正式开始处理当天的请求了。顺序遍历排序后的虚拟机请求，若其为删除请求，那就找到其之前部署到的服务器，删除其部署信息，并修改服务器的剩余资源即可。若其为添加请求，则遍历目前所购买的服务器，判断该虚拟机是否能部署到该服务器上，后面会说如何判断。若能部署，则直接部署到该服务器上即可，即修改对应服务器上的剩余资源量，记录该虚拟机的一些部署信息。若已购买的服务器上都不能部署该虚拟机请求，则把该虚拟机请求记录下来，后续统一为所有不能部署的虚拟机购买服务器进行单独的部署，也就是这部分记录下来的暂时无法部署的虚拟机会全部部署到当日新购买的服务器上。置于这个购买的策略后面会讲到，其实也不难，我们选择的是一个贪心购买的策略。因为试了很多策略，发现这个策略对于我们来说最好。当然购买时还有一个很神奇的骚操作，后面再讲吧。<br>  以上讲了我们的部署和购买的过程，其实还有个很重要的迁移过程。赛题要求是，先购买，在迁移，在部署。我们队伍将迁移操作放到了最前面，即不管三七二十一，每天一上来先迁移，尽量腾空服务器出来，这样可以减少耗能成本，然后再部署当日请求，购买服务器部署剩余请求。但是我们必须得考虑输出信息的顺序，因为这点也很重要，按要求，先输出购买信息，再输出迁移信息，最后输出部署信息。只要保证这个输出的顺序是正确的就行。有人可能会问，我先迁移后，后面部署时会把本来腾空的服务器又占用了，岂不是还是会有耗能成本。这点确实是这样，但是，如果是先部署再迁移，那么根据题意要求，迁移时不能考虑新部署的虚拟机，因为赛题要求迁移时考虑的虚拟机是当前存量的虚拟机，那么这样考虑的东西变多了，而且也不好处理输出，我们想的是怎么简单怎么来。所以就把迁移直接放到了每一天的开始，这样的话，当前存量的虚拟机就是当前已部署的虚拟机，没有什么歧义；而且我们发现所提供的练习数据中，后面的很多天中的请求几乎都是删除请求，也就是说，在后面几天里，迁移之后，本来腾空的虚拟机当天也基本不怎么会有虚拟机再部署上来了，达到降低能耗成本的目的。这也是我们选择先迁移的整个心路历程。至于如何进行迁移，哪台虚拟机该迁移到哪台服务器上，请听后续的分解。这里只是给出了整个流程：<strong>排序，迁移，部署，购买部署。</strong></p><h3 id="部署策略"><a href="#部署策略" class="headerlink" title="部署策略"></a>部署策略</h3><p>  当一个添加虚拟机的请求到来时，如何判断用哪个已购买的服务器去部署这个虚拟机呢。这里我们队伍做了很多尝试，比如先将已购的服务器排个序，按照服务器上的剩余资源量（A、B节点剩余cpu和mem的总量和）从小到大排序，然后找到第一个能装下该虚拟机的服务器，就将该虚拟机部署到该服务器上。这样做，确实也是最简单的最容易想到的方法，但是效果不咋地。我们还尝试了一些其他的方法，这里就不一一说明了，直接说一说我们最终的方案。不用对已买服务器进行排序，而是直接挨个遍历所以已买服务器，找到该虚拟机能部署到的（即满足资源要求）且部署之后该服务器剩余资源最小，且部署后该服务器A、B节点不失衡的服务器进行部署，如果找不到这样服务器，则把这个虚拟机请求记录下来，后续统一进行购买部署处理。一开始我们其实并没有想这么多，只想到了部署之后若该服务器剩余资源最小，那么我们就部署到该服务器上。但后来我们考虑了平衡部署，也就是说如果这个虚拟机部署到这个服务器上后，这个服务器上剩余的CPU资源和mem资源比例失衡了，那我们就不要部署到这样的服务器上。这个失衡的比例我们设置成了 <strong>ratio&lt;0.13 或 ratio&gt;7.5</strong> 都算作是失衡了，反正这个参数我们调了很久才调出来一个比较满意的值（其中ratio &#x3D; 剩余CPU&#x2F;剩余MEM）。这个过程讲出来看似很简单，其实实现起来考虑的东西还是比较多的，因为要考虑虚拟机的单双节点不同部署方式的差异和服务器A、B资源不同剩余量的情况。所以就是一两句话也说不清楚，但我们确实是考虑了平衡部署后，效果有了很大的提升。具体步骤还得仔细参考我们的代码中 <strong>findBestServer()</strong> 这个函数。这个比赛主要不是比时间，而是看最后谁提供的方案成本更低，所以可以疯狂遍历，并且我们发现，这个遍历也花费不了所少时间。比赛要求在90内得出结果，我们的时间花费排名应该算是比较靠前的，相比于其他队伍。所以时间并不是阻碍我们上分的主要因素，哎，还是方案太菜了，进不了决赛。具体细节请参考我们代码中的 <strong>handleOneDayRequests()函数</strong>。</p><h3 id="购买策略"><a href="#购买策略" class="headerlink" title="购买策略"></a>购买策略</h3><p>  前面说到，我们会统一考虑为部署不了的虚拟机购买服务器。我们用一个临时变量专门记录当天新买的服务器，然后做好编号映射（为了满足输出要求，据说前期很多队伍掉到了这个坑里，没有做编号映射。比如你买的时候是按ABCABC这些类型买的，那么你默认他们的编号依次是123456，但是赛题要求的输出是AABBCC，编号依次是123456，这个时候你若是没有做好编号映射，判题系统就会给你判错）后更新到全局的已购服务器列表中。我们依次遍历收集到的前期无法部署的虚拟机，看当天新买的服务器中是否有服务器能部署上这台虚拟机，这个判断标准类似于上面部署策略中使用的 <strong>findBestServer()</strong> 函数，但是在平衡部署的判断上略有不同，所以我们单独又写了一个 <strong>findBestServer()</strong> 函数来在这里做判断。如果在当日新买的服务器中能找到能部署的服务器，那也就可以直接部署了；如果找不到能部署的服务器，那就以这个虚拟机请求为准去考虑如何购买服务器来。前面我们将服务器种类按照硬件价格和每日耗能排过序（<strong>svCostServer</strong>、<strong>pwCostServer</strong>）。我们在购买时，设定了一个算是超参数的东西，一个天数 <strong>T &#x3D; 333</strong>。当前处理的请求天数低于这个参数值时，我们按照每日耗能排序去购买，当前处理的请求天数高于这个参数值时，我们按照硬件价格排序去购买。为什么，大家可以想一想，其实也很简单。你先买的服务器毕竟要一直用到最后一天，得让他们的耗能低才好；后面买的服务器耗电可能就不是主要考虑因素了，怎么买便宜就怎么来。置于为什么我们将这个值设置成了 333，那也是调参调出来的结果，所以这玩意就很神奇。当我们购买时，其实也并不是说只要这个服务器能放下这个虚拟机就购买，我们还是得为后续的虚拟机稍微考虑一下，所以我们购买时规定这台服务器要能装下 <strong>1.32倍</strong> 的该虚拟机资源才购买；如果所有的都不能放下 <strong>1.32倍</strong>，那就降低一点设为 <strong>1.2倍</strong>；如果还是不能放下，那就回归本质到 <strong>1倍</strong>，主办方已说明每台虚拟机至少有一台服务器能装下。初赛时我们就是靠着这个倍数购买上的分，<strong>在最后千钧一发之际，从三十几名飙到了十几名，成功进入复赛</strong>。这个想法也是我们队员提出来的，感觉还挺神奇的，估计很多队伍都没敢这么去尝试，都想着最低能装下该虚拟机就行了，但确实考虑倍数购买效果提升很大，至少对于我们的这份代码来说，提升很大。直接决定了我们能不能进复赛。具体细节请参考我们代码中的 <strong>buyServersForReqs()函数</strong>。</p><h3 id="迁移策略"><a href="#迁移策略" class="headerlink" title="迁移策略"></a>迁移策略</h3><p>  迁移这块也是很复杂的，我们前面也讲到了我们队伍将迁移拿到了最前面进行处理。每日的虚拟机迁移次数是有上限的，且复赛和初赛中这个上限还不一样，复赛中提高了这个上限值，允许迁移的次数变多了。首先我们将当前已购买的服务器进行了排序，按照其上剩余的资源量从大到小进行排序，第二序为耗电成本，整体迁移方向是<strong>剩余资源量大的服务器上的虚拟机往剩余资源量小的服务器上迁移</strong>，尽量多的空出服务器来，节约耗电成本。如果单考虑这一点，效果不是很好，肯定是进不了复赛的。因为这个迁移的策略对最终的结果影响很大，大于能<strong>节约 2 亿左右</strong>的成本，直接影响你的排名。我们最后的优化，主要就是放在了迁移这块。按照我们一开始的想法，<strong>剩余资源量大的服务器上的虚拟机往剩余资源量小的服务器上迁移</strong>，我们实现了一版出来，每次依次从前面的服务器上依次取出其上部署的虚拟机，往后面能迁移到的服务器且迁移后剩余资源量最少的服务器上迁移，直到到达当日最大迁移次数或不能再迁移。这个方法不仅速度慢，迁移效果还不是很好，达不到最大迁移次数，严重影响效果，而且还经常超时。我们在这个地方卡了很久，掉了很多头发，最终一步步优化，才走出了超时这个坑。最终我们的迁移策略整体方向没有变，但是中间进行了很多优化，使得效果提升。先是一样的，将当前已购买的服务器按剩余资源量从大到小排序，然后我们将今日即将要删除的虚拟机统计了一下（因为我们知道当日的请求），每次依次从前面的服务器上依次取出其上部署的虚拟机。<strong>如果</strong>该虚拟机即将在当天被删除，那么就不考虑当台虚拟机的迁移；<strong>如果</strong>该虚拟机是才迁移到这台服务器上来的，也不考虑该虚拟机的迁移；<strong>如果</strong>该虚拟机无法找到合适的迁移目标服务器，也不迁移；<strong>其他情况</strong>下该虚拟机能正常迁移，动态更新服务器上的剩余资源量。<strong>最重要的一点来了</strong>，如果该台服务器上目前遇到了一台不能迁移的虚拟机，那么这台服务器当天的耗能成本肯定是不能被节省下来了，因为它至少有这么一台不能迁移的虚拟机运行着。那么一旦出现这种情况，我们就记录下该台服务器，并且该台服务器上余下的虚拟机也不考虑去迁移了，直接考虑下一台服务器上虚拟机的迁移。后续我们考虑其他的虚拟机的迁移服务器目标时，将这些记录下来的服务器也当做目标来考虑，因为这些服务器反正是开机状态，不能省电了，那我们就得把它利用起来。<strong>还有一点重要的就是，</strong>如果这台服务器上的装载的资源很满，那其上的虚拟机也就不考虑迁移了，我们用一个衡量标准<strong>（资源剩余量 &#x2F; 资源总容量 &lt; 0.018）</strong>来判断装载率。我们一点点实现了上面的所有想法，最后发现确实效果不错，时间大大缩短了，效果大大增加了，不过这个过程确实很复杂，还有很多细节需要处理，实现过程中又掉了很多头发。具体细节请参考我们代码中的 <strong>migrate()函数</strong>。</p><h3 id="赛后感受"><a href="#赛后感受" class="headerlink" title="赛后感受"></a>赛后感受</h3><ul><li>个人还是比较喜欢该类比赛，能为企业解决实际问题</li><li>细节决定成败，代码编写还是要规范，命名也最好注意一下，简明扼要</li><li>有队友还是好得多，不用孤军奋战</li><li>一个好赛区也很重要，成渝赛区简直不要太卷，但是莫得办法</li><li>思想碰撞，交流沟通也很重要</li><li>快速搭建出框架，后续不断优化上分</li></ul><h3 id="开源代码"><a href="#开源代码" class="headerlink" title="开源代码"></a>开源代码</h3><p>仅供参考，确实有点复杂，若没有参加比赛理解题意，很难看懂。一下是复赛练习赛时我们队伍的最终代码，也可访问我的 <a href="https://gitee.com/yczlab/hua-wei_2021">开源仓库</a>，查看所有版本的代码。</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//服务器结构</span><span class="token keyword">struct</span> <span class="token class-name">Server</span><span class="token punctuation">&#123;</span>string type<span class="token punctuation">;</span><span class="token keyword">int</span> cpuCore<span class="token punctuation">,</span> memSize<span class="token punctuation">;</span><span class="token comment">//这个值保持不变</span><span class="token keyword">int</span> cpuA<span class="token punctuation">,</span> cpuB<span class="token punctuation">,</span> memA<span class="token punctuation">,</span> memB<span class="token punctuation">,</span> serverCost<span class="token punctuation">,</span> powerCost<span class="token punctuation">;</span><span class="token keyword">int</span> rest<span class="token punctuation">;</span><span class="token comment">//空参构造器</span><span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//带参构造器</span><span class="token function">Server</span><span class="token punctuation">(</span>string type<span class="token punctuation">,</span> <span class="token keyword">int</span> cpuCore<span class="token punctuation">,</span> <span class="token keyword">int</span> memSize<span class="token punctuation">,</span> <span class="token keyword">int</span> sCost<span class="token punctuation">,</span> <span class="token keyword">int</span> pCost<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cpuCore</span><span class="token punctuation">(</span>cpuCore<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">memSize</span><span class="token punctuation">(</span>memSize<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">serverCost</span><span class="token punctuation">(</span>sCost<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">powerCost</span><span class="token punctuation">(</span>pCost<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>cpuA <span class="token operator">=</span> cpuCore <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>cpuB <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>cpuA<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>memA <span class="token operator">=</span> memSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token operator">-></span>memB <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>memA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//虚拟机结构</span><span class="token keyword">struct</span> <span class="token class-name">VirtualMachine</span><span class="token punctuation">&#123;</span>string type<span class="token punctuation">;</span><span class="token keyword">int</span> cpuCore<span class="token punctuation">,</span> memSize<span class="token punctuation">,</span> isDual<span class="token punctuation">;</span><span class="token comment">//空参构造器</span><span class="token function">VirtualMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//带参构造器</span><span class="token function">VirtualMachine</span><span class="token punctuation">(</span>string type<span class="token punctuation">,</span> <span class="token keyword">int</span> cpuCore<span class="token punctuation">,</span> <span class="token keyword">int</span> memSize<span class="token punctuation">,</span> <span class="token keyword">int</span> isDual<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">cpuCore</span><span class="token punctuation">(</span>cpuCore<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">memSize</span><span class="token punctuation">(</span>memSize<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">isDual</span><span class="token punctuation">(</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//请求结构</span><span class="token keyword">struct</span> <span class="token class-name">Request</span><span class="token punctuation">&#123;</span>string type<span class="token punctuation">;</span><span class="token comment">//add or del</span>string vmType<span class="token punctuation">,</span> vmId<span class="token punctuation">;</span><span class="token keyword">int</span> vmCpu<span class="token punctuation">,</span> vmMem<span class="token punctuation">,</span> isDual<span class="token punctuation">;</span><span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//空参构造器</span><span class="token function">Request</span><span class="token punctuation">(</span>string type<span class="token punctuation">,</span> string vmType<span class="token punctuation">,</span> string vmId<span class="token punctuation">,</span> <span class="token keyword">int</span> vmCpu<span class="token punctuation">,</span> <span class="token keyword">int</span> vmMem<span class="token punctuation">,</span> <span class="token keyword">int</span> isDual<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmType</span><span class="token punctuation">(</span>vmType<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmId</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmCpu</span><span class="token punctuation">(</span>vmCpu<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmMem</span><span class="token punctuation">(</span>vmMem<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">isDual</span><span class="token punctuation">(</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//当其为一条删除请求时，只有其vmId有效，其他的数据别访问，会出错。</span><span class="token function">Request</span><span class="token punctuation">(</span>string type<span class="token punctuation">,</span> string vmId<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">vmId</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/******* 全局变量 ***********************/</span><span class="token keyword">int</span> reqDays<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> windowDays<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Server<span class="token operator">></span> svInfos<span class="token punctuation">;</span>              <span class="token comment">//原始的服务器信息</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> VirtualMachine<span class="token operator">></span> vmInfos<span class="token punctuation">;</span>      <span class="token comment">//原始的虚拟机信息</span>vector<span class="token operator">&lt;</span>Server<span class="token operator">></span> svCostServers<span class="token punctuation">;</span>                       <span class="token comment">//按硬件价格排序服务器（小 --> 大）</span>vector<span class="token operator">&lt;</span>Server<span class="token operator">></span> pwCostServers<span class="token punctuation">;</span>                       <span class="token comment">//按每日能耗排序服务器（小 --> 大）</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Request<span class="token operator">>></span> daysReqs<span class="token punctuation">;</span>                   <span class="token comment">//所有的请求</span>vector<span class="token operator">&lt;</span>Server<span class="token operator">></span> svResources<span class="token punctuation">;</span>                         <span class="token comment">//购买的服务器</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DeployInfo</span> <span class="token expression">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>                      </span><span class="token comment">//虚拟机的部署信息。&#123;服务器编号, 占用cpu, 占用mem, maybe 部署节点&#125;。长度为3->双节点部署;当长度为4->单节点部署（0-A,1->B）</span></span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> DeployInfo<span class="token operator">></span> vmDeployInfos<span class="token punctuation">;</span>    <span class="token comment">//记录虚拟机运行在哪台服务器上(key=虚拟机id(不是类型), value=&#123;服务器编号,占用cpu,占用mem,部署节点&#125;)</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> svRunVms<span class="token punctuation">;</span>                    <span class="token comment">//记录已购的每台服务器上的各自运行的虚拟机Id。长度和已购服务器的数量对应</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> svRunVmsNumber<span class="token punctuation">;</span>                         <span class="token comment">//记录已购的每台服务器上的各自运行的虚拟机数量（看似显得多余，其实是为了方便后续的处理）。长度和已购服务器的数量对应</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> purchase_info<span class="token punctuation">;</span><span class="token comment">//每天的购买信息</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> migrate_info<span class="token punctuation">;</span><span class="token comment">//每天的迁移信息</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> deploy_info<span class="token punctuation">;</span><span class="token comment">//每天的部署信息</span><span class="token comment">//提交时可能用不到的变量</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">INPUT_REDIRECTION_1</span> <span class="token string">"training-data/training-1.txt"</span>  <span class="token comment">//输入重定向</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">INPUT_REDIRECTION_2</span> <span class="token string">"training-data/training-2.txt"</span>  <span class="token comment">//输入重定向</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">define</span> <span class="token macro-name">OUTPUT_REDIRECTION</span> <span class="token string">"result.txt"</span>                     <span class="token comment">//输出重定向</span></span><span class="token keyword">long</span> <span class="token keyword">long</span> SERVERCOST<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> POWERCOST<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> TOTALCOST<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//各种成本</span><span class="token keyword">int</span> MIGRATE_NUMBER<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> TOTAL_MIGRATE<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                       <span class="token comment">//迁移数量</span><span class="token keyword">long</span> <span class="token keyword">long</span> SC<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> PC<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> TC<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                                  <span class="token comment">//两份数据的成本</span><span class="token comment">/************************************************/</span><span class="token comment">/****************** 读数据构建各种类型的 服务器 和 虚拟机 ********************/</span><span class="token keyword">void</span> <span class="token function">readServer</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>serverType<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>cpuCore<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>memSize<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>serverCost<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>powerCost<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string _serverType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>serverType<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> _serverType <span class="token operator">+=</span> serverType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> _cpuCore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> _memSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> _serverCost<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> _powerCost<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cpuCore<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> _cpuCore <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>_cpuCore <span class="token operator">+</span> cpuCore<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>memSize<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> _memSize <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>_memSize <span class="token operator">+</span> memSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>serverCost<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> _serverCost <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>_serverCost <span class="token operator">+</span> serverCost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>powerCost<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> _powerCost <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>_powerCost <span class="token operator">+</span> powerCost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>svInfos<span class="token punctuation">[</span>_serverType<span class="token punctuation">]</span> <span class="token operator">=</span> Server<span class="token punctuation">&#123;</span>_serverType<span class="token punctuation">,</span> _cpuCore<span class="token punctuation">,</span> _memSize<span class="token punctuation">,</span> _serverCost<span class="token punctuation">,</span> _powerCost<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">readVm</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>vmType<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>cpuCore<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>memSize<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string _vmType <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vmType<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> _vmType <span class="token operator">+=</span> vmType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> _cpuCore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> _memSize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> _isDual<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>cpuCore<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> _cpuCore <span class="token operator">=</span> _cpuCore<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> cpuCore<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>memSize<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> _memSize <span class="token operator">=</span> _memSize<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> memSize<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isDual<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> _isDual <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    vmInfos<span class="token punctuation">[</span>_vmType<span class="token punctuation">]</span> <span class="token operator">=</span> VirtualMachine<span class="token punctuation">&#123;</span>_vmType<span class="token punctuation">,</span> _cpuCore<span class="token punctuation">,</span> _memSize<span class="token punctuation">,</span> _isDual<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">readServerAndVmInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> svNum<span class="token punctuation">;</span><span class="token comment">//服务器数量</span>string type<span class="token punctuation">,</span> cpuCore<span class="token punctuation">,</span> memSize<span class="token punctuation">,</span> serverCost<span class="token punctuation">,</span> powerCost<span class="token punctuation">,</span> isDual<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>svNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>type<span class="token operator">>></span>cpuCore<span class="token operator">>></span>memSize<span class="token operator">>></span>serverCost<span class="token operator">>></span>powerCost<span class="token punctuation">;</span><span class="token function">readServer</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> cpuCore<span class="token punctuation">,</span> memSize<span class="token punctuation">,</span> serverCost<span class="token punctuation">,</span> powerCost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> vmNum<span class="token punctuation">;</span><span class="token comment">//虚拟机数量</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>vmNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vmNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cin<span class="token operator">>></span>type<span class="token operator">>></span>cpuCore<span class="token operator">>></span>memSize<span class="token operator">>></span>isDual<span class="token punctuation">;</span>        <span class="token function">readVm</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> cpuCore<span class="token punctuation">,</span> memSize<span class="token punctuation">,</span> isDual<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//复制一份排序。</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>pair<span class="token operator">:</span>svInfos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>svCostServers<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>pwCostServers<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//硬件价格排序</span><span class="token function">sort</span><span class="token punctuation">(</span>svCostServers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> svCostServers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> Server <span class="token keyword">const</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>serverCost <span class="token operator">==</span> s2<span class="token punctuation">.</span>serverCost<span class="token punctuation">)</span> <span class="token keyword">return</span> s1<span class="token punctuation">.</span>powerCost <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>powerCost<span class="token punctuation">;</span><span class="token keyword">return</span> s1<span class="token punctuation">.</span>serverCost <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>serverCost<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//每日能耗排序</span><span class="token function">sort</span><span class="token punctuation">(</span>pwCostServers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pwCostServers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> Server <span class="token keyword">const</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>powerCost<span class="token operator">==</span> s2<span class="token punctuation">.</span>powerCost<span class="token punctuation">)</span> <span class="token keyword">return</span> s1<span class="token punctuation">.</span>serverCost <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>serverCost<span class="token punctuation">;</span><span class="token keyword">return</span> s1<span class="token punctuation">.</span>powerCost <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span>powerCost<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*****************************************************************************/</span><span class="token comment">/************** 读数据构建每日请求 ****************/</span><span class="token keyword">void</span> <span class="token function">readAddRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> string <span class="token operator">&amp;</span> reqVmType<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>reqVmId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string _op<span class="token punctuation">,</span> _reqVmType<span class="token punctuation">,</span> _reqVmId<span class="token punctuation">;</span>    _op <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> op<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _reqVmType <span class="token operator">=</span> reqVmType<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> reqVmType<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _reqVmId <span class="token operator">=</span> reqVmId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> reqVmId<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    VirtualMachine vm <span class="token operator">=</span> vmInfos<span class="token punctuation">[</span>_reqVmType<span class="token punctuation">]</span><span class="token punctuation">;</span>    daysReqs<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>Request<span class="token punctuation">&#123;</span>_op<span class="token punctuation">,</span> _reqVmType<span class="token punctuation">,</span> _reqVmId<span class="token punctuation">,</span> vm<span class="token punctuation">.</span>cpuCore<span class="token punctuation">,</span> vm<span class="token punctuation">.</span>memSize<span class="token punctuation">,</span> vm<span class="token punctuation">.</span>isDual<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">readDelRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>op<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>reqVmId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string _op<span class="token punctuation">,</span> _reqVmId<span class="token punctuation">;</span>    _op <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> op<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _reqVmId <span class="token operator">=</span> reqVmId<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> reqVmId<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    daysReqs<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>Request<span class="token punctuation">&#123;</span>_op<span class="token punctuation">,</span> _reqVmId<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">readDayRequests</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">,</span> <span class="token keyword">int</span> dayReqNumber<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string op<span class="token punctuation">,</span> reqVmType<span class="token punctuation">,</span> reqVmId<span class="token punctuation">;</span>daysReqs<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Request<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>dayReqNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>op<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'a'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>reqVmType<span class="token operator">>></span>reqVmId<span class="token punctuation">;</span><span class="token function">readAddRequest</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> op<span class="token punctuation">,</span> reqVmType<span class="token punctuation">,</span> reqVmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>cin<span class="token operator">>></span>reqVmId<span class="token punctuation">;</span><span class="token function">readDelRequest</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> op<span class="token punctuation">,</span> reqVmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/**************************************************/</span><span class="token comment">/*************** 为剩余的虚拟机请求购买服务器并部署 *******/</span><span class="token comment">//寻找合适的服务器购买</span><span class="token keyword">int</span> <span class="token function">buyBestServer</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>servers<span class="token punctuation">,</span> Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> needCpu <span class="token operator">=</span> req<span class="token punctuation">.</span>isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmCpu<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmCpu<span class="token punctuation">;</span><span class="token keyword">int</span> needMem <span class="token operator">=</span> req<span class="token punctuation">.</span>isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmMem<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmMem<span class="token punctuation">;</span><span class="token comment">//单双节点都是统一的判断方式，很神奇，是吧</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv<span class="token operator">=</span>servers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">></span><span class="token number">1.32</span><span class="token operator">*</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">></span><span class="token number">1.32</span><span class="token operator">*</span>needMem<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv<span class="token operator">=</span>servers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">></span><span class="token number">1.2</span><span class="token operator">*</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">></span><span class="token number">1.2</span><span class="token operator">*</span>needMem<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv<span class="token operator">=</span>servers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">>=</span>needMem<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//这个地方永远也执行不了</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">findBestServer</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Server<span class="token operator">></span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>servers<span class="token punctuation">,</span> Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> minRest <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> needCpu <span class="token operator">=</span> req<span class="token punctuation">.</span>isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmCpu<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmCpu<span class="token punctuation">;</span><span class="token keyword">int</span>needMem <span class="token operator">=</span> req<span class="token punctuation">.</span>isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmMem<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmMem<span class="token punctuation">;</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//双节点</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv <span class="token operator">=</span> servers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>cpuB<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">>=</span>needMem <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memB<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//float ratio1 = (float)(sv.cpuA-needCpu)/(sv.memA-needMem);</span><span class="token comment">//if(ratio1&lt;0.13 || ratio1>7.5) continue;//保证A节点都不失衡</span><span class="token keyword">float</span> ratio2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">-</span>needCpu<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>memB<span class="token operator">-</span>needMem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ratio2<span class="token operator">&lt;</span><span class="token number">0.13</span> <span class="token operator">||</span> ratio2<span class="token operator">></span><span class="token number">7.5</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//保证B节点都不失衡</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuA<span class="token operator">+</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">+</span>sv<span class="token punctuation">.</span>memA<span class="token operator">+</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-</span> req<span class="token punctuation">.</span>vmCpu <span class="token operator">-</span> req<span class="token punctuation">.</span>vmMem<span class="token punctuation">;</span><span class="token comment">//放入后的剩余资源量 cpu + mem</span><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> minRest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>minRest<span class="token operator">=</span>rest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//单节点</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>servers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv <span class="token operator">=</span> servers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">>=</span>needMem<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memB<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//float ratio1 = (float)(sv.cpuA-needCpu)/(sv.memA-needMem);</span><span class="token comment">//if(ratio1&lt;0.13 || ratio1>7.5) continue;//保证A节点都不失衡</span><span class="token keyword">float</span> ratio2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">-</span>needCpu<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>memB<span class="token operator">-</span>needMem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ratio2<span class="token operator">&lt;</span><span class="token number">0.13</span> <span class="token operator">||</span> ratio2<span class="token operator">></span><span class="token number">7.5</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//保证B节点都不失衡</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuA<span class="token operator">+</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">+</span>sv<span class="token punctuation">.</span>memA<span class="token operator">+</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-</span> req<span class="token punctuation">.</span>vmCpu <span class="token operator">-</span> req<span class="token punctuation">.</span>vmMem<span class="token punctuation">;</span><span class="token comment">//放入后的剩余资源量 cpu + mem</span><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> minRest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>minRest<span class="token operator">=</span>rest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//为一波请求买服务器，并同时部署。这波请求可能含有del</span><span class="token keyword">void</span> <span class="token function">buyServersForReqs</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Request<span class="token operator">></span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>reqs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> old_sv_number <span class="token operator">=</span> svResources<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新买的服务器从这里开始编号</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> DeployInfo<span class="token operator">></span> temp_dep_infos<span class="token punctuation">;</span><span class="token comment">//临时的部署信息，最后把这个信息更新到全局部署信息中。这里主要是为了编号映射，太麻烦了</span><span class="token keyword">for</span><span class="token punctuation">(</span>Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req<span class="token operator">:</span>reqs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string vmId <span class="token operator">=</span> req<span class="token punctuation">.</span>vmId<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//添加请求</span><span class="token keyword">int</span> isDual <span class="token operator">=</span> req<span class="token punctuation">.</span>isDual<span class="token punctuation">;</span><span class="token keyword">int</span> needCpu <span class="token operator">=</span> isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmCpu<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmCpu<span class="token punctuation">;</span><span class="token keyword">int</span> needMem <span class="token operator">=</span> isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmMem<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmMem<span class="token punctuation">;</span><span class="token keyword">int</span> svId <span class="token operator">=</span> <span class="token function">findBestServer</span><span class="token punctuation">(</span>svResources<span class="token punctuation">,</span> req<span class="token punctuation">,</span> old_sv_number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>svId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//需购买</span><span class="token keyword">int</span> index<span class="token punctuation">;</span>Server sv<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>day <span class="token operator">&lt;=</span> <span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//333</span>index <span class="token operator">=</span> <span class="token function">buyBestServer</span><span class="token punctuation">(</span>pwCostServers<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按照每日能耗最低，买一台最合适的服务器</span>sv <span class="token operator">=</span> pwCostServers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//购买</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>index <span class="token operator">=</span> <span class="token function">buyBestServer</span><span class="token punctuation">(</span>svCostServers<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//按照硬件成本最低，买一台最合适的服务器</span>sv <span class="token operator">=</span> svCostServers<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//购买</span><span class="token punctuation">&#125;</span>SERVERCOST <span class="token operator">+=</span> sv<span class="token punctuation">.</span>serverCost<span class="token punctuation">;</span>svId <span class="token operator">=</span> svResources<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这台新购买的服务器编号</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//双节点</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>temp_dep_infos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span><span class="token operator">=</span>DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//单节点，默认放在新买服务器的B节点上</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>temp_dep_infos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span><span class="token operator">=</span>DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>svResources<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>sv<span class="token punctuation">)</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">&#123;</span>vmId<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//无需购买即可部署</span>Server <span class="token operator">&amp;</span>sv <span class="token operator">=</span> svResources<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//涉及到修改资源量了</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//双节点部署</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>temp_dep_infos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span> <span class="token operator">=</span> DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//单节点部署</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">&lt;=</span> sv<span class="token punctuation">.</span>cpuB<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//A节点剩得少</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//并且A节点能放下</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>temp_dep_infos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span> <span class="token operator">=</span> DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memB<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//A节点剩得少，但是A节点放不下</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>temp_dep_infos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span> <span class="token operator">=</span> DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//B节点剩得少</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memB<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//并且B节点能放下</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>temp_dep_infos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span> <span class="token operator">=</span> DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//B节点剩得少，但是B节点放不下</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>temp_dep_infos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span> <span class="token operator">=</span> DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//删除请求</span>DeployInfo vmDeInfo <span class="token operator">=</span> temp_dep_infos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> svId<span class="token operator">=</span>vmDeInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> occupiedCpu<span class="token operator">=</span>vmDeInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> occupiedMem<span class="token operator">=</span>vmDeInfo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取部署时的关键信息</span>Server <span class="token operator">&amp;</span>sv<span class="token operator">=</span>svResources<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//涉及到修改资源量了</span><span class="token keyword">if</span><span class="token punctuation">(</span>vmDeInfo<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//之前是双节点部署的</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//之前是单节点部署的</span><span class="token keyword">if</span><span class="token punctuation">(</span>vmDeInfo<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//之前是部署在A节点上</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//temp_dep_infos.erase(vmId);//暂时不删，不然做编号映射时会出问题。最后统一删除部署信息</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>VMIDS<span class="token operator">=</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span>VMIDS<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span>VMIDS<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> VMIDS<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vmId<span class="token punctuation">)</span><span class="token punctuation">,</span> VMIDS<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没错删除就是这么复杂</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> day_buy_info<span class="token punctuation">&#123;</span><span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//保存购买信息</span>set<span class="token operator">&lt;</span>string<span class="token operator">></span> diffSvType<span class="token punctuation">;</span><span class="token comment">//这个东西可以记录买了多少种</span><span class="token comment">//为了编号映射，好球麻烦哟</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> Server<span class="token operator">></span> server_map<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> sv_run_vms_map<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> svRunVmsNumber_map<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> svId_map<span class="token punctuation">;</span><span class="token keyword">int</span> ID <span class="token operator">=</span> old_sv_number<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>old_sv_number<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svResources<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string svType<span class="token operator">=</span> svResources<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>diffSvType<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>svType<span class="token punctuation">)</span><span class="token operator">!=</span>diffSvType<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//每种买了多少</span>diffSvType<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>svType<span class="token punctuation">)</span><span class="token punctuation">;</span>server_map<span class="token punctuation">[</span>ID<span class="token punctuation">]</span><span class="token operator">=</span>svResources<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>svRunVmsNumber_map<span class="token punctuation">[</span>ID<span class="token punctuation">]</span><span class="token operator">=</span>svRunVmsNumber<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>sv_run_vms_map<span class="token punctuation">[</span>ID<span class="token punctuation">]</span><span class="token operator">=</span>svRunVms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>svId_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>ID<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>svResources<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>svResources<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token operator">==</span>svType<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>server_map<span class="token punctuation">[</span>ID<span class="token punctuation">]</span><span class="token operator">=</span>svResources<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>svRunVmsNumber_map<span class="token punctuation">[</span>ID<span class="token punctuation">]</span><span class="token operator">=</span>svRunVmsNumber<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>sv_run_vms_map<span class="token punctuation">[</span>ID<span class="token punctuation">]</span><span class="token operator">=</span>svRunVms<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>svId_map<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>ID<span class="token operator">++</span><span class="token punctuation">;</span>number<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>day_buy_info<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> svType <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//存一下每日的购买信息</span>day_buy_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"(purchase, "</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>diffSvType<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")\n"</span><span class="token punctuation">;</span><span class="token comment">//将购买种类存到数组的首位</span>purchase_info<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>day_buy_info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存一下每日的购买请求</span><span class="token comment">//根据映射，为svResources和svRunVmsNumber和svRunVms中新增的部分重新赋值。是不是感觉很麻烦，是的</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>old_sv_number<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svResources<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>svResources<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>server_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>svRunVmsNumber_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sv_run_vms_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//使用 svId_map 映射去修改部署信息。并更新到全局部署信息中</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>pair <span class="token operator">:</span> temp_dep_infos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string vmId <span class="token operator">=</span> pair<span class="token punctuation">.</span>first<span class="token punctuation">;</span>DeployInfo depInfo <span class="token operator">=</span> pair<span class="token punctuation">.</span>second<span class="token punctuation">;</span>depInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> svId_map<span class="token punctuation">[</span>depInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//修改部署到的服务器 Id</span>vmDeployInfos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span> <span class="token operator">=</span> depInfo<span class="token punctuation">;</span><span class="token comment">//更新到全局变量</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*********************************************************/</span><span class="token comment">/*************************** 复杂的迁移策略 ***************************************/</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findBestServerForMigrate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>svIds<span class="token punctuation">,</span> DeployInfo <span class="token keyword">const</span> <span class="token operator">&amp;</span>vmDepInfo<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//迁移时，虚拟机应该放在哪台服务器上比较好。返回所在svIds中的索引，找不到就返回-1。并且可以指定从哪个位置开始往后找</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> node <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> minRest <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> isDual <span class="token operator">=</span> vmDepInfo<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> needCpu<span class="token operator">=</span>vmDepInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> needMem<span class="token operator">=</span>vmDepInfo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//之前是双节点部署的</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>svIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>vmDepInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//双部署虚拟机不能迁移到本身所在的服务器上</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv <span class="token operator">=</span> svResources<span class="token punctuation">[</span>svIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>rest <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>needCpu<span class="token operator">+</span>needMem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>cpuB<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">>=</span>needMem <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memB<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>rest <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>needCpu<span class="token operator">+</span>needMem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放入后的剩余资源量 cpu + mem</span><span class="token keyword">if</span><span class="token punctuation">(</span>rest<span class="token operator">&lt;</span>minRest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>minRest<span class="token operator">=</span>rest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//之前是单节点部署的</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv <span class="token operator">=</span> svResources<span class="token punctuation">[</span>svIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//if(svIds[i]==vmDepInfo[0] &amp;&amp; vmDepInfo[3]==0) continue;//单部署虚拟机不能迁移到本身所在的服务器的相同节点上</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuA<span class="token operator">+</span>sv<span class="token punctuation">.</span>memA <span class="token operator">-</span> needCpu <span class="token operator">-</span> needMem<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> minRest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//保证部署后的剩余资源量最小</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>node <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>minRest<span class="token operator">=</span>rest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memB<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//if(svIds[i]==vmDepInfo[0] &amp;&amp; vmDepInfo[3]==1) continue;//单部署虚拟机不能迁移到本身所在的服务器的相同节点上</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuB<span class="token operator">+</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-</span> needCpu <span class="token operator">-</span> needMem<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> minRest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//保证部署后的剩余资源量最小</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>node <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>minRest<span class="token operator">=</span>rest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDual<span class="token punctuation">)</span> <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//返回可迁移到的服务器索引。不可能返回原服务器。</span><span class="token keyword">else</span> <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>index<span class="token punctuation">,</span> node<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//返回可迁移到的服务器索引，以及迁移到的节点。不可能返回原服务器和相同节点</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">migrate</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> day_migrate_info<span class="token punctuation">&#123;</span><span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//用来存每日的迁移信息。先加入一个空字符串留给 migrate_num</span><span class="token keyword">int</span> max_migrate_num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>vmDeployInfos<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//当日最大可迁移数量，不超过 max_migrate_num</span><span class="token keyword">int</span> migrate_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//当日已迁移数量</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> svIds<span class="token punctuation">;</span><span class="token comment">//收集服务器的Id，并计算每台服务器上的剩余资源量</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svResources<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Server <span class="token operator">&amp;</span>sv <span class="token operator">=</span> svResources<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>sv<span class="token punctuation">.</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuA <span class="token operator">+</span> sv<span class="token punctuation">.</span>cpuB <span class="token operator">+</span> sv<span class="token punctuation">.</span>memA <span class="token operator">+</span> sv<span class="token punctuation">.</span>memB<span class="token punctuation">;</span><span class="token comment">//计算服务器上的剩余资源量</span>svIds<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//按服务器上的剩余资源量排序，第二序为其上运行的虚拟机个数。前提是服务器的rest属性值已被更新过，不然会出错</span><span class="token function">sort</span><span class="token punctuation">(</span>svIds<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> svIds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>id1<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>id2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv1 <span class="token operator">=</span> svResources<span class="token punctuation">[</span>id1<span class="token punctuation">]</span><span class="token punctuation">;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv2 <span class="token operator">=</span> svResources<span class="token punctuation">[</span>id2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv1<span class="token punctuation">.</span>rest <span class="token operator">==</span> sv2<span class="token punctuation">.</span>rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> svRunVmsNumber<span class="token punctuation">[</span>id1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> svRunVmsNumber<span class="token punctuation">[</span>id2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sv1<span class="token punctuation">.</span>rest <span class="token operator">></span> sv2<span class="token punctuation">.</span>rest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> canMigSvIds<span class="token punctuation">;</span><span class="token comment">//能够转移到的服务器</span>set<span class="token operator">&lt;</span>string<span class="token operator">></span> migratedVmIds<span class="token punctuation">;</span><span class="token comment">//已迁移过的虚拟机</span>set<span class="token operator">&lt;</span>string<span class="token operator">></span> delVmIds<span class="token punctuation">;</span><span class="token comment">//当天即将删除的虚拟机</span><span class="token keyword">for</span><span class="token punctuation">(</span>Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req <span class="token operator">:</span> daysReqs<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token string">"del"</span><span class="token punctuation">)</span> delVmIds<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//迁移时会动态更新服务器上的剩余资源量，即rest属性的值</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//从前往后遍历</span><span class="token keyword">int</span> svId <span class="token operator">=</span> svIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>Server <span class="token operator">&amp;</span>sv <span class="token operator">=</span> svResources<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>rest<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuCore<span class="token operator">+</span>sv<span class="token punctuation">.</span>memSize<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.018</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//如果这台服务器上的资源很满，那其上的虚拟机就不考虑迁移了</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> vmIds <span class="token operator">=</span> svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//服务器上的虚拟机们</span><span class="token comment">//按已部署虚拟机占用的资源量排序</span><span class="token function">sort</span><span class="token punctuation">(</span>vmIds<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vmIds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>string <span class="token keyword">const</span> <span class="token operator">&amp;</span>vm1<span class="token punctuation">,</span> string <span class="token keyword">const</span> <span class="token operator">&amp;</span>vm2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>DeployInfo <span class="token keyword">const</span> <span class="token operator">&amp;</span>dep1 <span class="token operator">=</span> vmDeployInfos<span class="token punctuation">[</span>vm1<span class="token punctuation">]</span><span class="token punctuation">;</span>DeployInfo <span class="token keyword">const</span> <span class="token operator">&amp;</span>dep2 <span class="token operator">=</span> vmDeployInfos<span class="token punctuation">[</span>vm2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>dep1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dep1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> dep2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dep2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> dep1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> dep2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> dep1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dep1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> dep2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dep2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>string <span class="token keyword">const</span> <span class="token operator">&amp;</span>vmId <span class="token operator">:</span> vmIds<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历每台虚拟机</span><span class="token keyword">if</span><span class="token punctuation">(</span>migrate_num <span class="token operator">==</span> max_migrate_num<span class="token punctuation">)</span> <span class="token keyword">goto</span> STOP_MIGRATE<span class="token punctuation">;</span><span class="token comment">//达到最大迁移次数</span><span class="token keyword">if</span><span class="token punctuation">(</span>delVmIds<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token operator">!=</span>delVmIds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//这台虚拟机即将被删除，就不再迁移了</span><span class="token keyword">if</span><span class="token punctuation">(</span>migratedVmIds<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token operator">!=</span>migratedVmIds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//这台虚拟机之前迁移过，就不再迁移了</span>DeployInfo <span class="token operator">&amp;</span>deInfo <span class="token operator">=</span> vmDeployInfos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//虚拟机部署信息</span><span class="token keyword">int</span> dual <span class="token operator">=</span> deInfo<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> occupiedCpu<span class="token operator">=</span>deInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> occupiedMem<span class="token operator">=</span>deInfo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans <span class="token operator">=</span> <span class="token function">findBestServerForMigrate</span><span class="token punctuation">(</span>svIds<span class="token punctuation">,</span> deInfo<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到最合适迁移到的服务器</span><span class="token keyword">int</span> index<span class="token operator">=</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> goal_svId<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//表示找不到能放得下的可以迁移到的服务器</span>ans <span class="token operator">=</span> <span class="token function">findBestServerForMigrate</span><span class="token punctuation">(</span>canMigSvIds<span class="token punctuation">,</span> deInfo<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续在canMigSvIds里面找</span>index <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> canMigSvIds<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>svId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//暂时考虑完全避免往自己上面迁移</span><span class="token keyword">if</span> <span class="token punctuation">(</span>canMigSvIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> canMigSvIds<span class="token punctuation">[</span>canMigSvIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>svId<span class="token punctuation">)</span> canMigSvIds<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>svId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>goal_svId <span class="token operator">=</span> canMigSvIds<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//目标服务器Id</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>goal_svId <span class="token operator">=</span> svIds<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//目标服务器Id</span><span class="token punctuation">&#125;</span>migratedVmIds<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//记录该虚拟机已迁移过</span>Server <span class="token operator">&amp;</span>goal_sv <span class="token operator">=</span> svResources<span class="token punctuation">[</span>goal_svId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//目标服务器，一旦找到就表示肯定能放下</span><span class="token keyword">if</span><span class="token punctuation">(</span>dual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//双节点部署</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span><span class="token comment">//原服务器资源增加</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>sv<span class="token punctuation">.</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuA<span class="token operator">+</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">+</span>sv<span class="token punctuation">.</span>memA<span class="token operator">+</span>sv<span class="token punctuation">.</span>memB<span class="token punctuation">;</span><span class="token comment">//更新剩余资源量</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>VMIDS<span class="token operator">=</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span>VMIDS<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span>VMIDS<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> VMIDS<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vmId<span class="token punctuation">)</span><span class="token punctuation">,</span> VMIDS<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没错删除就是这么复杂</span>goal_sv<span class="token punctuation">.</span>cpuA <span class="token operator">-=</span> occupiedCpu<span class="token punctuation">;</span><span class="token comment">//目标服务器资源减少</span>goal_sv<span class="token punctuation">.</span>cpuB <span class="token operator">-=</span> occupiedCpu<span class="token punctuation">;</span>goal_sv<span class="token punctuation">.</span>memA <span class="token operator">-=</span> occupiedMem<span class="token punctuation">;</span>goal_sv<span class="token punctuation">.</span>memB <span class="token operator">-=</span> occupiedMem<span class="token punctuation">;</span>goal_sv<span class="token punctuation">.</span>rest <span class="token operator">=</span> goal_sv<span class="token punctuation">.</span>cpuA<span class="token operator">+</span>goal_sv<span class="token punctuation">.</span>cpuB<span class="token operator">+</span>goal_sv<span class="token punctuation">.</span>memA<span class="token operator">+</span>goal_sv<span class="token punctuation">.</span>memB<span class="token punctuation">;</span><span class="token comment">//更新剩余资源量</span>svRunVmsNumber<span class="token punctuation">[</span>goal_svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>goal_svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改部署信息</span>deInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> goal_svId<span class="token punctuation">;</span>migrate_num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//当日已迁移数量 + 1</span>day_migrate_info<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> vmId <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>goal_svId<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//单节点部署</span><span class="token keyword">if</span><span class="token punctuation">(</span>deInfo<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//原来部署在A节点还是B节点</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>sv<span class="token punctuation">.</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuA<span class="token operator">+</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">+</span>sv<span class="token punctuation">.</span>memA<span class="token operator">+</span>sv<span class="token punctuation">.</span>memB<span class="token punctuation">;</span><span class="token comment">//更新剩余资源量</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>VMIDS<span class="token operator">=</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span>VMIDS<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span>VMIDS<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> VMIDS<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vmId<span class="token punctuation">)</span><span class="token punctuation">,</span> VMIDS<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没错删除就是这么复杂</span><span class="token keyword">int</span> node<span class="token operator">=</span>ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//现在可迁移到的节点</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>goal_sv<span class="token punctuation">.</span>cpuA <span class="token operator">-=</span> occupiedCpu<span class="token punctuation">;</span>goal_sv<span class="token punctuation">.</span>memA <span class="token operator">-=</span> occupiedMem<span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>goal_svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>goal_svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span>goal_sv<span class="token punctuation">.</span>rest <span class="token operator">=</span> goal_sv<span class="token punctuation">.</span>cpuA<span class="token operator">+</span>goal_sv<span class="token punctuation">.</span>cpuB<span class="token operator">+</span>goal_sv<span class="token punctuation">.</span>memA<span class="token operator">+</span>goal_sv<span class="token punctuation">.</span>memB<span class="token punctuation">;</span><span class="token comment">//更新剩余资源量</span><span class="token comment">//修改部署信息</span>deInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> goal_svId<span class="token punctuation">;</span>deInfo<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>migrate_num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//当日已迁移数量 + 1</span>day_migrate_info<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> vmId <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>goal_svId<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", A)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>goal_sv<span class="token punctuation">.</span>cpuB <span class="token operator">-=</span> occupiedCpu<span class="token punctuation">;</span>goal_sv<span class="token punctuation">.</span>memB <span class="token operator">-=</span> occupiedMem<span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>goal_svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>goal_svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span>goal_sv<span class="token punctuation">.</span>rest <span class="token operator">=</span> goal_sv<span class="token punctuation">.</span>cpuA<span class="token operator">+</span>goal_sv<span class="token punctuation">.</span>cpuB<span class="token operator">+</span>goal_sv<span class="token punctuation">.</span>memA<span class="token operator">+</span>goal_sv<span class="token punctuation">.</span>memB<span class="token punctuation">;</span><span class="token comment">//更新剩余资源量</span><span class="token comment">//修改部署信息</span>deInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> goal_svId<span class="token punctuation">;</span>deInfo<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>migrate_num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//当日已迁移数量 + 1</span>day_migrate_info<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> vmId <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>goal_svId<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", B)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>STOP_MIGRATE<span class="token operator">:</span><span class="token comment">//if(day==0 || day%10==0)&#123;</span><span class="token comment">//cout&lt;&lt;day&lt;&lt;" --> "&lt;&lt;max_migrate_num&lt;&lt;" --> "&lt;&lt;migrate_num&lt;&lt;endl;</span><span class="token comment">//&#125;</span>day_migrate_info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"(migration, "</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>migrate_num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")\n"</span><span class="token punctuation">;</span><span class="token comment">//将migrate_num转化成字符串放到数组的首位</span>MIGRATE_NUMBER <span class="token operator">+=</span> migrate_num<span class="token punctuation">;</span>migrate_info<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>day_migrate_info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存一下每日的迁移信息</span><span class="token punctuation">&#125;</span><span class="token comment">/*********************************************************************************/</span><span class="token comment">/********************* 虚拟机请求资源（vmCpu + vmMem）排序 *********************/</span><span class="token keyword">void</span> <span class="token function">quickSort_cpumem_down</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Request<span class="token operator">></span> <span class="token operator">&amp;</span>reqs<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">,</span> j<span class="token operator">=</span>r<span class="token punctuation">;</span>Request req<span class="token operator">=</span>reqs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>reqs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vmCpu<span class="token operator">+</span>reqs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vmMem <span class="token operator">&lt;</span> req<span class="token punctuation">.</span>vmCpu<span class="token operator">+</span>req<span class="token punctuation">.</span>vmMem <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> reqs<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> reqs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>reqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vmCpu<span class="token operator">+</span>reqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vmMem <span class="token operator">>=</span> req<span class="token punctuation">.</span>vmCpu<span class="token operator">+</span>req<span class="token punctuation">.</span>vmMem <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> reqs<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> reqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>reqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> req<span class="token punctuation">;</span><span class="token function">quickSort_cpumem_down</span><span class="token punctuation">(</span>reqs<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort_cpumem_down</span><span class="token punctuation">(</span>reqs<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">segmentSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>Request<span class="token operator">></span> <span class="token operator">&amp;</span>reqs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//以删除请求分段排序，为的是不打乱删除的顺序</span><span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>reqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>reqs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>Request<span class="token operator">></span> speReqs<span class="token punctuation">,</span>dualReqs<span class="token punctuation">,</span>sgleReqs<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>start<span class="token punctuation">;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> ratio <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>reqs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vmCpu<span class="token operator">/</span>reqs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>vmMem<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ratio<span class="token operator">&lt;=</span><span class="token number">0.28</span> <span class="token operator">||</span> ratio<span class="token operator">>=</span><span class="token number">6.8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>speReqs<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>reqs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//if(ratio&lt;0.28 || ratio>6.8)&#123;</span><span class="token comment">//speReqs.emplace_back(reqs[j]);</span><span class="token comment">//continue;</span><span class="token comment">//&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>reqs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>isDual<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> dualReqs<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>reqs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> sgleReqs<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>reqs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">quickSort_cpumem_down</span><span class="token punctuation">(</span>speReqs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> speReqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort_cpumem_down</span><span class="token punctuation">(</span>dualReqs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dualReqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">quickSort_cpumem_down</span><span class="token punctuation">(</span>sgleReqs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sgleReqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req<span class="token operator">:</span>sgleReqs<span class="token punctuation">)</span> reqs<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>req<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req<span class="token operator">:</span>dualReqs<span class="token punctuation">)</span> reqs<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>req<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req<span class="token operator">:</span>speReqs<span class="token punctuation">)</span> reqs<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>req<span class="token punctuation">;</span><span class="token comment">//quickSort_cpumem_down(reqs, start, i-1);</span>start<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//之前就是忘了这一步</span><span class="token function">quickSort_cpumem_down</span><span class="token punctuation">(</span>reqs<span class="token punctuation">,</span> start<span class="token punctuation">,</span> reqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*********************************************************************************/</span><span class="token comment">//直接部署时。</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findBestServer</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token keyword">const</span> <span class="token operator">&amp;</span>svIds<span class="token punctuation">,</span> Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> node <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> needCpu <span class="token operator">=</span> req<span class="token punctuation">.</span>isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmCpu<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmCpu<span class="token punctuation">;</span><span class="token keyword">int</span>needMem <span class="token operator">=</span> req<span class="token punctuation">.</span>isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmMem<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmMem<span class="token punctuation">;</span><span class="token keyword">int</span> minRest <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//双节点</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv <span class="token operator">=</span> svResources<span class="token punctuation">[</span>svIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>cpuB<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">>=</span>needMem <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memB<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> ratio1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">-</span>needCpu<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>memA<span class="token operator">-</span>needMem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> ratio2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">-</span>needCpu<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>memB<span class="token operator">-</span>needMem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ratio1<span class="token operator">&lt;</span><span class="token number">0.13</span> <span class="token operator">||</span> ratio1<span class="token operator">></span><span class="token number">7.5</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//保证A节点不失衡</span><span class="token keyword">if</span><span class="token punctuation">(</span>ratio2<span class="token operator">&lt;</span><span class="token number">0.13</span> <span class="token operator">||</span> ratio2<span class="token operator">></span><span class="token number">7.5</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//保证B节点不失衡</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuA<span class="token operator">+</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">+</span>sv<span class="token punctuation">.</span>memA<span class="token operator">+</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-</span> req<span class="token punctuation">.</span>vmCpu <span class="token operator">-</span> req<span class="token punctuation">.</span>vmMem<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> minRest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//保证部署后的剩余资源量最小</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>minRest<span class="token operator">=</span>rest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//单节点</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Server <span class="token keyword">const</span> <span class="token operator">&amp;</span>sv <span class="token operator">=</span> svResources<span class="token punctuation">[</span>svIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memA<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> ratio1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuA<span class="token operator">-</span>needCpu<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>memA<span class="token operator">-</span>needMem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ratio1<span class="token operator">&lt;</span><span class="token number">0.13</span> <span class="token operator">||</span> ratio1<span class="token operator">></span><span class="token number">7.5</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//保证在A节点上部署后不失衡</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuA <span class="token operator">-</span> req<span class="token punctuation">.</span>vmCpu<span class="token punctuation">;</span><span class="token comment">//只考虑cpu的剩余量效果竟然要好一些</span><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> minRest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//保证部署后的剩余资源量最小</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>node <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>minRest<span class="token operator">=</span>rest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">>=</span>needCpu <span class="token operator">&amp;&amp;</span> sv<span class="token punctuation">.</span>memB<span class="token operator">>=</span>needMem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">float</span> ratio2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>cpuB<span class="token operator">-</span>needCpu<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>sv<span class="token punctuation">.</span>memB<span class="token operator">-</span>needMem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>ratio2<span class="token operator">&lt;</span><span class="token number">0.13</span> <span class="token operator">||</span> ratio2<span class="token operator">></span><span class="token number">7.5</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//保证在B节点上部署后不失衡</span>rest <span class="token operator">=</span> sv<span class="token punctuation">.</span>cpuB <span class="token operator">-</span> req<span class="token punctuation">.</span>vmCpu<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">&lt;</span> minRest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//保证部署后的剩余资源量最小</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>node <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>minRest<span class="token operator">=</span>rest<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>isDual<span class="token punctuation">)</span> <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//返回找到的服务器索引</span><span class="token keyword">else</span> <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>index<span class="token punctuation">,</span> node<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//返回找到的服务器索引，以及部署节点</span><span class="token punctuation">&#125;</span><span class="token comment">//处理每日请求</span><span class="token keyword">void</span> <span class="token function">handleOneDayRequests</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>Request<span class="token operator">></span> sortedReqs <span class="token operator">=</span> daysReqs<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//复制一份数据，保持原数据不变</span><span class="token function">segmentSort</span><span class="token punctuation">(</span>sortedReqs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分段排序</span><span class="token function">migrate</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//迁移</span><span class="token comment">//分下类</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> emptySvIds<span class="token punctuation">;</span><span class="token comment">//空服务器Id</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> notEmptySvIds<span class="token punctuation">;</span><span class="token comment">//非空服务器Id</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svResources<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>svRunVmsNumber<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> notEmptySvIds<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> emptySvIds<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//能放的就放，放不下的就记录下来，稍后购买。（该记录中可能含有del，主要是可能有该天添加，该天删除的虚拟机）</span>vector<span class="token operator">&lt;</span>Request<span class="token operator">></span> cantHoldReqs<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req<span class="token operator">:</span>sortedReqs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>string vmId<span class="token operator">=</span>req<span class="token punctuation">.</span>vmId<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//添加请求</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans <span class="token operator">=</span> <span class="token function">findBestServer</span><span class="token punctuation">(</span>notEmptySvIds<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先在非空服务器上查找</span><span class="token keyword">int</span> svId<span class="token punctuation">,</span> index<span class="token operator">=</span>ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token function">findBestServer</span><span class="token punctuation">(</span>emptySvIds<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再在空服务器上查找</span>index <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cantHoldReqs<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//实在是放不下时，记录下该请求</span>svId <span class="token operator">=</span> emptySvIds<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//服务器Id</span><span class="token comment">//将该服务器Id从空移到非空</span>emptySvIds<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span>emptySvIds<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> emptySvIds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> svId<span class="token punctuation">)</span><span class="token punctuation">,</span> emptySvIds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>notEmptySvIds<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>svId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>svId <span class="token operator">=</span> notEmptySvIds<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//服务器Id</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> isDual <span class="token operator">=</span> req<span class="token punctuation">.</span>isDual<span class="token punctuation">;</span><span class="token keyword">int</span> needCpu <span class="token operator">=</span> isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmCpu<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmCpu<span class="token punctuation">;</span><span class="token keyword">int</span> needMem <span class="token operator">=</span> isDual <span class="token operator">?</span> req<span class="token punctuation">.</span>vmMem<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">:</span> req<span class="token punctuation">.</span>vmMem<span class="token punctuation">;</span>Server <span class="token operator">&amp;</span>sv <span class="token operator">=</span> svResources<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//涉及到修改资源量了</span><span class="token keyword">if</span><span class="token punctuation">(</span>isDual<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//双节点部署</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>vmDeployInfos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span> <span class="token operator">=</span> DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//单节点部署</span><span class="token keyword">int</span> node <span class="token operator">=</span> ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//在返回的结果中看看它该部署到哪个节点合适</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>vmDeployInfos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span> <span class="token operator">=</span> DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">-=</span> needCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">-=</span> needMem<span class="token punctuation">;</span>vmDeployInfos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span> <span class="token operator">=</span> DeployInfo<span class="token punctuation">&#123;</span>svId<span class="token punctuation">,</span> needCpu<span class="token punctuation">,</span> needMem<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//删除请求</span><span class="token keyword">if</span><span class="token punctuation">(</span>vmDeployInfos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>vmId<span class="token punctuation">)</span> <span class="token operator">==</span> vmDeployInfos<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//该虚拟机是本应该当天部署的，但是没部署上，被存起来了</span>cantHoldReqs<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//那么当天对该虚拟机的删除也需要存起来。保持相对处理位置不变</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>DeployInfo vmDeInfo <span class="token operator">=</span> vmDeployInfos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> svId<span class="token operator">=</span>vmDeInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> occupiedCpu<span class="token operator">=</span>vmDeInfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> occupiedMem<span class="token operator">=</span>vmDeInfo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取部署时的关键信息</span>Server <span class="token operator">&amp;</span>sv<span class="token operator">=</span>svResources<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//涉及到修改资源量了</span><span class="token keyword">if</span><span class="token punctuation">(</span>vmDeInfo<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//之前是双节点部署的</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//之前是单节点部署的</span><span class="token keyword">if</span><span class="token punctuation">(</span>vmDeInfo<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//之前是部署在A节点上</span>sv<span class="token punctuation">.</span>cpuA <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memA <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>sv<span class="token punctuation">.</span>cpuB <span class="token operator">+=</span> occupiedCpu<span class="token punctuation">;</span>sv<span class="token punctuation">.</span>memB <span class="token operator">+=</span> occupiedMem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//vmDeployInfos.erase(vmId);//暂时不删，不然做编号映射时会出问题。最后统一删除部署信息</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">&amp;</span>VMIDS<span class="token operator">=</span>svRunVms<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token punctuation">;</span>VMIDS<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span>VMIDS<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> VMIDS<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vmId<span class="token punctuation">)</span><span class="token punctuation">,</span> VMIDS<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没错删除就是这么复杂</span><span class="token keyword">if</span><span class="token punctuation">(</span>svRunVmsNumber<span class="token punctuation">[</span>svId<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果该服务器为空了，将该服务器Id从非空移到空</span>notEmptySvIds<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">remove</span><span class="token punctuation">(</span>notEmptySvIds<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> notEmptySvIds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> svId<span class="token punctuation">)</span><span class="token punctuation">,</span> notEmptySvIds<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emptySvIds<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>svId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//考虑处理前面放不下的请求。下面的操作会改变 svResources 的大小，也就是会新买一批服务器紧接着放在后面</span><span class="token function">buyServersForReqs</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> cantHoldReqs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//买服务器，放请求，并做好映射，更新全局部署信息</span><span class="token comment">//保存当日的部署信息</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> day_deploy_info<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Request <span class="token keyword">const</span> <span class="token operator">&amp;</span>req <span class="token operator">:</span> daysReqs<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//顺序重新遍历当日请求</span><span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>type<span class="token operator">==</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//添加请求</span>string vmId<span class="token operator">=</span>req<span class="token punctuation">.</span>vmId<span class="token punctuation">;</span>DeployInfo depInfo <span class="token operator">=</span> vmDeployInfos<span class="token punctuation">[</span>vmId<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//得到部署信息</span>string svId <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>depInfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>depInfo<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>day_deploy_info<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> svId <span class="token operator">+</span> <span class="token string">")\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>string nodeInfo <span class="token operator">=</span> depInfo<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"A"</span> <span class="token operator">:</span> <span class="token string">"B"</span><span class="token punctuation">;</span>day_deploy_info<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> svId <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> nodeInfo <span class="token operator">+</span> <span class="token string">")\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//删除请求没有任何输出</span><span class="token comment">//但是在这里统一删除，需要删除的部署信息。我简直是太机智了。如果在前面就删掉了某台虚拟机的部署信息，那么在这里遍历时就可能找不到它的部署信息了，那我怎么输出日志嘛</span>vmDeployInfos<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>vmId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>deploy_info<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>day_deploy_info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存一下每日的部署请求</span><span class="token punctuation">&#125;</span><span class="token comment">//计算每日的耗电成本</span><span class="token keyword">void</span> <span class="token function">computePowerCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>svRunVmsNumber<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>svRunVmsNumber<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            POWERCOST <span class="token operator">+=</span> svResources<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>powerCost<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印输出结果</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> startDay<span class="token punctuation">,</span> <span class="token keyword">int</span> endDay<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token operator">=</span>startDay<span class="token punctuation">;</span> day<span class="token operator">&lt;</span>endDay<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> day<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//遍历[startDay, endDay]</span><span class="token keyword">for</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token operator">:</span>purchase_info<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//每天购买</span>cout<span class="token operator">&lt;&lt;</span>info<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token operator">:</span>migrate_info<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//每天迁移</span>cout<span class="token operator">&lt;&lt;</span>info<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>info<span class="token operator">:</span>deploy_info<span class="token punctuation">[</span>day<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//每天部署</span>cout<span class="token operator">&lt;&lt;</span>info<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">cloudResourceSchedulingAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">readServerAndVmInfos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取服务器和虚拟机信息</span><span class="token keyword">int</span> dayReqNumber<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reqDays<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//请求有多少天</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>windowDays<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//天数窗口，可以理解为每天处理请求时，只知道该窗口内的后续请求</span><span class="token comment">//先读入 windowDays 天的请求</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> day<span class="token operator">&lt;</span>windowDays<span class="token punctuation">;</span> day<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dayReqNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readDayRequests</span><span class="token punctuation">(</span>day<span class="token punctuation">,</span> dayReqNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//再一边处理现有请求，一边输出决策，一边读入后续请求数据。复赛要求这么做</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> day<span class="token operator">&lt;</span><span class="token punctuation">(</span>reqDays <span class="token operator">-</span> windowDays<span class="token punctuation">)</span><span class="token punctuation">;</span> day<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理现有请求</span><span class="token function">handleOneDayRequests</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">computePowerCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> day<span class="token operator">%</span><span class="token number">50</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finished requests of day : %d\n"</span><span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出当天决策，刷新输出缓存区，相应赛题的要求</span><span class="token comment">//print(day, day);</span><span class="token comment">//fflush(stdout);</span><span class="token comment">//读入后续请求</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>dayReqNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readDayRequests</span><span class="token punctuation">(</span>windowDays<span class="token operator">+</span>day<span class="token punctuation">,</span> dayReqNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//处理剩余天的请求</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token operator">=</span>reqDays<span class="token operator">-</span>windowDays<span class="token punctuation">;</span> day<span class="token operator">&lt;</span>reqDays<span class="token punctuation">;</span> day<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">handleOneDayRequests</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">computePowerCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>day<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> day<span class="token operator">%</span><span class="token number">50</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Finished requests of day : %d\n"</span><span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出剩余天的决策</span><span class="token comment">//print(reqDays-windowDays, reqDays-1);</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//freopen(OUTPUT_REDIRECTION, "w", stdout);</span>clock_t start<span class="token punctuation">,</span> finish<span class="token punctuation">;</span><span class="token comment">//第一份文件</span>start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span>INPUT_REDIRECTION_1<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cloudResourceSchedulingAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>finish <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TOTALCOST <span class="token operator">=</span> SERVERCOST <span class="token operator">+</span> POWERCOST<span class="token punctuation">;</span><span class="token comment">//总成本</span>SC <span class="token operator">+=</span> SERVERCOST<span class="token punctuation">,</span> PC <span class="token operator">+=</span> POWERCOST<span class="token punctuation">,</span> TC <span class="token operator">+=</span> TOTALCOST<span class="token punctuation">;</span>TOTAL_MIGRATE <span class="token operator">+=</span> MIGRATE_NUMBER<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nCompute Time: %f s \n"</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">(</span>finish<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">/</span>CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Server Cost: %lld \nPower Cost: %lld \nTotal Cost: %lld \n"</span><span class="token punctuation">,</span> SERVERCOST<span class="token punctuation">,</span> POWERCOST<span class="token punctuation">,</span> TOTALCOST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Migrate number: %d\n\n"</span><span class="token punctuation">,</span> MIGRATE_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//变量清零</span>svInfos<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vmInfos<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>svCostServers<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pwCostServers<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>daysReqs<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>svResources<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vmDeployInfos<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>svRunVmsNumber<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>svRunVms<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>purchase_info<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>migrate_info<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>deploy_info<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SERVERCOST<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>POWERCOST<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>TOTALCOST<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>MIGRATE_NUMBER<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//第二份文件</span>start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">freopen</span><span class="token punctuation">(</span>INPUT_REDIRECTION_2<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cloudResourceSchedulingAlgorithm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>finish <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TOTALCOST <span class="token operator">=</span> SERVERCOST <span class="token operator">+</span> POWERCOST<span class="token punctuation">;</span><span class="token comment">//总成本</span>SC <span class="token operator">+=</span> SERVERCOST<span class="token punctuation">,</span> PC <span class="token operator">+=</span> POWERCOST<span class="token punctuation">,</span> TC <span class="token operator">+=</span> TOTALCOST<span class="token punctuation">;</span>TOTAL_MIGRATE <span class="token operator">+=</span> MIGRATE_NUMBER<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nCompute Time: %f s \n"</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">(</span>finish<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">/</span>CLOCKS_PER_SEC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Server Cost: %lld \nPower Cost: %lld \nTotal Cost: %lld \n"</span><span class="token punctuation">,</span> SERVERCOST<span class="token punctuation">,</span> POWERCOST<span class="token punctuation">,</span> TOTALCOST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Migrate number: %d\n"</span><span class="token punctuation">,</span> MIGRATE_NUMBER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印两份文件的总成本</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nServer Cost: %lld \nPower Cost: %lld \nTotal Cost: %lld \n"</span><span class="token punctuation">,</span> SC<span class="token punctuation">,</span> PC<span class="token punctuation">,</span> TC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Migrate number: %d \n\n"</span><span class="token punctuation">,</span> TOTAL_MIGRATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长递增子序列</title>
      <link href="/posts/f15db2c6.html"/>
      <url>/posts/f15db2c6.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>最长递增子序列问题是一个很基本、较常见的小问题，但这个问题的求解方法却并不那么显而易见，需要较深入的思考和较好的算法素养才能得出良好的算法。这个问题能运用学过的基本的算法分析和设计的方法与思想，能够锻炼设计较复杂算法的思维。转自<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/">LeetCode #300.最长递增子序列</a></p></blockquote><h3 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h3><p>  给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。<br><strong>示例：</strong></p><blockquote><p>输入：nums &#x3D; [10, 9, 2, 5, 3, 7, 101, 18]<br>输出：4<br>解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</p></blockquote><h3 id="方法一：动态规划"><a href="#方法一：动态规划" class="headerlink" title="方法一：动态规划"></a>方法一：动态规划</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>  定义 dp[i] 为考虑前 i 个元素，以第 i 个数字结尾的最长上升子序列的长度，<strong>注意 nums[i] 必须被选取</strong>。我们从小到大计算 dp 数组的值，在计算 dp[i] 之前，我们已经计算出 dp[0]……dp[i-1] 的值，则状态转移方程为：**dp[i] &#x3D; max(dp[j]) + 1，其中 0 ≤ j ＜ i，且 num[j] ＜ num[i]**。即考虑往 dp[0]……dp[i-1] 中最长的上升子序列后面再加一个 nums[i] 。由于 dp[j] 代表 nums[0]….num[j] 中以 nums[j] 结尾的最长上升子序列长度，所以如果能从 dp[j] 这个状态转移过来，那么 nums[i] 必然要大于 nums[j]，才能将 nums[i] 放在 nums[j] 后面以形成更长的上升子序列。最后，整个数组的最长上升子序列即所有 dp[i] 中的最大值。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            maxans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><blockquote><ul><li><strong>时间复杂度：</strong>O(n<sup>2</sup>)，其中 n 为数组 nums 的长度。动态规划的状态数为 n，计算状态 dp[i] 时，需要 O(n) 的时间遍历 dp[0]……dp[i-1] 的所有状态，所以总时间复杂度为 O(n<sup>2</sup>)</li><li><strong>空间复杂度：</strong>O(n)，需要额外的长度为 n 的 dp 数组</li></ul></blockquote><h3 id="方法二：贪心-二分查找"><a href="#方法二：贪心-二分查找" class="headerlink" title="方法二：贪心 + 二分查找"></a>方法二：贪心 + 二分查找</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>  <strong>考虑一个简单的贪心，如果我们要使上升子序列尽可能的长，则我们需要让序列上升得尽可能慢，因此我们希望每次在上升子序列最后加上的那个数尽可能的小。</strong><br>  基于上面的贪心思路，我们维护一个数组 d[i]，表示长度为 i 的最长上升子序列的末尾元素的最小值，用 len 记录目前最长上升子序列的长度，起始时 len 为 1，d[1] &#x3D; nums[0]。同时我们可以注意到 d[i] 是关于 i 单调递增的。因为如果 d[j] ≥ d[i] 且 j &lt; i，我们考虑从长度为 i 的最长上升子序列的末尾删除 i−j 个元素，那么这个序列长度变为 j ，且第 j 个元素 x（末尾元素）必然小于 d[i]，也就小于 d[j]。那么我们就找到了一个长度为 j 的最长上升子序列，并且末尾元素比 d[j] 小，从而产生了矛盾。因此数组 d 的单调性得证。我们依次遍历数组 nums 中的每个元素，并更新数组 d 和 len 的值。如果 nums[i] &gt; d[len] 则更新 len &#x3D; len + 1，否则在 d[1……len]中找满足 d[j] &lt; nums[i] &lt; d[j+1] 的下标 j，并更新 d[j] &#x3D; nums[i]。根据 d 数组的单调性，我们可以使用二分查找寻找下标 j，优化时间复杂度。</p><blockquote><p><strong>最后整个算法流程为：</strong></p><ul><li>设当前已求出的最长上升子序列的长度为 len（初始时为1），从前往后遍历数组 nums，在遍历到 nums[i] 时：<blockquote><ul><li>如果 nums[i] &gt; d[len]，则直接更新 len &#x3D; len + 1；</li><li>否则，在 d 数组中二分查找，找到第一个比 nums[i] 小的数 d[k]，并更新 d[k+1]&#x3D;nums[i]</li></ul></blockquote></li></ul></blockquote><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                d<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> len<span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        pos <span class="token operator">=</span> mid<span class="token punctuation">;</span>                        l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                d<span class="token punctuation">[</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> len<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><blockquote><ul><li><strong>时间复杂度：</strong>O(n<em>log n)。数组 nums 的长度为 n，我们依次用数组中的元素去更新 d 数组，而更新 d 数组时需要进行 O(log n) 的二分搜索，所以总时间复杂度为 O(n</em>log n)。</li><li><strong>空间复杂度：</strong>O(n)，需要额外使用长度为 n 的 d 数组。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序模板</title>
      <link href="/posts/1d6aa5bd.html"/>
      <url>/posts/1d6aa5bd.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>快速排序由于排序效率在同为O(N*logN)的几种排序方法中效率较高，因此经常被采用。</p></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>  快速排序算法经常被采用，而且快速排序也采用了分治的思想，因此很多软件公司的笔试面试，包括像腾讯，微软等知名IT公司都喜欢考这个，还有大大小的程序方面的考试如软考，考研中也常常出现快速排序的身影。<br>  总的说来，要直接默写出快速排序还是有一定难度的，以下为快速排序的模板，希望对大家快速上手有帮助，达到快速排序，快速搞定的效果。</p><p><strong>该方法的基本思想是</strong>：</p><blockquote><ul><li>先从数列中取出一个数作为基准数。（通常就取最左边的数作为基准）</li><li>分区过程，将比这个数小的数全放到它的左边，大于或等于它的数全放到它的右边。（并不是很严谨）</li><li>再对左右区间重复第二步，直到各区间只有一个数。</li></ul></blockquote><h3 id="模板一-左右挖坑互填"><a href="#模板一-左右挖坑互填" class="headerlink" title="模板一(左右挖坑互填)"></a>模板一(左右挖坑互填)</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//Swap(s[l], s[(l + r) / 2]); //将中间的这个数和第一个数交换。参见注1</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 从右向左找第一个小于x的数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 从左向右找第一个大于等于x的数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> s<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归调用</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="模板二-左右交换"><a href="#模板二-左右交换" class="headerlink" title="模板二(左右交换)"></a>模板二(左右交换)</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//交换i、j位置元素</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//交换i、l位置元素</span>        s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归调用</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="模板三-顺序遍历交换"><a href="#模板三-顺序遍历交换" class="headerlink" title="模板三(顺序遍历交换)"></a>模板三(顺序遍历交换)</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//选取一个基准</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> base<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//交换</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>  快速排序还有很多改进版本，如随机选择基准数，区间内数据较少时直接用另的方法排序以减小递归深度。有兴趣的同学可以再深入的研究下。</p><p><strong>注1：</strong>有的书上是以中间的数作为基准数的，要实现这个方便非常方便，直接将中间的数和第一个数进行交换就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制状态压缩枚举子集</title>
      <link href="/posts/78d60332.html"/>
      <url>/posts/78d60332.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>二进制数可以用来表示一个状态，比如当我们需要去表示一个集合的子集时，可以用二进制数来表示该子集。</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>  比如有一个集合，集合中的元素为 {1, 5, 7, 9, 12}，如何快速找到其所有的子集合呢。这就可以采用二进制来压缩该集合，并枚举其所有的子集合状态。</p><h3 id="方法一：先二进制压缩，再枚举"><a href="#方法一：先二进制压缩，再枚举" class="headerlink" title="方法一：先二进制压缩，再枚举"></a>方法一：先二进制压缩，再枚举</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryStateEnumTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> set <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> binary <span class="token operator">=</span> <span class="token number">0b100101010001</span><span class="token punctuation">;</span><span class="token comment">//12位二进制数。将该集合压缩成一个二进制数。该二进制数从右往左非零元素所在位置对应set中的数</span>        <span class="token keyword">int</span> status <span class="token operator">=</span> binary<span class="token punctuation">;</span><span class="token comment">//最多只有 2^set.length 种状态，每个状态对应一个set的子集</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getBinaryString</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> <span class="token punctuation">(</span>status <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> binary<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//枚举状态包括0，即0b000000000000</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getBinaryString</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> <span class="token punctuation">(</span>status <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> binary<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//枚举状态不包括0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getBinaryString</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//保证输出长度为12位</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="方法二：直接二进制枚举"><a href="#方法二：直接二进制枚举" class="headerlink" title="方法二：直接二进制枚举"></a>方法二：直接二进制枚举</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryStateEnumTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> set <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> set<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">//枚举其子集状态</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    status <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> set<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最多左移11位，所以是一个12位二进制</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//status是一个12位二进制数表示的状态</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getBinaryString</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//枚举状态包括0，即0b000000000000</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> status <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    status <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> set<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getBinaryString</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//枚举状态不包括0</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getBinaryString</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//保证输出长度为5位</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集模板</title>
      <link href="/posts/83a4cde7.html"/>
      <url>/posts/83a4cde7.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>关于“并查集”的解释和使用场景网上有很多教程，这里就不在啰嗦了。仅提供代码模板方便知情人快速使用。</p></blockquote><h3 id="并查集的java实现"><a href="#并查集的java实现" class="headerlink" title="并查集的java实现"></a>并查集的java实现</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 开启了路径压缩和按秩合并的并查集</span><span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//顶点数目</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span><span class="token comment">//每个顶点所在连通分量的代表</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span><span class="token comment">//可以简单地理解为每个连通分量中的顶点个数</span>    <span class="token keyword">int</span> branchCount<span class="token punctuation">;</span><span class="token comment">// 当前连通分支数目</span>    <span class="token keyword">public</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>branchCount <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 路径压缩</span>        <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">unite</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 按秩合并</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> size<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> x<span class="token punctuation">;</span>            x <span class="token operator">=</span> y<span class="token punctuation">;</span>            y <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        parent<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        size<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">--</span>branchCount<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">branchCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> branchCount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口的最大值</title>
      <link href="/posts/454320df.html"/>
      <url>/posts/454320df.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>LeetCode中遇到的一道题，记录一下。<br>转自 <a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/mian-shi-ti-59-i-hua-dong-chuang-kou-de-zui-da-1-6/">求滑动窗口的最大值</a></p></blockquote><h3 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h3><p>  给定一个数组 nums 和滑动窗口的大小 k，要求找出所有滑动窗口中的最大值。<br><img src="/posts/454320df/1.png" alt="示例"><br>(可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的长度)</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路 1"></a>解题思路 1</h3><p><strong>单调队列</strong><br>  设窗口区间为 [i,j]，最大值为 x<sub>j</sub>。当窗口向前移动一格，则区间变为 [i+1, j+1]，即添加了 nums[j+1]，删除了 nums[i]。若只向窗口 [i,j] 右边添加数字 nums[j+1]，则新窗口最大值可以<strong>通过一次对比</strong>使用O(1)时间得到，即：x<sub>j+1</sub> &#x3D; max(x<sub>j</sub>, nums[j+1])。但是由于删除的 nums[i] 可能恰好是窗口内唯一的最大值 x<sub>j</sub>，因此不能通过以上方法直接计算 x<sub>j+1</sub>，而必须使用 O(j-i)时间，<strong>遍历整个窗口区间</strong>获取最大值，即：x<sub>j+1</sub> &#x3D; max(nums[i+1],···,nums[j+1])。<br>  根据以上分析可知，可得<strong>暴力法</strong>的时间复杂度为 O((n-k+1)k)≈O(nk)。①设数组nums的长度为n，则共有(n-k+1)个窗口；②获取每个窗口的最大值需线性遍历，时间复杂度为O(k)。<strong>本题的难点是：如何在每次窗口滑动后，将“获取窗口内最大值”的时间复杂度从O(k)降低至O(1)。</strong>回忆一下LeetCode中的这道题 <a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/solution/mian-shi-ti-30-bao-han-minhan-shu-de-zhan-fu-zhu-z/">面试题30. 包含min函数的栈</a>，其使用<strong>单调栈</strong>实现了<strong>随意入栈，出栈情况下的 O(1) 时间获取栈内最小值</strong>。本题同理，不同点在于“出栈操作”删除的是“列表尾部元素”，而“滑动窗口”删除的是“列表首部元素”。<br>  窗口对应的数据结构为<strong>双端队列</strong>，本题使用<strong>单调队列</strong>解决以上问题。遍历数组时，每轮保证单调队列 deque：</p><blockquote><ul><li>deque 内<strong>仅包含窗口内的元素</strong> ⇒ 每轮窗口滑动移除了元素 nums[i]，需将 deque 内的对应元素一起删除。</li><li>deque 内的元素<strong>非严格递减</strong> ⇒ 每轮窗口滑动添加了元素[j+1]，需将 deque 内所有小于nums[j+1]的元素删除。</li></ul></blockquote><h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><ol><li>初始化：双端队列deque，结果列表res，数组长度n;</li><li>滑动窗口：左边界范围 i ∈ [1-k, n-k+1]，右边界范围 j ∈ [0, n-1];<blockquote><ul><li>若 i &gt; 0 且队首元素 deque[0] &#x3D; 被删除元素nums[i-1]，则队首元素出队；</li><li>删除 deque 内所有小于nums[j]的元素，以保持 deque 递减;</li><li>将 nums[j] 添加至 deque 尾部;</li><li>若已形成窗口（即 i ≥ 0），将窗口最大值（即队首元素deque[0]）添加至列表 res 中。</li></ul></blockquote></li><li>返回结果 res</li></ol><p><img src="/posts/454320df/2.png" alt="流程示意图"></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li><strong>时间复杂度 O(n)：</strong>其中 n 为数组 nums 长度；线性遍历 nums 占用 O(N)；每个元素最多仅入队和出队一次，因此单调队列 deque 占用 O(2N)。</li><li><strong>空间复杂度 O(k)：</strong>双端队列 deque 中最多同时存储 k 个元素（即窗口大小）。</li></ul><h3 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeetCodeTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除 deque 中对应的 nums[i-1]</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保持 deque 递减</span>            <span class="token punctuation">&#125;</span>            deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录窗口最大值</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 可将未形成窗口和形成的窗口分开</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 未形成窗口</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 形成窗口后</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span>                deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路 2"></a>解题思路 2</h3><p><strong>优先队列(大根堆) + 延迟删除</strong><br>参考“滑动窗口求中位数”的算法（<a href="https://leetcode-cn.com/problems/sliding-window-median/solution/hua-dong-chuang-kou-zhong-wei-shu-by-lee-7ai6/">双优先队列(大根堆)+ 延迟删除</a>）<br>  由于优先队列是不支持移除非堆顶元素，因此可以考虑使用延迟删除的办法。即：<strong>当我们需要移除优先队列中的某个元素时，我们只是将这个删除操作记录下来，而不是立即马上真的去删除这个元素。当这个元素出现在堆顶时，我们再考虑真正去删除这个元素</strong>。<br>  延迟删除使用到的辅助数据结构一般为哈希表delayed，其中每个键值对(num,freq)表示 num 还需要被删除 freq 次。优先队列 + 延迟删除有非常多种设计方式，体现在延迟删除的时机选择上。这里我们使用一种比较容易编写代码的设计方式。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeetCodeTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">PriorityDelayQueue</span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityDelayQueue</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            heap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            heap<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            heap<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*优先队列（大根堆） + 延迟删除*/</span><span class="token keyword">class</span> <span class="token class-name">PriorityDelayQueue</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 大根堆，堆顶元素是最大值</span>    <span class="token keyword">private</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> heap<span class="token punctuation">;</span>    <span class="token comment">// 哈希表，记录需要延迟删除的元素，key为元素，value为需要删除的次数</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> delayed<span class="token punctuation">;</span>    <span class="token comment">// 窗口大小</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token comment">// 该数据结构中所维护的有效元素个数，需要扣除被延迟删除的元素</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PriorityDelayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> o2 <span class="token operator">-</span> o1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delayed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">prune</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 保证堆顶元素不是需要延迟删除的元素</span>        <span class="token keyword">return</span> heap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        heap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        delayed<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> delayed<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">--</span>size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 不断弹出 heap 的堆顶元素，并且更新哈希表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prune</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>delayed<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                delayed<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> delayed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>delayed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 该数不再被延迟删除时，直接从delayed中删除该数</span>                    delayed<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口中位数（优先队列 + 延迟删除）</title>
      <link href="/posts/11e854ad.html"/>
      <url>/posts/11e854ad.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>LeetCode中遇到的一道题，记录一下。<br>转自 <a href="https://leetcode-cn.com/problems/sliding-window-median/solution/hua-dong-chuang-kou-zhong-wei-shu-by-lee-7ai6/">求滑动窗口中的中位数</a></p></blockquote><h3 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h3><p>  中位数是有序序列最中间的那个数。如果序列的长度是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。给你一个数组 nums，有一个长度为 k 的窗口从最左端滑动到最右端。窗口中有 k 个数，每次窗口向右移动 1 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。（可以假设 k 始终有效，即：k 始终小于输入的非空数组的元素个数。）<br><img src="/posts/11e854ad/1.png" alt="示例"></p><h3 id="双优先队列-延迟删除"><a href="#双优先队列-延迟删除" class="headerlink" title="双优先队列 + 延迟删除"></a>双优先队列 + 延迟删除</h3><p><strong>思路与算法：</strong></p><p>我们首先思考一下完成本题需要做哪些事情：</p><blockquote><ul><li>初始时，我们需要将数组 nums 中的前 k 个元素放入一个滑动窗口中，并且求出它们的中位数。</li><li>随着滑动窗口会向右进行移动。每一次移动后，会将一个新的元素放入滑动窗口中，并且将一个旧的元素移除滑动窗口，最后在求出它们的中位数。</li></ul></blockquote><p>因此，我们需要设计一个<strong>「数据结构」</strong>，用来维护滑动窗口，并且需要提供如下的三个接口：</p><blockquote><ul><li>insert(num)：将一个数 num 加入该数据结构中</li><li>erase(num)：将一个数 num 移除该数据结构</li><li>getMedian()：返回当前数据结构中所有数的中位数</li></ul></blockquote><p>  我们可以使用两个优先队列(堆)维护窗口内的所有元素，第一个优先队列 small 是一个大根对堆，它负责维护所有元素中较小的那一半；第二个优先队列 large 是一个小根堆，它负责维护所有元素中较大的那一半。具体地，如果当前需要维护的元素个数为 x，那么 samll 中维护了 ⌈x&#x2F;2⌉ 个元素，large 中维护了 ⌊x&#x2F;2⌋ 个元素，其中⌈y⌉和⌊y⌋分别表示将 y 向上取整和向下取整。也就是说：<strong>samll 中的元素个数要么与 large 中的元素个数相同，要么比 large 中的元素个数恰好多 1 个</strong>。这样设计的好处在于：当二者包含的元素个数相同时，它们各自的堆顶元素的平均值即为中位数；而当 small 包含的元素多了一个时，small 的堆顶元素即为中位数。这样 getMedian() 就设计完成了。<br>  而对于 insert(num) 而言，如果当前两个优先队列都为空，那么根据元素个数的要求，我们必须将这个元素加入 small（显然不会存在 samll 空而 large 非空的情况）；如果 samll 非空，我们就可以将 num 与 samll 的堆顶元素top比较：</p><blockquote><ul><li>如果 num ≤ top，我们就将其加入 samll 中；</li><li>如果 num &gt; top，我们就将其加入 large 中。</li></ul></blockquote><p>  在成功地加入元素 num 之后，两个优先队列的元素个数可能会变得不符合要求。由于我们每次只是加入了一个元素，那么不符合要求的情况只能是下面二者之一：① small比large的元素个数多了2个；② small比large的元素个数少了1个。对于第一种情况，我们将 small 的堆顶元素放入 large 中；而对于第二种情况，我们将 large 的堆顶元素放入 samll 中。这样就可以解决问题了，insert(num)也就设计完成了。</p><p>  然而对于 erase(num) 而言，设计起来就不是那么容易了，因为我们知道<strong>优先队列是不支持移除非堆顶元素</strong>这一操作的，因此我们可以考虑使用<strong>「延迟删除」</strong>这一技巧，即：</p><blockquote><p>  当我们需要移除优先队列中的某个元素时，我们只将这个删除操作<strong>「记录」</strong>下来，而不去真的删除这个元素。当这个元素出现在 small 或者 large 的堆顶时，我们再去将其移除对应的优先队列。</p></blockquote><p>  <strong>「延迟删除」</strong>使用到的辅助数据结构一般为哈希表 delayed，其中的每个键值对 &lt;num, freq&gt;表示元素 num 还需要被删除 freq 次。<strong>「优先队列 + 延迟删除」</strong>其实有非常多的设计方式，体现在<strong>「延迟删除」</strong>的时机选择上。在本解题中，我们使用一种比较容易编写代码的设计方式，即：</p><blockquote><p>  我们保证在任意操作 insert(num)，erase(num)，getMedian()完成之后（或者说任意操作开始之前），small 和 large 的堆顶元素都是不需要被<strong>「延迟删除」</strong>的。这样设计的好处在于：我们无需更改 getMedian()的设计，只需要略加修改 insert(num) 即可。</p></blockquote><p>  我们首先设计一个辅助函数 prune(heap)，它的作用很简单，就是对 heap 这个优先队列（small或者large之一），不断地弹出其需要被删除的堆顶元素，并且减少 delayed 中对应项的值。在 prune(heap) 完成之后，我们就可以保证 <strong>heap 的堆顶元素是不需要被「延迟删除」的</strong>。<br>  这样我们就可以在 prune(heap) 的基础上设计出另一个辅助函数 makeBalance()，它的作用即为调整 small 和 large 中元素个数，使得二者元素满足要求。由于有了 erase(num) 以及<strong>「延迟删除」</strong>，我们在将一个优先队列的堆顶元素放入另一个优先队列后，第一个优先队列的堆顶元素可能变成为需要被删除的。因此我们就可以用 makeBalance() 将 prune(heap) 封装起来，它的逻辑如下：</p><blockquote><ul><li>如果 small 和 large 中的元素个数满足要求，则不进行任何操作；</li><li>如果 small 比 lareg 的元素个数多了 2 个，那么我们就将 small 的堆顶元素取出来放入 lareg 中。此时，small 的堆顶元素可能是需要被删除的，因此我们要调用 prune(small)；</li><li>如果 small 比 large 的元素个数少了 1 个，那么我们就将 large 的堆顶元素取出来放入 small 中。此时，large 的堆顶元素可能是需要被删除的，因此我们要调用 prune(large)。</li></ul></blockquote><p>  此时，我们只需要在原先 insert(num) 的设计的最后加上一步 makeBalance()即可。然而对于 erase(num)，我们还需要进行进一步的思考：</p><blockquote><ul><li>如果 num 与 small 和 large 的堆顶元素都不相同，那么 num 是需要被<strong>「延迟删除」</strong>的，我们将其在哈希表中的值增加 1；</li><li>否则，例如 num 与 small 的堆顶元素相同，那么该元素是可以被立即删除的。虽然我们并没有实现<strong>「立即删除」</strong>这个辅助函数，但只要我们将 num 在哈希表中的值增加 1，并且调用<strong>「延迟删除」</strong>的辅助函数 prune(small)，那么就相当于实现了<strong>「立即删除」</strong>的功能。</li></ul></blockquote><p>  无论是<strong>「立即删除」</strong>还是<strong>「延迟删除」</strong>，其中一个优先队列的元素个数发生了变化（减少了1），因此我们还需要用 makeBalance() 调整元素的个数。<br>  此时，所有的接口都已经设计完了。由于 insert(num) 和 erase(num) 的最后一步都是 makeBalance()，而 makeBalance() 的最后一步是 prune(heap)，因此我们就保证了任意操作完成之后，small 和 large 的堆顶元素都是不需要被<strong>「延迟删除」</strong>的。</p><h3 id="参考代码（java版）"><a href="#参考代码（java版）" class="headerlink" title="参考代码（java版）"></a>参考代码（java版）</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeetCodeTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token function">medianSlidingWindow</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">medianSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DualHeap</span> dh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DualHeap</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dh<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dh<span class="token punctuation">.</span><span class="token function">getMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dh<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dh<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dh<span class="token punctuation">.</span><span class="token function">getMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DualHeap</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 大根堆，维护窗口中较小的一半元素（堆顶元素为最大值）</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> small<span class="token punctuation">;</span>    <span class="token comment">// 小根堆，维护窗口中较大的一半元素（堆顶元素为最小值）</span>    <span class="token keyword">private</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> large<span class="token punctuation">;</span>    <span class="token comment">// 哈希表，记录「延迟删除」的元素：key为元素，value为需要删除的次数</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> delayed<span class="token punctuation">;</span>    <span class="token comment">// 窗口大小</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token comment">// samll 和 large 当前包含的有效元素个数，需要扣除被「延迟删除」的元素</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> smallSize<span class="token punctuation">,</span> largeSize<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DualHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化 大根堆</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>small <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> o2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化 小根堆</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>large <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delayed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>smallSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>largeSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getMedian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> small<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> small<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> large<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>small<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> num <span class="token operator">&lt;=</span> small<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            small<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>smallSize<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            large<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>largeSize<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">makeBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        delayed<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> delayed<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> small<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token operator">--</span>smallSize<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> small<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">prune</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token operator">--</span>largeSize<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> large<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">prune</span><span class="token punctuation">(</span>large<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">makeBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 不断地弹出 heap 的堆顶元素，并且更新哈希表</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">prune</span><span class="token punctuation">(</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> heap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>delayed<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                delayed<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> delayed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>delayed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    delayed<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 调整 small 和 large 中的元素个数，使得二者的元素个数满足要求</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">makeBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>smallSize <span class="token operator">></span> largeSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//small 比 large 元素多 2 个</span>            large<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>small<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">--</span>smallSize<span class="token punctuation">;</span>            <span class="token operator">++</span>largeSize<span class="token punctuation">;</span>            <span class="token function">prune</span><span class="token punctuation">(</span>small<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//small堆顶元素被移除，需要进行 prune，保证堆顶新元素已不再是需要被「延迟删除」的元素</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>smallSize <span class="token operator">&lt;</span> largeSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//large 比 small 元素多 1 个</span>            small<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>large<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">--</span>largeSize<span class="token punctuation">;</span>            <span class="token operator">++</span>smallSize<span class="token punctuation">;</span>            <span class="token function">prune</span><span class="token punctuation">(</span>large<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//large堆顶元素被移除，需要进行 prune，保证堆顶新元素已不再是需要被「延迟删除」的元素</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>  由于<strong>「延迟删除」</strong>的存在，small 比 large 在最坏情况下可能包含所有的 n 个元素，即没有一个元素被真正删除了。因此优先队列的大小是 O(n) 而不是 O(k) 的，其中 n 是数组 nums 的长度。</p><blockquote><ul><li>时间复杂度：O(nlog(n))。insert(num) 和 erase(num) 的单次时间复杂度为 O(log(n))，getMedian() 的单次时间复杂度为 O(1)。因此总时间复杂度为 O(nlog(n))。</li><li>空间复杂度：O(n)。即为 small，large 和 delayed 需要使用的空间。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约瑟夫环问题解释</title>
      <link href="/posts/737d07ed.html"/>
      <url>/posts/737d07ed.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>约瑟夫问题（有时也称为约瑟夫斯置换，是一个计算机科学和数学中的问题。在计算机编程的算法中，类似问题又称为约瑟夫环。又称“丢手绢问题”.）</p></blockquote><h3 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h3><blockquote><p>N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下一个，求最后的胜利者。</p></blockquote><p>  这个问题是在我刷剑指Offer时遇到的，看了很多大佬的解题，都是用数字在进行举例，看完还是有一些疑惑，直到看了这两篇文章（<a href="http://https//blog.csdn.net/u011500062/article/details/72855826">文章1</a>、<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/huan-ge-jiao-du-ju-li-jie-jue-yue-se-fu-huan-by-as/">文章2</a>）。这里换了个角度举例，或许会更清晰一些，欢迎大家讨论，并不吝赐教！</p><h3 id="问题转换"><a href="#问题转换" class="headerlink" title="问题转换"></a>问题转换</h3><p>  既然约瑟夫问题就是用人来举例的，那我们也给<strong>每个人一个编号（索引值）</strong>，每个人用<strong>字母</strong>代替。下面这个例子是N&#x3D;8，m&#x3D;6的例子。<br>  我们<strong>定义F(n,m)表示最后剩下那个人的索引号</strong>，因此我们只关系最后剩下来这个人的索引号的变化情况即可。（<strong>注意：该思路只关心最终活着那个人的序号变化</strong>）<br><img src="/posts/737d07ed/1.png" alt="示意图"><br>从8个人开始，每次杀掉一个人，去掉被杀的人，然后把杀掉那个人之后的第一个人作为开头重新编号：</p><blockquote><ul><li>第一次F被杀掉，人数变为7，G作为下一轮的开头（最终活下来的A的编号从0变成2）</li><li>第二次D被杀掉，人数变为6，E作为下一轮的开头（最终活下来的A的编号从2变成3）</li><li>第三次C被杀掉，人数变为5，E作为下一轮的开头（最终活下来的A的编号从3变成3）</li><li>以此类推，当值剩下A一个人时，他的编号必定为0！（<strong>这是重点，要圈起来</strong>）</li></ul></blockquote><h3 id="最后活着的人的编号反推"><a href="#最后活着的人的编号反推" class="headerlink" title="最后活着的人的编号反推"></a>最后活着的人的编号反推</h3><p>  我们现在知道了A的索引号的变化过程，那么我们反推一下从 N&#x3D;7 到 N&#x3D;8 的过程。如何才能将 N&#x3D;7 的排列变回到 N&#x3D;8 呢？我们先把被杀掉的 F 补充回来然后右移 m 个人，发现溢出了，再把溢出的补充在最前面，<strong>神奇了</strong> 经过这个操作就恢复了 N&#x3D;8 的排列了。如下图所示：<br><img src="/posts/737d07ed/2.png" alt="反推示意图"><br>  因此我们可推出递推公式非 f(8,6) &#x3D; (f(7,3) + 6) % 8，进行推广泛化后可以得到 f(n,m) &#x3D; (f(n-1,m) + m) % n。</p><h3 id="递推公式的导出"><a href="#递推公式的导出" class="headerlink" title="递推公式的导出"></a>递推公式的导出</h3><p>  在以上的推导结果中再把 n&#x3D;1 这个最初的情况加上，就能得到地推公式：<img src="/posts/737d07ed/3.png" alt="递推公式">。</p><h3 id="java代码实现"><a href="#java代码实现" class="headerlink" title="java代码实现"></a>java代码实现</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemain</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//最后活下来的那个人的初始位置（这里是反向推导）</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span><span class="token comment">//每次循环右移</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim用户手册</title>
      <link href="/posts/3b000b8f.html"/>
      <url>/posts/3b000b8f.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p></blockquote><h3 id="一、vim基础"><a href="#一、vim基础" class="headerlink" title="一、vim基础"></a>一、vim基础</h3><h4 id="1、插入文本"><a href="#1、插入文本" class="headerlink" title="1、插入文本"></a>1、插入文本</h4><blockquote><p>Vim 是一个多模式的编辑器。就是说，在不同模式下，编辑器的响应是不同的。在 普通模式 下，你敲入的字符只是命令；而在 插入模式 ，你敲入的字符就成为插入的文本了。当你刚刚进入Vim，它处在普通模式。通过敲入 “<code>i</code>“ 命令 ( i 是插入 ( Insert ) 的 缩写) 可以启动插入模式，这样你就可以输入文字了，这些文字将被插入到文件中。按<code>&lt;Esc&gt;</code>键退出插入模式回到普通模式。</p></blockquote><h4 id="2、移动光标"><a href="#2、移动光标" class="headerlink" title="2、移动光标"></a>2、移动光标</h4><p>在普通模式下，可以使用如下命令移动光标</p><table><thead><tr><th>按键</th><th>方向</th></tr></thead><tbody><tr><td>h</td><td>左</td></tr><tr><td>j</td><td>下</td></tr><tr><td>k</td><td>上</td></tr><tr><td>l</td><td>右</td></tr></tbody></table><h4 id="3、删除字符"><a href="#3、删除字符" class="headerlink" title="3、删除字符"></a>3、删除字符</h4><ol><li>删除一个字符<blockquote><p>把光标移动到它上面，然后输入<code>x</code>。（其实这是对以前的打字机的一种回归， 那时通过在字符上输 xxxx 来删除它）</p></blockquote></li><li>删除一整行<blockquote><p>使用<code>dd</code>命令，删除光标所在当前行，并将后一行移上来填充掉留下的空行。</p></blockquote></li><li>删除一个换行符<blockquote><p>在Vim中可以将两行连接起来，这意味着删除两行间的换行符。<code>J</code>命令用于完成这个功能。</p></blockquote></li></ol><h4 id="4、撤销与重做"><a href="#4、撤销与重做" class="headerlink" title="4、撤销与重做"></a>4、撤销与重做</h4><ol><li>撤销<blockquote><p>假设你删得太多了。当然，你可以重新输入需要的内容。不过，还有一个更简单的选择。<code>u</code>命令撤销上一个编辑操作。</p></blockquote></li><li>重做<blockquote><p>如果你撤销得太多，你可以输入<code>Ctrl-R(redo)</code>回退到前一个命令执行前。换句换说，它撤销一个撤销</p></blockquote></li><li>行撤销<blockquote><p>特殊的撤销命令。<code>U</code>行撤销命令撤销所有在最近编辑在行上的操作。输入该命令两次，取消前一个<code>U</code>。</p></blockquote></li></ol><pre class="language-vim" data-language="vim"><code class="language-vim">A very intelligent turtlexxxx 删除 veryA intelligent turtlexxxxxx 删除turtleA intelligent用 “U” 恢复行A very intelligent turtle用 “<span class="token keyword">u</span>” 撤销 “U”A intelligent</code></pre><p><code>U</code> 命令本身就是⼀个改变操作， <code>u</code> 命令撤销该操作， CTRL-R 命令重做该操作。有点乱。但不用担心，用 <code>u</code> 和 <code>CTRL-R</code> 命令你可以切换到任何你编辑过的状态。</p><h4 id="5、其他编辑命令"><a href="#5、其他编辑命令" class="headerlink" title="5、其他编辑命令"></a>5、其他编辑命令</h4><h5 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h5><blockquote><p><code>i</code>命令在光标所在字符前面插入字符，并把vim切换到插入模式。一般情况下，这就够用了，但如果你刚好想在行尾加东西要怎么办呢？ 这可以通过<code>a</code>（append，附加）命令实现。总结一下：<code>i</code>命令会进入插入模式，并在当前字符前进行插入。<code>a</code>命令也会进入插入模式，但是是在当前字符后进行插入。</p></blockquote><h5 id="开始一个新行"><a href="#开始一个新行" class="headerlink" title="开始一个新行"></a>开始一个新行</h5><blockquote><p><code>o</code>命令在光标下方建立一个新行，并把Vim切换到插入模式。然后你可以在这个新行内输入文本。同时，大写的<code>O</code>命令可在光标的上方建立一个新行，并把Vim切换到插入模式。</p></blockquote><p><strong>注意：</strong><br>  在使用<code>i</code>、<code>a</code>、<code>o</code>、<code>O</code>命令进入插入模式后，进行了一些插入操作后，退出插入模式回到普通模式，可使用<code>u</code>命令撤销此次插入操作，回到未插入前的状态。</p><h5 id="指定计数"><a href="#指定计数" class="headerlink" title="指定计数"></a>指定计数</h5><blockquote><p>假定你想向上移动9行，你可以使用<code>kkkkkkkkk</code>或者你可以直接输入<code>9k</code>。实际上，你可以在很多命令前加上一个数字。例如你可以通过输入<code>a!!!&lt;Esc&gt;</code>在当前光标所在位置后面增加三个感叹号。另一个方法是使用命令<code>3a!&lt;Esc&gt;</code>。计数3要求把后面的命令执行三次。同理<code>3x</code>删除三个字符。<strong>计数总是放在要被处理多次的命令的前面。</strong></p></blockquote><h4 id="6、退出"><a href="#6、退出" class="headerlink" title="6、退出"></a>6、退出</h4><h5 id="保存文件并退出"><a href="#保存文件并退出" class="headerlink" title="保存文件并退出"></a>保存文件并退出</h5><blockquote><p>使用大写的<code>ZZ</code>命令可以退出。这个命令保存当前文件并退出。与其他编辑器不一样，Vim不会自动建立一个备份文件。如果你输入<code>ZZ</code>，你的修改立即生效并且不能恢复。</p></blockquote><h5 id="放弃修改并退出"><a href="#放弃修改并退出" class="headerlink" title="放弃修改并退出"></a>放弃修改并退出</h5><blockquote><p>有时你会发现做了一系列的修改还不如不修改。Vim有放弃修改并退出的命令，那就是<code>:q!</code>，别忘了按回车使你的命令生效。</p><blockquote><p>该命令由三部分组成：<code>冒号（:）</code>，它使Vim进入命令模式；<code>q命令</code>，它告诉Vim退出；而<code>感叹号</code>是强制命令修饰符。这里强制修饰符是必要的，它强制性的要求Vim放弃修改并退出。如果你只是输入<code>:q</code>，Vim会显示一个错误信息并拒绝退出。</p><blockquote><p>如果你放弃修改后还想重新编辑，用<code>:e!</code>命令可以重新装载原来的文件。</p></blockquote></blockquote></blockquote><h3 id="二、移动"><a href="#二、移动" class="headerlink" title="二、移动"></a>二、移动</h3><h4 id="1、词移动"><a href="#1、词移动" class="headerlink" title="1、词移动"></a>1、词移动</h4><blockquote><ul><li><code>w</code>命令将光标移动到其右边的第一个单词的词首。可以在命令前加上数字前缀表示把这个命令重复多次。例如，<code>3w</code>表示将光标移动到其右边第3个单词的词首。</li><li><code>e</code>命令将光标移动到其右边第一个单词的词尾。<strong>注意：若当前光标已在一个单词的词尾，则移动到右边第一个单词的词尾；若当前光标不在当前单词的词尾，则移动到当前单词的词尾。</strong></li><li><code>b</code>命令将光标移动到其左边的第一个单词的词首。若当前光标已在一个单词的词首，则移动到左边第一个单词的词首；若当前光标不在当前单词的词首，则移动到当前单词的词首。</li><li><code>ge</code>命令将光标移动到其左边第一个单词的词尾。</li></ul></blockquote><h4 id="2、移动到行首或行尾"><a href="#2、移动到行首或行尾" class="headerlink" title="2、移动到行首或行尾"></a>2、移动到行首或行尾</h4><blockquote><ul><li><code>$</code>命令把光标移动到当前行行尾。如果你的键盘上有<code>End</code> 键，也可以完成相同的功能。</li><li><code>^</code>命令把光标移动到当前行的第一个非空字符。</li><li><code>0</code>命令把光标移动到当前行的第一个字符。<code>Home</code>键也可以完成相同的功能</li><li><code>1$</code>移动到当前行行尾。<code>3$</code>移动到其下第2行行尾。如此类推。</li></ul></blockquote><h4 id="3、移动到一个指定的字符"><a href="#3、移动到一个指定的字符" class="headerlink" title="3、移动到一个指定的字符"></a>3、移动到一个指定的字符</h4><blockquote><ul><li>单字符查找命令是最有效的移动命令之一。<code>fx</code>命令向右查找本行中的字符x，并移动光标到x处。<code>3fx</code>向右查找本行中的第3个字符x，并移动光标到此处。</li><li><code>F</code>命令由于向左查找。</li><li><code>t</code>命令与<code>f</code>命令相似，但它只是把光标移动到目标字符的前一个字符上。t表示To（到达）</li><li><code>T</code>命令与<code>t</code>方向相反</li><li>以上四个命令可以通过<code>;</code>命令重复，<code>,</code>命令用于反向重复。无论用以上那个命令，光标都不会移除当前行，只在当前行查找并移动。</li></ul></blockquote><h4 id="4、括号匹配"><a href="#4、括号匹配" class="headerlink" title="4、括号匹配"></a>4、括号匹配</h4><blockquote><p><code>%</code>命令能匹配一对括号（）、[]、{}。如果光标在<code>(</code>上，则它移动到对应的<code>)</code>上。反之，如果光标在<code>)</code>上，则它移动到对应的<code>(</code>上。</p></blockquote><h4 id="5、移动到指定的行"><a href="#5、移动到指定的行" class="headerlink" title="5、移动到指定的行"></a>5、移动到指定的行</h4><blockquote><ul><li><code>G</code>命令加上一个计数前缀，这个命令可以将光标制动到指定的行。如果没有指定计数前缀，那么<code>G</code>命令把光标移动到文件末。</li><li>移动到文件首的命令是<code>gg</code>。当然<code>1G</code>也能完成这个功能。</li><li>另一个定位行的方法是使用带计数前缀的<code>%</code>命令。例如<code>50%</code>移动到文件的中间，而<code>90%</code>移动到差不多结尾的位置。</li><li>提示：<blockquote><p><code>H</code>表示Home(头)、High(高)，<code>M</code>表示Middle(中)，而<code>L</code>表示Last(尾)、Low(低)。</p></blockquote></li></ul></blockquote><h4 id="6、确定当前位置"><a href="#6、确定当前位置" class="headerlink" title="6、确定当前位置"></a>6、确定当前位置</h4><ol><li><p>使用<code>CTRL-G</code>命令，你会或得如下消息</p><blockquote><p><code>&quot;file.txt line 233 of 650 --35%-- col 45-52&quot;</code><br>这里显示了你正在编辑的文件的名称，你所处的当前行的行号，全文的总行数，光标以前的行占全文的百分比，和你所处的列的列号。有时你会看到一个分开的两个列号。例如：“col 2-9”，表示光标处于第二个字符上，但是由于使用了制表符，在屏幕上的位置是9。</p></blockquote></li><li><p>位置<code>number</code>选项。这会在每行的前面加上一个行号</p><blockquote><ul><li>开启每行的行号显示 <code>:set number</code></li><li>关闭每行的行号显示 <code>:set nonumber</code><blockquote><p>由于<code>number</code>是一个布尔型类型的选项，在它前面加上<code>no</code>表示关闭它。布尔选项只会有两个值，<code>on</code>或者<code>off</code>。</p></blockquote></li></ul></blockquote></li><li><p>位置<code>ruler</code>选项。这会在Vim窗口的右下角显示当前光标的位置</p><blockquote><p><code>:set ruler</code></p></blockquote></li></ol><h4 id="7、滚屏"><a href="#7、滚屏" class="headerlink" title="7、滚屏"></a>7、滚屏</h4><ol><li><code>CTRL-U</code>和<code>CTRL-D</code>命令分别是向上滚动和向下滚动<strong>半个屏幕</strong>。</li><li><code>CTRL-E</code>和<code>CTRL-Y</code>命令分别是向上滚动和向下滚动<strong>一行</strong>。</li><li><code>CTRL-F</code>和<code>CTRL-B</code>命令分别是向前(forward)滚动和向后(backward)滚动<strong>一个屏幕</strong>。其实就是向下滚动和向上滚动，因为向下才是我们正常的阅读顺序，称为向前，相反则称为向后。</li><li>小写的<code>zz</code>命令，将当前的文字滚动到使得<strong>当前的光标所在行处于屏幕中央</strong>。上面我们知道，当使用<code>j</code>向下移动时，你的光标会处于屏幕的底部，其实有时你可能希望光标所在行处于屏幕的中间，这是就可以使用<code>zz</code>命令。<strong>注意：大写的<code>ZZ</code>命令是保存并退出</strong>。</li><li><code>zt</code>命令或<code>zb</code>命令，分别将当前的文字滚动到使得<strong>当前的光标所在行处于屏幕的顶部或底部</strong>。</li><li><strong>注意：要使光标上下总保留有几行(n)处于视窗中用作上下文，可以使用<code>:set scrolloff=n</code>选项，默认其实保留了5行</strong>。</li></ol><h4 id="8、简单查找"><a href="#8、简单查找" class="headerlink" title="8、简单查找"></a>8、简单查找</h4><ol><li><p>查找命令是<code>/String</code>。例如，要查找单词”include”，使用如下命令<code>/include</code>。输入好要查找的字符串后，<strong>使用<code>Enter</code>开始执行这个查找命令</strong>。</p><blockquote><ul><li>当输入“&#x2F;”时，光标会移动到Vim窗口的最后一行，这与<code>冒号命令</code>一样，在那里可以输入要查找的字符串。可以使用退格键(退格键头或&lt;BS&gt;)进行修改，如果需要，还可以使用&lt;Left&gt;和&lt;Right&gt;键。<code>/</code>不支持计数前缀。</li><li>要查找下一个匹配可以使用<code>n</code>命令。比如用<code>/include</code>查找时，输入<code>n</code>数次，你会移动到其后每一个找到的“include”上。如果你知道你想要的是第几个，那么可以在<code>n</code>命令前增加计数前缀。</li></ul></blockquote></li><li><p>忽略大小写</p><blockquote><p>通常，你必须区分大小写地输入你要查找的内容。如果你不在乎大小写，可以设置“ignorecase”选项：</p><blockquote><ul><li>不区分大小写查找字符串：<code>:set ignorecase</code></li><li>恢复到区分大小查找字符串的模式：<code>:set noignorecase</code></li></ul></blockquote></blockquote></li><li><p>历史记录</p><blockquote><p>假设你执行了一下三个查找命令：<br><code>/one</code>、<code>/two</code>、<code>/three</code></p><blockquote><p>现在我们输入<code>/</code>启动一次查找，但是先不按下回车键。现在按&lt;Up&gt;键，Vim将会把“&#x2F;three”放到你的命令行上。这时候回车就会从当前位置查找”three”。但如果不回车，继续按&lt;Up&gt;键，Vim会把“&#x2F;two”放到命令行上，而下一次会变成“&#x2F;one”。当然也可以使用&lt;Down&gt;键在历史记录中反向查找。</p><blockquote><p>如果你知道前面查找过的字符串以什么字母开头，而且你想再次使用这个字符串查找的话。可以在使用&lt;Up&gt;按键前输入开头的部分字母。比如在前面的例子中输入 “&#x2F;o&lt;Up&gt;”，就可以直接显示”&#x2F;one”这条查找历史记录。</p></blockquote></blockquote></blockquote></li><li><p>在文本中查找一个单词</p><blockquote><p>假设你在文本中看到一个单词“TheLongFunctionName”，而你想找到下一个相同的单词。你可以输入”&#x2F;TheLongFunctionName”，但只要输入一段很长的字符串，如果输入错了，Vim是不可能找到你想要的单词的。有一个简单的方法是：把光标移动到那个单词下面使用<code>*</code>命令。Vim会取得当前光标上的单词，并把它作为查找的字符串。而<code>#</code>命令反向完成相同的功能。<code>*</code>命令和<code>#</code>命令都可以加上计数前缀。（<code>*</code>、<code>#</code>是匹配整个单词，若要匹配词首和词尾，得使用<code>g*</code>和<code>g#</code>）。</p></blockquote></li><li><p>查找整个单词</p><blockquote><ul><li>如果你输入<code>/the</code>，你可以找到“there”。要找到以“the”结尾的单词，可以用<code>/the\&gt;</code>。其中”&gt;“是一个特殊的记号，<strong>表示只匹配单词末尾</strong>。类似地，“&lt;”只匹配单词的开头。若想完整地匹配一个单词“the”，需要使用<code>/\&lt;the\&gt;</code>。这样，就不会错误的匹配上“there”或者“soothe”。</li><li>其实<code>*</code>命令和<code>#</code>命令也使用了“词首”和“词尾”标记来匹配整个单词。（若想使用部分匹配，则使用<code>g*</code>和<code>g#</code>命令）</li></ul></blockquote></li><li><p><strong>高亮匹配</strong></p><blockquote><p>当你编辑一段代码的时候，你看见一个变量叫”nr”。你想查一下它在哪里被用到了，你可以把光标移动到”nr”下面，使用<code>*</code>命令，然后用<code>n</code>命令一个一个去遍历。还有一种更好的方法是使用<code>hlsearch</code>选项。<code>:set hlsearch</code>，开启该选项后，现在如果你查找“nr”，Vim会高亮显示所有匹配上的地方。<strong>这是一个很好的确定变量在哪被使用，而不需要输入更多命令的方法</strong>。关掉这个功能，请使用<code>:set nohlsearch</code>。如果这样做，下一次查找需要高亮显示又得重新<code>:set hlsearch</code>。如果你只是想去掉当前的高亮显示，而保留下一次查找时继续高亮显示的功能，你只需要使用<code>:nohlsearch</code>。这样的话，不会复位”hlsearch”选项，它只是关闭了当前查找词的高亮显示。当你执行下一次查找的时候，其高亮功能依然能够被正常使用。</p></blockquote></li><li><p>调节查找方式</p><blockquote><p>有一些选项能够改变查找命令的工作方式，其中有几个最基本的：</p><blockquote><ul><li><code>:set incsearch</code><blockquote><p>这个命令使Vim在你输入字符串的过程中就显示匹配点。用这个功能可以检查是否会被找到正确的匹配，这时按下&lt;Enter&gt;就可以真正地跳转到匹配的地方。</p></blockquote></li><li><code>:set nowrapscan</code><blockquote><p>这个设置使得找到文件末尾后停止查找，或者当你往回查找的时候遇到文件开头停止查找。默认情况下，<code>wrapscan</code>的状态是<code>on</code>。所以在找到文件尾的时候就会自动折返到文件头。</p></blockquote></li></ul></blockquote></blockquote></li></ol><h4 id="9、简单的查找模式"><a href="#9、简单的查找模式" class="headerlink" title="9、简单的查找模式"></a>9、简单的查找模式</h4><p>  Vim用正则表达式来定义要查找的对象。正则表达式是一种非常强大和紧凑的定义查找模式的方法。但是非常不幸，这种强大的功能是有代价的，因为使用它需要掌握一些技巧。</p><ol><li>行尾与行首</li></ol><h4 id="10、使用标记"><a href="#10、使用标记" class="headerlink" title="10、使用标记"></a>10、使用标记</h4><h4 id="11、返回目录"><a href="#11、返回目录" class="headerlink" title="11、返回目录"></a>11、返回目录</h4><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的最短路径算法</title>
      <link href="/posts/6a16f47a.html"/>
      <url>/posts/6a16f47a.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>图的最短路径问题是求图中两顶点间的最短路径问题。</p></blockquote><p>  在网图和非网图中，最短路径的含义不同。由于非网图它没有边上的权值，所谓的最短路径，其实就是指两顶点之间经过的边数最少的路径；而对于网图来说，最短路径是指两顶点之间经过的边上权值之和最少的路径，并且将路径上的第一个顶点称为源点，最后一个顶点称为终点。其实非网图完全可以理解成所有边的权值都为1的网。</p><h3 id="迪杰斯特拉（Dijkstra）算法"><a href="#迪杰斯特拉（Dijkstra）算法" class="headerlink" title="迪杰斯特拉（Dijkstra）算法"></a>迪杰斯特拉（Dijkstra）算法</h3><p>  这是一个按路径长度递增的次序产生最短路径的算法。并不是一下子求出两顶点间的最短路径，而是一步步求出它们之间顶点的最短路径，过程中都是基于已经求出的最短路径的基础上，求得更远顶点的最短路径，最终得到想要的结果。<br><img src="/posts/6a16f47a/1.png"></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//图数据结构（邻接矩阵的方式）</span><span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> INFINITY <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token comment">//很大很大的数</span>    <span class="token keyword">int</span> vexNum <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//顶点数目</span>    <span class="token comment">//邻接矩阵</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrapTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Graph</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> from <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//起点</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shortestPath</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shortDis <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Dijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showPath</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> from<span class="token punctuation">,</span> shortDis<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//迪杰斯特拉（Dijkstra）算法，计算起点到其他点的最短路径 O(n^2)</span><span class="token keyword">class</span> <span class="token class-name">Dijkstra</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">shortestPath</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span>vexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//D[w]表示顶点到from的最短路径</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">P</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span>vexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//P[w]表示最后到达w经过的顶点，即最后一步为P[w]-->w</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> find <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span>vexNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//find[w]=1表示求得顶点from至w的最短路径</span>        <span class="token comment">//初始化数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">D</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>adj<span class="token punctuation">[</span>from<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">P</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> from<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">D</span><span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        find<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//开始主循环，每次求得from到某个顶点v的最短路径</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> min<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>find<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">D</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    min <span class="token operator">=</span> <span class="token class-name">D</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                    k <span class="token operator">=</span> w<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            find<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//表示已求得from到k的最短路径</span>            <span class="token comment">/*当顶点from到k的目前最短距离找到后，k到w若还有距离，就得考虑是否要修改D[w]。因为from到k的距离加上k到w的距离可能小于当前的D[w]*/</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>find<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> g<span class="token punctuation">.</span>adj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">D</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">D</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>min <span class="token operator">+</span> g<span class="token punctuation">.</span>adj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token class-name">P</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token comment">//k到w若还有距离，就得考虑是否要修改D[w]。因为from到k的距离加上k到w的距离可能小于当前的D[w]</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showPath</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//打印shortDis数组</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>each <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>each <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打印从from顶点到各顶点最短距离的路径</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">" &lt;-- "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> from<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">" &lt;-- "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-text" data-language="text"><code class="language-text">0 1 4 7 5 8 10 12 160 &lt;-- 01 &lt;-- 02 &lt;-- 1 &lt;-- 03 &lt;-- 4 &lt;-- 2 &lt;-- 1 &lt;-- 04 &lt;-- 2 &lt;-- 1 &lt;-- 05 &lt;-- 4 &lt;-- 2 &lt;-- 1 &lt;-- 06 &lt;-- 3 &lt;-- 4 &lt;-- 2 &lt;-- 1 &lt;-- 07 &lt;-- 6 &lt;-- 3 &lt;-- 4 &lt;-- 2 &lt;-- 1 &lt;-- 08 &lt;-- 7 &lt;-- 6 &lt;-- 3 &lt;-- 4 &lt;-- 2 &lt;-- 1 &lt;-- 0</code></pre><p>  通过迪杰斯特拉（Dijkstra）算法，可以解决从某个顶点到其余各顶点的最短路径问题。从循环嵌套可以很容易得到此算法的时间复杂度为 O(n<sup>2</sup>)。能不能只找到从源点到某一个特定终点的最短路径呢？其实这个问题和求解源点到其他所有顶点的最短路径一样复杂，时间复杂度依然是 O(n<sup>2</sup>)。<br>  如果需要知道V<sub>3</sub>到V<sub>5</sub>、V<sub>1</sub>到V<sub>7</sub>这样的任一顶点到其余所有顶点的最短路径怎么办呢？此时简单的办法就是对每个顶点当做源点运行一次迪杰斯特拉（Dijktra）算法，等于在原有算法的基础上，再来一个循环，此时整个算法的时间复杂度就成了 O(n<sup>3</sup>)。</p><h3 id="弗洛伊德（Floyd）算法"><a href="#弗洛伊德（Floyd）算法" class="headerlink" title="弗洛伊德（Floyd）算法"></a>弗洛伊德（Floyd）算法</h3><p>  该算法求得所有顶点到所有顶点的最短路径的时间复杂度也是 O(n<sup>3</sup>)，但其算法非常简洁优雅。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//图数据结构（邻接矩阵的方式）</span><span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> INFINITY <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token comment">//很大很大的数</span>    <span class="token keyword">int</span> vexNum <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//顶点数目</span>    <span class="token comment">//邻接矩阵</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> adj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrapTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFloyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Graph</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shortestPath</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shortDis <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showPath</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> shortDis<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//弗洛伊德（Floyd）算法，计算任意两顶点间的最短路径 O(n^3)</span><span class="token keyword">class</span> <span class="token class-name">Floyd</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">shortestPath</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> g<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">D</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span>vexNum<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span>vexNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//顶点到顶点的最短路径长度</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">P</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span>vexNum<span class="token punctuation">]</span><span class="token punctuation">[</span>g<span class="token punctuation">.</span>vexNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//对应顶点的最小路径的前驱矩阵</span>        <span class="token keyword">int</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/*初始化D与P*/</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">D</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token punctuation">.</span>adj<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">P</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> v<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> g<span class="token punctuation">.</span>INFINITY <span class="token operator">||</span> <span class="token class-name">D</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> g<span class="token punctuation">.</span>INFINITY<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token class-name">D</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token class-name">D</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//如果经过下标为k顶点路径比原两顶点路径更短，将当前两点间权值设为更小的一个</span>                        <span class="token class-name">D</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">D</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token class-name">D</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token class-name">P</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*路径设置为经过下标k的顶点*/</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token class-name">P</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showPath</span><span class="token punctuation">(</span><span class="token class-name">Graph</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">D</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">P</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> v<span class="token punctuation">,</span> w<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> <span class="token operator">++</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>w <span class="token operator">=</span> v <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> g<span class="token punctuation">.</span>vexNum<span class="token punctuation">;</span> <span class="token operator">++</span>w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> v <span class="token operator">+</span> <span class="token string">"]"</span> <span class="token operator">+</span> <span class="token string">"--"</span> <span class="token operator">+</span> <span class="token class-name">D</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"-->["</span> <span class="token operator">+</span> w <span class="token operator">+</span> <span class="token string">"]: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token string">" -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">" -> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    k <span class="token operator">=</span> <span class="token class-name">P</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-text" data-language="text"><code class="language-text">[0]--1-->[1]: 0 -> 1[0]--4-->[2]: 0 -> 1 -> 2[0]--7-->[3]: 0 -> 1 -> 2 -> 4 -> 3[0]--5-->[4]: 0 -> 1 -> 2 -> 4[0]--8-->[5]: 0 -> 1 -> 2 -> 4 -> 5[0]--10-->[6]: 0 -> 1 -> 2 -> 4 -> 3 -> 6[0]--12-->[7]: 0 -> 1 -> 2 -> 4 -> 3 -> 6 -> 7[0]--16-->[8]: 0 -> 1 -> 2 -> 4 -> 3 -> 6 -> 7 -> 8[1]--3-->[2]: 1 -> 2[1]--6-->[3]: 1 -> 2 -> 4 -> 3[1]--4-->[4]: 1 -> 2 -> 4[1]--7-->[5]: 1 -> 2 -> 4 -> 5[1]--9-->[6]: 1 -> 2 -> 4 -> 3 -> 6[1]--11-->[7]: 1 -> 2 -> 4 -> 3 -> 6 -> 7[1]--15-->[8]: 1 -> 2 -> 4 -> 3 -> 6 -> 7 -> 8[2]--3-->[3]: 2 -> 4 -> 3[2]--1-->[4]: 2 -> 4[2]--4-->[5]: 2 -> 4 -> 5[2]--6-->[6]: 2 -> 4 -> 3 -> 6[2]--8-->[7]: 2 -> 4 -> 3 -> 6 -> 7[2]--12-->[8]: 2 -> 4 -> 3 -> 6 -> 7 -> 8[3]--2-->[4]: 3 -> 4[3]--5-->[5]: 3 -> 4 -> 5[3]--3-->[6]: 3 -> 6[3]--5-->[7]: 3 -> 6 -> 7[3]--9-->[8]: 3 -> 6 -> 7 -> 8[4]--3-->[5]: 4 -> 5[4]--5-->[6]: 4 -> 3 -> 6[4]--7-->[7]: 4 -> 3 -> 6 -> 7[4]--11-->[8]: 4 -> 3 -> 6 -> 7 -> 8[5]--7-->[6]: 5 -> 7 -> 6[5]--5-->[7]: 5 -> 7[5]--9-->[8]: 5 -> 7 -> 8[6]--2-->[7]: 6 -> 7[6]--6-->[8]: 6 -> 7 -> 8[7]--4-->[8]: 7 -> 8</code></pre><p>  弗洛伊德（Floyd）算法的代码非常简洁，是一个二重循环初始化加一个三重循环权值修正，其完成了所有顶点到所有顶点的最短路径计算。但是很可惜，它的时间复杂度是 O(n<sup>3</sup>)。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连通图的最小生成树算法</title>
      <link href="/posts/4a73b033.html"/>
      <url>/posts/4a73b033.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在线性表中，数据元素之间是被串起来的，仅有线性关系，每个数据元素只有一个直接前驱和一个直接后继。在树形结构中，数据元素之间有着明显的层次关系，并且每一层上的数据元素可能和下一层中多个元素相关，但只能和上一层中一个元素想关。这和一对父母可以有多个孩子，但每个孩子却只能有一对父母是一个道理。可现实中，人与人之间关系就非常复杂，比如我认识的朋友，可能他们之间也相互认识，这就不是简单的一对一、一对多的关系，研究人际关系很自然就会考虑到多对多的情况。也就是这篇博客的主题——图。图是一种较线性表和树更加复杂的数据结构。在图形结构中，节点之间的关系可以是任意的，图中任意两个数据元素之间都可能相关。</p></blockquote><h3 id="一、图的相关定义"><a href="#一、图的相关定义" class="headerlink" title="一、图的相关定义"></a>一、图的相关定义</h3><h4 id="1、图："><a href="#1、图：" class="headerlink" title="1、图："></a>1、图：</h4><p>  图（Grap）是由顶点<strong>的有穷非空集合</strong>和<strong>顶点之间的边集合</strong>组成，通常表示为：G（V,E），其中，G表示一个图；V是图G中顶点的集合；E是图G中边的集合。</p><blockquote><ul><li>通常线性表中我们把数据元素叫做元素，树中将数据元素叫做结点，<strong>在图中数据元素，则称之为顶点（Vertex）</strong>。</li><li>线性表中可以没有数据元素，称为<strong>空表</strong>。树中可以没有结点，叫做<strong>空树</strong>。但是在图结构中，不允许没有顶点。在定义中，若 V 是顶点的集合，则强调了顶点集合 V 有穷非空。</li><li>在线性表中，相邻的数据元素之间具有线性关系；在树结构中，相邻两层的结点具有层次关系。而在图中，<strong>任意两个顶点之间都可能有关系，顶点之间的逻辑关系用边来表示，边集可以是空的</strong>。</li></ul></blockquote><h4 id="2、无向边："><a href="#2、无向边：" class="headerlink" title="2、无向边："></a>2、无向边：</h4><blockquote><table><thead><tr><th>示意图</th><th>说明</th></tr></thead><tbody><tr><td><img src="/posts/4a73b033/1.png"></td><td>若顶点 V<sub>i</sub> 到 V<sub>j</sub> 之间的边没有方向，则称这条边为<strong>无向边（Edge）</strong>，用无序偶对（V<sub>i</sub>,V<sub>j</sub>）来表示。如果图中任意两个顶点之间的边都是无向边，则称该图为<strong>无向图</strong>。左侧就是一个无向图，由于是无方向的，连接顶点A与D的边，可以表示成无序对（A,D），也可以写成（D,A）。</td></tr></tbody></table></blockquote><h4 id="3、有向边："><a href="#3、有向边：" class="headerlink" title="3、有向边："></a>3、有向边：</h4><blockquote><table><thead><tr><th>示意图</th><th>说明</th></tr></thead><tbody><tr><td><img src="/posts/4a73b033/2.png"></td><td>若从顶点 V<sub>i</sub> 到 V<sub>j</sub> 之间的边有方向，则这条边为有向边，也称为<strong>弧（Arc）</strong>。用有序偶&lt;V<sub>i</sub>,V<sub>j</sub>&gt;来表示，V<sub>i</sub>称为弧尾（Tail），V<sub>j</sub>称为弧头（Head）。如果图中任意两个顶点之间的边都是有向边，则称该图为<strong>有向图</strong>。左图就是一个有向图，连接顶点A到D的有向边就是弧，A是弧尾，D是弧头，&lt;A,D&gt;表示该弧，不能写成&lt;D,A&gt;</td></tr></tbody></table></blockquote><h4 id="4、简单图："><a href="#4、简单图：" class="headerlink" title="4、简单图："></a>4、简单图：</h4><blockquote><ul><li>在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为简单图。</li></ul></blockquote><h4 id="5、完全图："><a href="#5、完全图：" class="headerlink" title="5、完全图："></a>5、完全图：</h4><blockquote><ul><li>在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图。含有n个顶点的无向完全图有n*(n-1)&#x2F;2条边。</li><li>在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图。含有n个顶点的有向完全图有n*(n-1)条边。</li><li><strong>这里可以得出结论，对于具有n个顶点和e条边数的图，无向图 0≤e≤n(n-1)&#x2F;2，有向图 0≤e≤n(n-1)</strong></li></ul></blockquote><h4 id="6、网（带权图）"><a href="#6、网（带权图）" class="headerlink" title="6、网（带权图）"></a>6、网（带权图）</h4><blockquote><p>有些图的边或者弧具有与它相关的数字，这种与图的边或弧相关的数叫做<strong>权（Weight）。</strong>这些权可以表示从一个顶点到另一个顶点的距离或耗费。<strong>这种带权的图通常称为网</strong>。</p></blockquote><h4 id="7、子图"><a href="#7、子图" class="headerlink" title="7、子图"></a>7、子图</h4><blockquote><table><thead><tr><th>示意图</th><th>说明</th></tr></thead><tbody><tr><td><img src="/posts/4a73b033/3.png"></td><td>假设有两个图 G &#x3D; (V,{E})和 G<sup>‘</sup> &#x3D; (V<sup>‘</sup>,{E<sup>‘</sup>})，如果V<sup>‘</sup>∈V且E<sup>‘</sup>∈E，则称G<sup>‘</sup>为G的子图。例如左侧所示的有向图和无向图的子图。</td></tr></tbody></table></blockquote><h4 id="8、图的顶点与边之间的关系"><a href="#8、图的顶点与边之间的关系" class="headerlink" title="8、图的顶点与边之间的关系"></a>8、图的顶点与边之间的关系</h4><p><strong>对于无向图：</strong><br>  无向图 G &#x3D; (V,{E})，如果边(V,V<sup>‘</sup>)∈E，则称顶点V和V<sup>‘</sup>互为邻接点（Adjacent），即V和V<sup>‘</sup>相邻接。边(V,V<sup>‘</sup>)依附（incident）于顶点V和V<sup>‘</sup>，或者说(V,V<sup>‘</sup>)与顶点V和V<sup>‘</sup>相关联。<strong>顶点V的度（Degree）</strong>是和V相关联的边的数目，记为 <strong>TD(V)<strong>。如上图A与B互为邻接点，边（A,B）依附于顶点A与B上，顶点A的度为3。</strong>其实边数就是各顶点度数和的一半，多出的一半是因为重复计数了。</strong></p><p><strong>对于有向图：</strong><br>  有向图 G &#x3D; (V,{E})，如果弧&lt;V,V<sup>‘</sup>&gt;∈E，则称顶点V邻接到顶点V<sup>‘</sup>，顶点V<sup>‘</sup>邻接自顶点V。弧&lt;V,V<sup>‘</sup>&gt;和顶点V，V<sup>‘</sup>相关联。以顶点v为头的弧的数目称为V的<strong>入度</strong>，记为 ID(V)；以V为尾的弧的数目称为V的<strong>出度</strong>，记为OD(V)；顶点V的度为TD(V)&#x3D;ID(V)+OD(V)。<strong>其实边数就是各顶点的出度和，也是各顶点的入度和。</strong></p><h4 id="9、路径和环"><a href="#9、路径和环" class="headerlink" title="9、路径和环"></a>9、路径和环</h4><p>  无向图 G &#x3D; (V,{E}) 中从顶点V到顶点V<sup>‘</sup>的路径是一个顶点序列(V&#x3D;V<sub>i,0</sub>,V<sub>i,1</sub>······V<sub>i,m</sub>&#x3D;V<sup>‘</sup>)，其中(V<sub>i,j-1</sub>,V<sub>i,j</sub>)∈E，1≤j≤m。如果 G 是有向图，则路径也是有向的，顶点序列应满足&lt;V<sub>i,j-1</sub>,V<sub>i,j</sub>&gt;∈E，1≤j≤m。<br>  <strong>树中根结点到任意结点的路径是唯一的，但是图中顶点与顶点之间的路径却是不唯一的。</strong>路径的长度是路径上的边或弧的数目。第一个顶点到最后一个顶点相同的路径称为<strong>回路</strong>或<strong>环</strong>。序列中顶点不重复出现的路径称为<strong>简单路径</strong>。除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路，称为<strong>简单回路</strong>或<strong>简单环</strong>。<br><img src="/posts/4a73b033/4.png" alt="左侧是简单环，右侧不是简单环"></p><h4 id="10、连通图相关术语"><a href="#10、连通图相关术语" class="headerlink" title="10、连通图相关术语"></a>10、连通图相关术语</h4><h5 id="无向图中"><a href="#无向图中" class="headerlink" title="无向图中"></a>无向图中</h5><p>  在无向图 G 中，如果从顶点V到顶点V<sup>‘</sup>有路径，则称<strong>V和V<sup>‘</sup>是连通的</strong>。如果对于图中任意两个顶点V<sub>i</sub>、V<sub>j</sub>∈V，V<sub>i</sub>和V<sub>j</sub>都是连通的，则称 G 是<strong>连通图</strong>。<strong>无向图中的极大连通子图称为连通分量</strong>。连通分量强调：</p><blockquote><ul><li>要是子图；</li><li>子图要是连通的；</li><li>连通子图含有极大顶点数；</li><li>具有极大顶点数的连通子图包含依附于这些顶点的所有边。</li></ul></blockquote><h5 id="有向图中"><a href="#有向图中" class="headerlink" title="有向图中"></a>有向图中</h5><p>  在有向图 G 中，如果对于每一对V<sub>i</sub>、V<sub>j</sub>∈V、V<sub>i</sub>≠V<sub>j</sub>，从V<sub>i</sub>到V<sub>j</sub>和从V<sub>j</sub>到V<sub>i</sub>都存在路径，则称 G 是<strong>强连通图</strong>。<strong>有向图中的极大强连通子图称做有向图的强连通分量。</strong></p><h4 id="11、连通图的生成树"><a href="#11、连通图的生成树" class="headerlink" title="11、连通图的生成树"></a>11、连通图的生成树</h4><p>  所谓的一个连通图的生成树是一个极小的连通子图，它含有图中全部的 n 个顶点，但只有足以构成一棵树的 n-1 条边。如果一个图有 n 个顶点和小于 n-1 条边，则该图是非连通图。如果它有多于 n-1 条边，则必定构成一个环，因为这条边使得它依附的那两个顶点之间有了第二条路径。不过有 n-1 条边，并不一定是生成树。<br>  如果一个有向图恰好有一个顶点的入度为0，其余顶点的入度均为1，则是一颗有向树。对有向树的理解比较容易，所谓入度为0其实就相当于树中的根结点，其余顶点入度为1就是说树的非根节点的双亲只有一个。一个有向图的生成森林由若干棵有向树组成，含有图中全部顶点，但是有足以构成若干棵不相交的有向弧。</p><h4 id="12、图的定义与术语总结"><a href="#12、图的定义与术语总结" class="headerlink" title="12、图的定义与术语总结"></a>12、图的定义与术语总结</h4><ol><li><strong>图</strong>按照有无方向分为<strong>无向图</strong>和<strong>有向图</strong>。无向图由<strong>顶点</strong>和<strong>边</strong>构成，有向图由顶点和<strong>弧</strong>构成。弧有<strong>弧尾</strong>和<strong>弧头</strong>之分。</li><li>图按照边或弧的多少分为<strong>稀疏图</strong>和<strong>稠密图</strong>。如果任意两个顶点之间都存在边叫<strong>完全图</strong>，有向图的叫<strong>有向完全图</strong>。若无重复的边或顶点到自身的边叫<strong>简单图</strong>。</li><li>图中顶点之间有<strong>邻接点、依附</strong>的概念。无向图顶点的边数叫做<strong>度</strong>，有向图顶点分为<strong>入度</strong>和<strong>出度</strong>。</li><li>若图上的边或弧带<strong>权</strong>，则称为<strong>网</strong>。</li><li>图中顶点间存在<strong>路径</strong>，两顶点存在路径则说明是<strong>连通</strong>的，如果路径最终回到起始点则称为<strong>环</strong>，当中不重复叫<strong>简单路径</strong>。若任意两顶点都是连通的，则图就是<strong>连通图</strong>，有向则是<strong>强连通图</strong>。图中有子图，若子图极大连通则就是<strong>连通分量</strong>，有向图则称为<strong>强连通分量</strong>。</li><li>无向图中连通且 n 个顶点 n-1 条边叫做<strong>生成树</strong>。有向图中一顶点入度为0，其余顶点入度为1的叫做<strong>有向树</strong>。一个有向图由若干棵有向树构成<strong>生成森林</strong>。</li></ol><h3 id="二、连通图的最小生成树算法"><a href="#二、连通图的最小生成树算法" class="headerlink" title="二、连通图的最小生成树算法"></a>二、连通图的最小生成树算法</h3><p><img src="/posts/4a73b033/5.png" alt="连通带权无向图"><br>  如上是一个带权值的图，即网结构。所谓的最小成本，就是 n 个顶点，用 n-1 条边把一个连通图连接起来，并使得权值的和最小。</p><table><thead><tr><th>方案一</th><th>方案二</th><th>方案三</th></tr></thead><tbody><tr><td><img src="/posts/4a73b033/6.png"></td><td><img src="/posts/4a73b033/7.png"></td><td><img src="/posts/4a73b033/8.png"></td></tr><tr><td>11+26+20+22+18+21+24+19&#x3D;161</td><td>8+12+10+11+17+19+16+7&#x3D;100</td><td>8+12+10+11+16+19+7&#x3D;99</td></tr></tbody></table><p>  一个连通图的生成树是一个极小的连通子图，它含有图中全部的顶点，但只有足以构成一颗树的 n-1 条边。以上三个方案都是上图的生成树。<strong>我们将构造连通网的最小代价生成树称为最小生成树</strong>。</p><h4 id="1、普里姆算法（Prim）"><a href="#1、普里姆算法（Prim）" class="headerlink" title="1、普里姆算法（Prim）"></a>1、普里姆算法（Prim）</h4><table><thead><tr><th>带权连通图</th><th>邻接矩阵</th></tr></thead><tbody><tr><td><img src="/posts/4a73b033/5.png"></td><td><img src="/posts/4a73b033/9.png"></td></tr></tbody></table><p>  普里姆（Prim）算法的实现过程定义如下：假设 N &#x3D; (P,{E}) 是<strong>连通图</strong>，TE 是 N 上最小生成树中边的集合。算法从 U &#x3D; {u<sub>0</sub>} (u<sub>0</sub>∈V)，TE &#x3D; {} 开始。重复执行以下操作：在所有 u∈U，v∈V-U 的边 (u,v)∈E 中找一条代价最小的边 (u<sub>0</sub>,v<sub>0</sub>)并入集合TE，同时v<sub>0</sub>并入U，直到 U &#x3D; V 为止。此时 TE 中必有 n-1 条边，则 T &#x3D; (V,{TE}) 为 N 的最小生成树。由算法代码中的循环嵌套可得知此算法的时间复杂度为 O(n<sup>2</sup>)</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MGrap</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> INFINITY <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span><span class="token comment">//很大很大的数</span>    <span class="token keyword">int</span> numVertexes <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arc <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrapTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MGrap</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MGrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MiniSpanTree_Prim</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">MiniSpanTree_Prim</span><span class="token punctuation">(</span><span class="token class-name">MGrap</span> <span class="token class-name">G</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> min<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> adjvex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lowcost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">]</span><span class="token punctuation">;</span>        lowcost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//相当于先将 V0 加入生成树</span>        adjvex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//lowcost[i]永远代表的是边adjvex[i]-->i的代价</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">G</span><span class="token punctuation">.</span>arc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// V0到其他各顶点的代价，因为目前生成树中只有V0</span>            adjvex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            min <span class="token operator">=</span> <span class="token class-name">G</span><span class="token punctuation">.</span>INFINITY<span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//已经加入到最小生成树中的顶点，其对应的lowcost值为0</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    min <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    k <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//将 Vk 加入生成树</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>adjvex<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" --> "</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印拥有最小权值的边</span><span class="token comment">//新的顶点加入到生成树集合后，lowcost和adjvex数组会有相应的变化</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    lowcost<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">G</span><span class="token punctuation">.</span>arc<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    adjvex<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2、克鲁斯卡尔算法（Kruskal）"><a href="#2、克鲁斯卡尔算法（Kruskal）" class="headerlink" title="2、克鲁斯卡尔算法（Kruskal）"></a>2、克鲁斯卡尔算法（Kruskal）</h4><p>  普里姆（Prim）算法是以某顶点为起点，逐步找各顶点上最小权值的边来构建最小生成树。其实，我们也可以直接以边为目标区构建，因为权值是在边上，直接去找最小权值的边来构建生成树也是很自然的想法，但是构建时要考虑是否会形成环路。此时要用到图的存储结构中的边集数据结构。<br>  克鲁斯卡尔（Kruskal）算法的实现过程定义如下：假设 N &#x3D; (V,{E}) 是连通网，则令最小生成树的初始状态为只有 n 个顶点而无边的非连通图 T &#x3D; {V,{}}，图中每个顶点自成一个连通分量。在 E 中选择代价最小的边，若该边依附的顶点落在 T 中不同的连通分量上，则将此边加入到 T 中，否则舍弃此边而选择下一条代价最小的边。依次类推，直至 T 中所有顶点都在同一连通分量上为止。此算法的find函数由边数 e 决定，时间复杂度为 O(log(e))，而外层有一个 for 循环 e 次。所以克鲁斯卡尔算法的<strong>时间复杂度为 O(e*log(e))</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Edge</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>begin <span class="token operator">=</span> begin<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> begin <span class="token operator">+</span> <span class="token string">"---"</span> <span class="token operator">+</span> end <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MGrap</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> INFINITY <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span><span class="token comment">//很大很大的数</span>    <span class="token keyword">int</span> numVertexes <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numEdges <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arc <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>INFINITY<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> INFINITY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GrapTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MGrap</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MGrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MiniSpanTree_Kruskal</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">MiniSpanTree_Kruskal</span><span class="token punctuation">(</span><span class="token class-name">MGrap</span> <span class="token class-name">G</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>        <span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">[</span><span class="token class-name">G</span><span class="token punctuation">.</span>numEdges<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//边集数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">/*将图的邻接矩阵转换成边集数组edges，并按权值由小到大排序*/</span>        <span class="token keyword">int</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">G</span><span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>INFINITY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    edges<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Edge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token class-name">G</span><span class="token punctuation">.</span>arc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> e1<span class="token punctuation">.</span>weight <span class="token operator">-</span> e2<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Lambda表达式</span>        <span class="token comment">//Arrays.stream(edges).forEach(System.out::println);//方法引用</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>numVertexes<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">G</span><span class="token punctuation">.</span>numEdges<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//循环每条边</span>        <span class="token comment">//若begin和end在不同的连通分量上，则find函数返回的值不相等。</span>            <span class="token comment">//相反，若begin和end在同一个连通分量上，则find函数返回的值相等。</span>            n <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//此边没有与现生成树形成环</span>                parent<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token comment">//打印拥有最小权值的边</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin <span class="token operator">+</span> <span class="token string">" --> "</span> <span class="token operator">+</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//在构建生成树的过程中，所有顶点和已经加入的边会形成多个连通分量。</span>    <span class="token comment">//在同一个连通分量上，任意两个顶点按照以下方法，总会返回相同顶点（注意体会）</span>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            f <span class="token operator">=</span> parent<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3、对比分析"><a href="#3、对比分析" class="headerlink" title="3、对比分析"></a>3、对比分析</h4><p>  对比普里姆（Prim）算法和克鲁斯卡尔（Kruskal）算法可知，kruskal算法主要是针对边来展开，当图中的边数少是效率会非常高，所以对于稀疏图有很大的优势；而Prim算法主要是针对顶点来展开，对于稠密图或者边数非常多的情况效率会好一些。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8其他新特性之Optional类</title>
      <link href="/posts/82bcb26d.html"/>
      <url>/posts/82bcb26d.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>空指针异常是导致Java应用程序失败的最常见原因。以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类，Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。</p></blockquote><h3 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h3><ol><li><strong>Optional&lt;T&gt; 类(java.util.Optional)</strong> 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。</li><li>Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</li><li><strong>Optional提供很多有用的方法，这样我们就不用显式进行空值检测。</strong></li></ol><h4 id="1、创建Optional类对象的方法："><a href="#1、创建Optional类对象的方法：" class="headerlink" title="1、创建Optional类对象的方法："></a>1、创建Optional类对象的方法：</h4><blockquote><ul><li><strong>Optional.of(T t)：</strong>创建一个Optional实例，<strong>t必须非空</strong></li><li><strong>Optional.empty()：</strong> 创建一个空的 Optional 实例</li><li><strong>Optional.ofNullable(T t)：</strong> <strong>t可以为null</strong></li></ul></blockquote><h4 id="2、判断Optional容器中是否包含对象："><a href="#2、判断Optional容器中是否包含对象：" class="headerlink" title="2、判断Optional容器中是否包含对象："></a>2、判断Optional容器中是否包含对象：</h4><blockquote><ul><li><strong>boolean isPresent()：</strong>判断是否包含对象</li><li><strong>void ifPresent(Consumer&lt;? super T&gt; consumer)：</strong>如果有值，就执行Consumer接口的实现代码，并且该值会作为参数传给它。</li></ul></blockquote><h4 id="3、获取Optional容器的对象："><a href="#3、获取Optional容器的对象：" class="headerlink" title="3、获取Optional容器的对象："></a>3、获取Optional容器的对象：</h4><blockquote><ul><li><strong>T get()：</strong>如果调用对象包含值，返回该值，否则抛异常</li><li><strong>T orElse(T other)：</strong>如果有值则将其返回，否则返回指定的other对象。</li><li><strong>T orElseGet(Supplier&amp;llt;? extends T&gt; other)：</strong>如果有值则将其返回，否则返回由 Supplier接口实现提供的对象。</li><li><strong>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)：</strong>如果有值则将其返回，否则抛出由Supplier接口实现提供的异常。</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Girl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Girl&#123;"</span> <span class="token operator">+</span> <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span> <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Girl</span> girl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Boy&#123;"</span> <span class="token operator">+</span> <span class="token string">"girl="</span> <span class="token operator">+</span> girl <span class="token operator">+</span> <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Girl</span> <span class="token function">getGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> girl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGirl</span><span class="token punctuation">(</span><span class="token class-name">Girl</span> girl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">=</span> girl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token class-name">Girl</span> girl<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>girl <span class="token operator">=</span> girl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptionalTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Girl</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//of(T t)：保证t是非空的</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Girl</span><span class="token punctuation">></span></span> optionalGirl <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optionalGirl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Girl</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        girl <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//ofNullable(T t)：t可以为null</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Girl</span><span class="token punctuation">></span></span> optionalGirl <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>optionalGirl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//orElse(T t1)：如果当前的Optional内部封装的t是非空的，则返回内部的t</span>        <span class="token comment">//如果内部的t是空的，则返回orElse()方法中的参数t1.</span>        <span class="token class-name">Girl</span> girl1 <span class="token operator">=</span> optionalGirl<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">"赵丽颖"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girl1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//未优化的方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getGirlName</span><span class="token punctuation">(</span><span class="token class-name">Boy</span> boy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> boy<span class="token punctuation">.</span><span class="token function">getGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//优化以后的getGirlName():</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getGirlName1</span><span class="token punctuation">(</span><span class="token class-name">Boy</span> boy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>boy <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Girl</span> girl <span class="token operator">=</span> boy<span class="token punctuation">.</span><span class="token function">getGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>girl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> girl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> girlName <span class="token operator">=</span> <span class="token function">getGirlName</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空指针异常</span>        <span class="token comment">//System.out.println(girlName);</span>        <span class="token class-name">String</span> girlName1 <span class="token operator">=</span> <span class="token function">getGirlName1</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不会出现空指针异常</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girlName1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//使用Optional类的getGirlName():</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getGirlName2</span><span class="token punctuation">(</span><span class="token class-name">Boy</span> boy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boy</span><span class="token punctuation">></span></span> boyOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//此时的boy1一定非空</span>        <span class="token class-name">Boy</span> boy1 <span class="token operator">=</span> boyOptional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">"迪丽热巴"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Girl</span> girl <span class="token operator">=</span> boy1<span class="token punctuation">.</span><span class="token function">getGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Girl</span><span class="token punctuation">></span></span> girlOptional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//girl1一定非空</span>        <span class="token class-name">Girl</span> girl1 <span class="token operator">=</span> girlOptional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token string">"古力娜扎"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> girl1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> girlName <span class="token operator">=</span> <span class="token function">getGirlName2</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不会出现空指针异常</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girlName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8其他新特性之Stream_API</title>
      <link href="/posts/9fb48c82.html"/>
      <url>/posts/9fb48c82.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java8中有两大最为重要的改变。一个是Lambda表达式；另一个则是Stream API。</p></blockquote><h3 id="一、Stream-API-说明"><a href="#一、Stream-API-说明" class="headerlink" title="一、Stream API 说明"></a>一、Stream API 说明</h3><ol><li><strong>Stream API ( java.util.stream)</strong> 把真正的<strong>函数式编程风格</strong>引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提供Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</li><li>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 <strong>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询</strong>。也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种<strong>高效且易于使用的处理数据的方式</strong>。</li><li>实际开发中，项目中多数数据源都来自于Mysql，Oracle等。但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据就需要Java层面去处理。</li><li>Stream 和 Collection 集合的区别：<strong>Collection 是一种静态的内存数据结构，而 Stream 是有关计算的</strong>。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。</li><li>Stream 是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。“集合讲的是数据，Stream讲的是计算！”<blockquote><p>注意：</p><ul><li>Stream 自己不会存储元素</li><li>Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream</li><li>Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行</li></ul></blockquote></li></ol><h3 id="二、Stream-操作步骤"><a href="#二、Stream-操作步骤" class="headerlink" title="二、Stream 操作步骤"></a>二、Stream 操作步骤</h3><ol><li>创建 Stream<blockquote><p>一个数据源（如：集合，数组），获取一个流</p></blockquote></li><li>中间操作<blockquote><p>一个中间操作链，对数据源的数据进行处理</p></blockquote></li><li>终止操作<blockquote><p>一旦执行终止操作，<strong>就执行中间操作链</strong>，并产生结果。之后，不会再被利用</p></blockquote></li></ol><h3 id="三、创建-Stream"><a href="#三、创建-Stream" class="headerlink" title="三、创建 Stream"></a>三、创建 Stream</h3><h4 id="1、通过集合"><a href="#1、通过集合" class="headerlink" title="1、通过集合"></a>1、通过集合</h4><p>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：</p><blockquote><ul><li><strong>default Stream&lt;E&gt; stream()：</strong>返回一个顺序流</li><li><strong>default Stream&lt;E&gt; parallelStream()：</strong>返回一个并行流</li></ul></blockquote><h4 id="2、通过数组"><a href="#2、通过数组" class="headerlink" title="2、通过数组"></a>2、通过数组</h4><p>Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：</p><blockquote><ul><li><strong>static &lt;T&gt; Stream&lt;T&gt; stream(T[] array)：</strong>返回一个流</li></ul><p>重载形式，能够处理对应基本类型的数组：</p><blockquote><ul><li><strong>public static IntStream stream(int[] array)</strong></li><li><strong>public static LongStream stream(long[] array)</strong></li><li><strong>public static DoubleStream stream(double[] array)</strong></li></ul></blockquote></blockquote><h4 id="3、通过Stream的of"><a href="#3、通过Stream的of" class="headerlink" title="3、通过Stream的of"></a>3、通过Stream的of</h4><p>可以调用Stream类静态方法 of(), 通过显示值创建一个流。它可以接收任意数量的参数。</p><blockquote><ul><li><strong>public static&lt;T&gt; Stream&lt;T&gt; of(T… values)：</strong>返回一个流</li></ul></blockquote><h4 id="4、创建无限流"><a href="#4、创建无限流" class="headerlink" title="4、创建无限流"></a>4、创建无限流</h4><p>可以使用静态方法 Stream.iterate() 和 Stream.generate(),创建无限流。</p><blockquote><p>迭代：</p><blockquote><p><strong>public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</strong></p></blockquote><p>生成：</p><blockquote><p><strong>public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</strong></p></blockquote></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee()....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee(int id)....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Employee&#123;"</span> <span class="token operator">+</span> <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", salary="</span> <span class="token operator">+</span> salary <span class="token operator">+</span> <span class="token char">'&#125;'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> employee<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">!=</span> employee<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>salary<span class="token punctuation">,</span> salary<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> employee<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span><span class="token keyword">long</span> temp<span class="token punctuation">;</span>result <span class="token operator">=</span> id<span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> age<span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">doubleToLongBits</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>temp <span class="token operator">^</span> <span class="token punctuation">(</span>temp <span class="token operator">>>></span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EmployeeData</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"马化腾"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">6000.38</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"马云"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9876.12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"刘强东"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">3000.82</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token string">"雷军"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">7657.37</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token string">"李彦宏"</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">5555.32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">,</span> <span class="token string">"比尔盖茨"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">9500.43</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1007</span><span class="token punctuation">,</span> <span class="token string">"任正非"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">4333.32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1008</span><span class="token punctuation">,</span> <span class="token string">"扎克伯格"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">2500.32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamAPITest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 创建Stream方式一：通过集合 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">EmployeeData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//default Stream&lt;E> stream(): 返回一个顺序流</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//default Stream&lt;E> parallelStream(): 返回一个并行流</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> pa <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 创建Stream方式二：通过数组 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//调用Arrays类的static &lt;T> Stream&lt;T> stream(T[] array): 返回一个流</span>        <span class="token class-name">IntStream</span> stream1 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> e2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> stream2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 创建Stream方式三：通过Stream的of() */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 创建Stream方式四：通过无限流 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/** 迭代         * public static&lt;T> Stream&lt;T> iterate(final T seed, final UnaryOperator&lt;T> f)         */</span>        <span class="token comment">//遍历前10个偶数</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">-></span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">-></span> t <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/** 生成         * public static&lt;T> Stream&lt;T> generate(Supplier&lt;T> s)         */</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">random</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="四、Stream-的中间操作"><a href="#四、Stream-的中间操作" class="headerlink" title="四、Stream 的中间操作"></a>四、Stream 的中间操作</h3><p>  多个<strong>中间操作</strong>可以连接起来形成一个<strong>流水线</strong>，除非流水线上触发终止操作，否则<strong>中间操作不会执行任何的处理</strong>！而在终止操作时一次性全部处理，称为<strong>“惰性求值”</strong>。</p><h4 id="1、筛选与切片"><a href="#1、筛选与切片" class="headerlink" title="1、筛选与切片"></a>1、筛选与切片</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>filter</strong>(Predicate p)</td><td>接受 Lambda，从流中排出某些元素</td></tr><tr><td><strong>distinct</strong>()</td><td>筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</td></tr><tr><td><strong>limit</strong>(long maxSize)</td><td>截断流，使其元素不超过给定数量</td></tr><tr><td><strong>skip</strong>(long n)</td><td>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</td></tr></tbody></table><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">EmployeeData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// filter(Predicate p) —— 接收 Lambda，从流中排除某些元素。</span>    <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// limit(n) —— 截断流，使其元素不超过给定数量。</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// skip(n) —— 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素不足 n 个，则返回一个空流。与 limit(n) 互补</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// distinct() —— 筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1010</span><span class="token punctuation">,</span><span class="token string">"刘强东"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1010</span><span class="token punctuation">,</span><span class="token string">"刘强东"</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1010</span><span class="token punctuation">,</span><span class="token string">"刘强东"</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="2、映射"><a href="#2、映射" class="headerlink" title="2、映射"></a>2、映射</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>map</strong>(Function&lt;T, R&gt; f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的R类型的元素，形成一个新的流Stream&lt;R&gt;。</td></tr><tr><td><strong>mapToInt</strong>(ToIntFunction&lt;T&gt; f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的int元素，产生一个新的 IntStream。</td></tr><tr><td><strong>mapToLong</strong>(ToLongFunction&lt;T&gt; f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的long元素，产生一个新的 LongStream。</td></tr><tr><td><strong>mapToDouble</strong>(ToDoubleFunction&lt;T&gt; f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的double元素，产生一个新的 DoubleStream。</td></tr><tr><td><strong>flatMap</strong>(Function&lt;T, Stream&lt;R&gt;&gt; f)</td><td>接收一个函数作为参数，将流中的每个值都换成另一个流Stream&lt;R&gt;，然后把所有流连接成一个流Stream&lt;R&gt;。</td></tr><tr><td><strong>flatMapToInt</strong>(Function&lt;T, IntStream&gt; f)</td><td>接收一个函数作为参数，将流中的每个值都换成另一个IntStream，然后把所有IntStream连成一个IntStream。</td></tr><tr><td><strong>flatMapToLong</strong>(Function&lt;T, LongStream&gt; f)</td><td>接收一个函数作为参数，将流中的每个值都换成另一个LongStream，然后把所有LongStream连成一个LongStream。</td></tr><tr><td><strong>flatMapToDouble</strong>(Function&lt;T, DoublStream&gt; f)</td><td>接收一个函数作为参数，将流中的每个值都换成另一个DoublStream，然后把所有DoublStream连成一个DoublStream。</td></tr></tbody></table><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamAPITest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span> <span class="token comment">/* 映射 */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// map(Function f) —— 接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span> <span class="token string">"bb"</span><span class="token punctuation">,</span> <span class="token string">"cc"</span><span class="token punctuation">,</span> <span class="token string">"dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-></span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 练习1：获取员工姓名长度大于3的员工的姓名。</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">EmployeeData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> nameStream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameStream<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>name <span class="token operator">-></span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 练习2：</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Stream</span><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span><span class="token punctuation">></span></span> streamStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">StreamAPITest</span><span class="token operator">::</span><span class="token function">fromStringToStream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        streamStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span><span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两层遍历</span>        <span class="token comment">// flatMap(Function f) —— 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> characterStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">StreamAPITest</span><span class="token operator">::</span><span class="token function">fromStringToStream</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        characterStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一层遍历</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将字符串中的多个字符构成的集合转换为对应的Stream的实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> <span class="token function">fromStringToStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Character</span> c <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="3、排序"><a href="#3、排序" class="headerlink" title="3、排序"></a>3、排序</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>sorted</strong>()</td><td>产生一个新流，其中按自然顺序排序</td></tr><tr><td><strong>sorted</strong>(Comparator com)</td><td>产生一个新流，其中按比较器顺序排序</td></tr></tbody></table><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span> <span class="token comment">/* 排序 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// sorted() —— 自然排序</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// sorted(Comparator com) —— 定制排序</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">EmployeeData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ageValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ageValue <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ageValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="五、Stream-的终止操作"><a href="#五、Stream-的终止操作" class="headerlink" title="五、Stream 的终止操作"></a>五、Stream 的终止操作</h3><p>  终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void 。<strong>流进行了终止操作后，不能再次使用</strong>。</p><h4 id="1、匹配与查找"><a href="#1、匹配与查找" class="headerlink" title="1、匹配与查找"></a>1、匹配与查找</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>allMatch</strong>(Predicate&lt;T&gt; p)</td><td>检查是否匹配所有元素</td></tr><tr><td><strong>anyMatch</strong>(Predicate&lt;T&gt; p)</td><td>检查是否至少匹配一个元素</td></tr><tr><td><strong>noneMatch</strong>(Predicate&lt;T&gt; p)</td><td>检查是否没有匹配所有元素</td></tr><tr><td><strong>findFirst</strong>()</td><td>返回第一个元素</td></tr><tr><td><strong>findAny</strong>()</td><td>返回当前流中的任意元素</td></tr><tr><td><strong>count</strong>()</td><td>返回流中元素总数</td></tr><tr><td><strong>max</strong>(Comparator&lt;T&gt; c)</td><td>返回流中最大值</td></tr><tr><td><strong>min</strong>(Comparator&lt;T&gt; c)</td><td>返回流中最小值</td></tr><tr><td><strong>forEach</strong>(Consumer&lt;T&gt; c)</td><td><strong>内部迭代</strong>(使用 Collection 接口需要用户去做迭代，称为<strong>外部迭代</strong>。相反，Stream API 使用内部迭代——它帮你把迭代做了) 。当Stream为parallel的时候,它是并行处理多线程的，所以不能保证输出数据的顺序，但是处理数据的效率比较高</td></tr><tr><td><strong>forEachOrdered</strong>(Consumer&lt;T&gt; c)</td><td>当Stream 为parallel的时候，虽然是多个线程并行处理的。但是还是会按照他原有的顺序输出的，底层是通过happensbefore原则保证了它的内存可见性</td></tr></tbody></table><h4 id="2、规约"><a href="#2、规约" class="headerlink" title="2、规约"></a>2、规约</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>reduce</strong>(T iden, BinaryOperator&lt;T&gt; b)</td><td>可以将流中元素反复结合起来，得到一个值。返回 T</td></tr><tr><td><strong>reduce</strong>(BinaryOperator&lt;T&gt; b)</td><td>可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T&gt;</td></tr><tr><td><strong>reduce</strong>(U iden, BiFunction&lt;U, T, U&gt; f, BinaryOperator&lt;U&gt; b)</td><td>可以将流中元素反复结合起来，得到一个值。返回 U</td></tr></tbody></table><h4 id="3、收集"><a href="#3、收集" class="headerlink" title="3、收集"></a>3、收集</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>&lt;R, A&gt; R <strong>collect</strong>(Collector&lt;T, A, R&gt; c)</td><td>将流转换为其他形式。接收一个 Collector&lt;T, A, R&gt;接口的实现，用于给Stream中元素做汇总的方法</td></tr></tbody></table><p>  Collector&lt;T, A, R&gt; 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、Map)。另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p><table><thead><tr><th>方法</th><th>最终的收集类型</th><th>作用</th></tr></thead><tbody><tr><td><strong>toList</strong>()</td><td>List&lt;T&gt;</td><td>把流中元素收集到List</td></tr><tr><td><strong>toSet</strong>()</td><td>Set&lt;T&gt;</td><td>把流中的元素收集到Set</td></tr><tr><td><strong>toCollection</strong>(Supplier&lt;C&gt; factory)</td><td>Collection&lt;T&gt;</td><td>把流中的元素收集到创建的集合</td></tr><tr><td><strong>counting</strong>()</td><td>Long</td><td>计算流中元素个数</td></tr><tr><td><strong>summingInt</strong>(ToIntFunction&lt;T&gt; mapper)</td><td>Integer</td><td>返回一个收集器，该收集可以将流中的每个T类型的元素通过ToIntFunction转换成int后，进行求和</td></tr><tr><td><strong>summingLong</strong>(ToLongFunction&lt;T&gt; mapper)</td><td>Long</td><td>返回一个收集器，该收集可以将流中的每个T类型的元素通过ToLongFunction转换成long后，进行求和</td></tr><tr><td><strong>summingDouble</strong>(ToDoubleFunction&lt;T&gt; mapper)</td><td>Double</td><td>返回一个收集器，该收集可以将流中的每个T类型的元素通过ToDoubleFunction&amp;lt转换成double后，进行求和</td></tr><tr><td><strong>averagingInt</strong>(ToIntFunction&lt;T&gt; mapper)</td><td>Integer</td><td>返回一个收集器，该收集可以将流中的每个T类型的元素通过ToIntFunction转换成int后，求取转换后元素的算术平均值</td></tr><tr><td><strong>averagingLongt</strong>(ToLongFunction&lt;T&gt; mapper)</td><td>Long</td><td>返回一个收集器，该收集可以将流中的每个T类型的元素通过ToLongFunction转换成long后，求取转换后元素的算术平均值</td></tr><tr><td><strong>averagingDoublet</strong>(ToDoubleFunction&lt;T&gt; mapper)</td><td>Double</td><td>返回一个收集器，该收集可以将流中的每个T类型的元素通过ToDoubleFunction转换成double后，求取转换后元素的算术平均值</td></tr><tr><td><strong>summarizingInt</strong>(ToIntFunction&lt;T&gt; mapper)</td><td>IntSummaryStatistics</td><td>该收集器对流中每个T类型的元素应用生成int的映射函数，并返回结果值的汇总统计信息。如：平均值、和、个数、最大值、最小值等</td></tr><tr><td><strong>summarizingLong</strong>(ToLongFunction&lt;T&gt; mapper)</td><td>IntSummaryStatistics</td><td>该收集器对流中每个T类型的元素应用生成long的映射函数，并返回结果值的汇总统计信息。如：平均值、和、个数、最大值、最小值等</td></tr><tr><td><strong>summarizingDouble</strong>(ToDoubleFunction&lt;T&gt; mapper)</td><td>IntSummaryStatistics</td><td>该收集器对流中每个T类型的元素应用生成double的映射函数，并返回结果值的汇总统计信息。如：平均值、和、个数、最大值、最小值等</td></tr><tr><td><strong>joining</strong>()</td><td>String</td><td>连接流中每个字符串</td></tr><tr><td><strong>joining</strong>(CharSequence delimiter)</td><td>String</td><td>按指定分隔符delimiter，连接流中每个字符串</td></tr><tr><td><strong>joining</strong>(CharSequence delimiter, CharSequence prefix, CharSequence suffix)</td><td>String</td><td>按指定分隔符delimiter，以及指定前后缀，连接流中每个字符串</td></tr><tr><td><strong>maxBy</strong>(Comparator&lt;T&gt; c)</td><td>Optional&lt;T&gt;</td><td>根据比较器选择最大值</td></tr><tr><td><strong>minBy</strong>(Comparator&lt;T&gt; c)</td><td>Optional&lt;T&gt;</td><td>根据比较器选择最小值</td></tr><tr><td><strong>reducing</strong>(BinaryOperator&lt;T&gt; op)</td><td>Optional&lt;T&gt;</td><td>从一个作为累加器的初始值开始，利用BinaryOperator与流中元素逐个结合，从而归约成单个值</td></tr><tr><td><strong>collectingAndThen</strong>(Collector&lt;T,A,R&gt; downstream, Function&lt;R,RR&gt; finisher)</td><td>转换函数返回的类型RR</td><td>包裹一个收集器，并对其结果进行转换。在收集后执行附加的转换操作</td></tr><tr><td><strong>groupingBy</strong>(Function&lt;T,K&gt; classifier)</td><td>Map&lt;K, List&lt;T&gt;&gt;</td><td>根据分类函数classifier的返回值进行分组。利用此可以根据某属性值对流分组，属性为K，结果为V</td></tr><tr><td><strong>partitioningBy</strong>(Predicate&lt;T&gt; p)</td><td>Map&lt;Boolean, List&lt;T&gt;&gt;</td><td>根据true或false进行分区</td></tr></tbody></table><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamAPITest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 1-匹配与查找 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">EmployeeData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// allMatch(Predicate p) —— 检查是否匹配所有元素。</span>        <span class="token comment">/*练习：是否所有的员工的年龄都大于18*/</span>        <span class="token keyword">boolean</span> allMatch <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// anyMatch(Predicate p) —— 检查是否至少匹配一个元素。</span>        <span class="token comment">/*练习：是否存在员工的工资大于 10000*/</span>        <span class="token keyword">boolean</span> anyMatch <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// noneMatch(Predicate p) —— 检查是否没有匹配的元素。</span>        <span class="token comment">/*练习：是否存在员工姓“雷”*/</span>        <span class="token keyword">boolean</span> noneMatch <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"雷"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// findFirst —— 返回第一个元素</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employee <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// findAny —— 返回当前流中的任意元素</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employee1 <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">EmployeeData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// count —— 返回流中元素的总个数</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// max(Comparator c) —— 返回流中最大值</span>        <span class="token comment">/*练习：返回最高的工资：*/</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> salaryStream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> maxSalary <span class="token operator">=</span> salaryStream<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>maxSalary<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// min(Comparator c) —— 返回流中最小值</span>        <span class="token comment">/*练习：返回最低工资的员工*/</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employee <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e2<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// forEach(Consumer c) —— 内部迭代</span>        employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用集合的遍历操作</span>        employees<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 2-归约 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// reduce(T identity, BinaryOperator op) —— 可以将流中元素反复结合起来，得到一个值。返回 T</span>        <span class="token comment">/*练习1：计算1-10的自然数的和*/</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> sum <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// reduce(BinaryOperator op) —— 可以将流中元素反复结合起来，得到一个值。返回 Optional&lt;T></span>        <span class="token comment">/*练习2：计算公司所有员工工资的总和*/</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">EmployeeData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> salaryStream <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Optional&lt;Double> sumMoney = salaryStream.reduce(Double::sum);</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> sumMoney <span class="token operator">=</span> salaryStream<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span> <span class="token operator">-></span> d1 <span class="token operator">+</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sumMoney<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 3-收集 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// collect(Collector c) —— 将流转换为其他形式。接收一个 Collector接口的实现，用于给Stream中元素做汇总的方法</span>        <span class="token comment">/*练习1：查找工资大于6000的员工，结果返回为一个List或Set*/</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employees <span class="token operator">=</span> <span class="token class-name">EmployeeData</span><span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employeeList <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employeeList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> employeeSet <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employeeSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8其他新特性之Lambda表达式</title>
      <link href="/posts/27ad958.html"/>
      <url>/posts/27ad958.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。Java 8 是oracle公司于2014年3月发布，可以看成是自Java 5 以来最具革命性的版本。Java 8为Java语言、编译器、类库、开发工具与JVM带来了大量新特性。</p></blockquote><h3 id="一、Lambda表达式"><a href="#一、Lambda表达式" class="headerlink" title="一、Lambda表达式"></a>一、Lambda表达式</h3><p>  Lambda 是一个匿名函数，我们可以把 Lambda 表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lambda</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//匿名内部类</span>        <span class="token class-name">Runnable</span> r1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哈哈哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        r1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Lambda表达式</span>        <span class="token class-name">Runnable</span> r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"嘻嘻嘻嘻嘻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> compara1 <span class="token operator">=</span> com1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>compara1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Lambda表达式</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com2 <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> compara2 <span class="token operator">=</span> com2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>compara2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> compara3 <span class="token operator">=</span> com3<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>compara3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>  Lambda 表达式：在Java 8 语言中引入的一种新的语法元素和操作符。这个操作符为 “-&gt;” ， 该操作符被称为 <strong>Lambda 操作符</strong>或<strong>箭头操作符</strong>。它将 Lambda 分为两个部分：</p><blockquote><ul><li><strong>左侧：</strong>指定了 Lambda 表达式需要的参数列表（其实就是接口中的抽象方法的形参列表，如果能自动进行类型推断，则形参类型可以省略）</li><li><strong>右侧：</strong>指定了 Lambda 体，是抽象方法的实现逻辑，也即Lambda 表达式要执行的功能。</li></ul><p>Lambda表达式的本质：作为接口的实例</p></blockquote><h4 id="Lambda表达式语法："><a href="#Lambda表达式语法：" class="headerlink" title="Lambda表达式语法："></a>Lambda表达式语法：</h4><ol><li>语法格式一：无参，无返回值<blockquote><p>Runnable r1 &#x3D; () -&gt; {System.out.println(“Hello Lambda!”);};</p></blockquote></li><li>语法格式二：Lambda需要一个参数，但是没有返回值<blockquote><p>Consumer&lt;String&gt; con &#x3D; (String str) -&gt; {System.out.println(str);};</p></blockquote></li><li>语法格式三：<strong>数据类型可以省略</strong>，因为可由编译器推断得出，称为<strong>“类型推断”</strong><blockquote><p>Consumer&lt;String&gt; con &#x3D; (str) -&gt; {System.out.println(str);};</p></blockquote></li><li>语法格式四：Lambda若只有一个参数是，参数的<strong>小括号可以省略</strong><blockquote><p>Consumer&lt;String&gt; con &#x3D; str -&gt; {System.out.println(str);};</p></blockquote></li><li>语法格式五：Lambda需要两个或以上的参数，多条执行语句，并且<strong>可有返回值</strong><blockquote><p>Comparator&lt;Integer&gt; com &#x3D; (x, y) -&gt; {System.out.println(“实现函数式接口方法！”);return Integer.compare(x,y);};</p></blockquote></li><li>语法格式六：当Lambda体只有一条语句时，<strong>return与大括号若有，都可以省略</strong><blockquote><p>Comparator&lt;Integer&gt; com &#x3D; (x, y) -&gt; Integer.compare(x,y);</p></blockquote></li></ol><h4 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h4><p>  上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”。</p><h3 id="二、函数式（Functional）接口"><a href="#二、函数式（Functional）接口" class="headerlink" title="二、函数式（Functional）接口"></a>二、函数式（Functional）接口</h3><ol><li><strong>只包含一个抽象方法的接口，称为函数式接口。</strong></li><li>你可以通过 Lambda 表达式来创建该函数式接口的对象。（若 Lambda 表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明）。</li><li>我们可以在一个接口上使用 <strong>@FunctionalInterface</strong> 注解，这样做可以检查它是否是一个函数式接口。同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li><li>在java.util.function包下定义了Java 8 的丰富的函数式接口</li><li>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP)编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还可以支持OOF（面向函数编程）</li><li>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型——<strong>函数式接口</strong>。</li><li>简单的说，在Java8中，<strong>Lambda表达式就是一个函数式接口的实例</strong>。这就是Lambda表达式和函数式接口的关系。也就是说，<strong>只要一个对象是函数式接口的实例，那么该对象就可以用Lambda表达式来表示</strong>。</li><li>所以<strong>以前用匿名实现类表示的现在都可以用Lambda表达式来写</strong>。</li></ol><h4 id="Java内置四大核心函数式接口"><a href="#Java内置四大核心函数式接口" class="headerlink" title="Java内置四大核心函数式接口"></a>Java内置四大核心函数式接口</h4><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer&lt;T&gt; 消费型接口</td><td>T</td><td>void</td><td>对类型为T的对象应用操作，包含方法：void accept(T t)</td></tr><tr><td>Supplier&lt;T&gt; 供给型接口</td><td>无</td><td>T</td><td>返回类型为T的对象，包含方法：T get()</td></tr><tr><td>Function&lt;T,R&gt; 函数型接口</td><td>T</td><td>R</td><td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t)</td></tr><tr><td>Predicate&lt;T&gt; 断定型接口</td><td>T</td><td>boolean</td><td>确定类型为T的对象是否满足某约束，并返回 boolean 值。包含方法：boolean test(T t)</td></tr></tbody></table><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 消费型接口 Consumer&lt;T>     void accept(T t) * 供给型接口 Supplier&lt;T>     T get() * 函数型接口 Function&lt;T,R>   R apply(T t) * 断定型接口 Predicate&lt;T>    boolean test(T t) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* 消费型接口使用测试 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">happyTime</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Double</span> aDouble<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买水，花费："</span> <span class="token operator">+</span> aDouble<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">happyTime</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> money <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"买水，花费："</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happyTime</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> con<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        con<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 断定型接口使用测试 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"南京"</span><span class="token punctuation">,</span> <span class="token string">"天津"</span><span class="token punctuation">,</span> <span class="token string">"东京"</span><span class="token punctuation">,</span> <span class="token string">"西京"</span><span class="token punctuation">,</span> <span class="token string">"普京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> filterStrs1 <span class="token operator">=</span> <span class="token function">filterString</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filterStrs1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> filterStrs2 <span class="token operator">=</span> <span class="token function">filterString</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> s <span class="token operator">-></span> s<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filterStrs2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据给定的规则，过滤集合中的字符串。此规则是由 Predicate 的方法决定</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">filterString</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> filterList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                filterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> filterList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>  作为参数传递 Lambda 表达式：为了将 Lambda 表达式作为参数传递，接收Lambda表达式的参数类型必须是与该 Lambda 表达式兼容的函数式接口的类型。</p><h4 id="其他函数式接口"><a href="#其他函数式接口" class="headerlink" title="其他函数式接口"></a>其他函数式接口</h4><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td><strong>BiFunction&lt;T,U,R&gt;</strong></td><td>T, U</td><td>R</td><td>对类型为 T, U 参数应用操作，返回 R 类型的结果。包含方法为：R apply(T t, U u)</td></tr><tr><td><strong>UnaryOperator&lt;T&gt;</strong> (Function子接口)</td><td>T</td><td>T</td><td>对类型为T的对象进行一元运算，并返回T类型的结果。包含方法为：T apply(T t)</td></tr><tr><td><strong>BinaryOperator&lt;T&gt;</strong> (BiFunction 子接口)</td><td>T, T</td><td>T</td><td>对类型为T的对象进行二元运算，并返回T类型的结果。包含方法为：T apply(T t1, T t2)</td></tr><tr><td><strong>BiConsumer&lt;T,U&gt;</strong></td><td>T, U</td><td>void</td><td>对类型为T, U 参数应用操作。包含方法为：void accept(T t, U u)</td></tr><tr><td><strong>BiPredicate&lt;T,U&gt;</strong></td><td>T,U</td><td>boolean</td><td>包含方法为：boolean test(T t, U u)</td></tr><tr><td><strong>ToIntFunction&lt;T&gt;</strong> <br> <strong>ToLongFunction&lt;T&gt;</strong> <br> <strong>ToDoubleFunction&lt;T&gt;</strong></td><td>T</td><td>int <br> long <br> double</td><td>分别计算int、long、double值的函数</td></tr><tr><td><strong>IntFunction&lt;R&gt;</strong> <br> <strong>LongFunction&lt;R&gt;</strong> <br> <strong>DoubleFunction&lt;R&gt;</strong></td><td>int <br> long <br> double</td><td>R</td><td>参数分别为int、long、double 类型的函数</td></tr></tbody></table><h3 id="三、方法引用（Method-References）"><a href="#三、方法引用（Method-References）" class="headerlink" title="三、方法引用（Method References）"></a>三、方法引用（Method References）</h3><ol><li>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！</li><li>方法引用可以看做是Lambda表达式深层次的表达。方法引用本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以方法引用，也是函数式接口的实例。</li><li>要求：<strong>实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致！</strong></li><li>格式：使用操作符 “::” <strong>将类(或对象)</strong> 与 <strong>方法名分</strong>隔开来。<blockquote><ul><li>对象::实例方法名</li><li>类::静态方法名</li><li>类::实例方法名</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee()....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Employee(int id)....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Employee&#123;"</span> <span class="token operator">+</span> <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", salary="</span> <span class="token operator">+</span> salary <span class="token operator">+</span> <span class="token char">'&#125;'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodReferencesTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 情况一： 对象::实例方法     * Consumer 中的 void accept(T t)     * PrintStream 中的 void println(T t)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Lambda表达式</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con1 <span class="token operator">=</span> str <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        con1<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用</span>        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> con2 <span class="token operator">=</span> ps<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">;</span>        con2<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"成都"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 情况一： 对象::实例方法     * Supplier 中的 T get()     * Employee 中的 String getName()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Lambda表达式</span>        <span class="token class-name">Employee</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> emp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> sup2 <span class="token operator">=</span> emp<span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 情况二： 类::静态方法     * Comparator 中的 int compare(T t1, T t2)     * Integer  中的 int compare(T t1, T t2)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Lambda表达式</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com1 <span class="token operator">=</span> <span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>com1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> com2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>com2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 情况二： 类::静态方法     * Function 中的 R apply(T t)     * Math  中的 Long round(Double d)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//lambda表达式</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span> func1 <span class="token operator">=</span> d <span class="token operator">-></span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">123.32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">></span></span> func2 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token operator">::</span><span class="token function">round</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>func2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">123.32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 情况三： 类::非静态方法     * Comparator 中的 int compare(T t1, T t2)     * String  中的 int t1.compareTo(t2)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Lambda表达式</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> com1 <span class="token operator">=</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>com1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用</span>        <span class="token comment">//当函数式接口方法的第一个参数是需要引用方法的调用者，并且第二个参数是需要引用方法的参数(或无参数)时：ClassName::methodName</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> com2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">compareTo</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>com2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 情况三： 类::非静态方法     * BiPredicate 中的 boolean test(T t1, T t2)     * String  中的 boolean t1.equals(t2)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//Lambda表达式</span>        <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> pre1 <span class="token operator">=</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-></span> s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pre1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用</span>        <span class="token class-name">BiPredicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> pre2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pre2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** 情况三： 类::非静态方法     * Function 中的 R apply(T t)     * Employee 中的 String toString()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Lambda表达式</span>        <span class="token class-name">Employee</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">6500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> func1 <span class="token operator">=</span> e <span class="token operator">-></span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方法引用</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> func2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>func2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="四、构造器引用"><a href="#四、构造器引用" class="headerlink" title="四、构造器引用"></a>四、构造器引用</h3><ol><li>格式： ClassName::new</li><li>与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致！且方法的返回值即为构造器对应类的对象。<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorReferencesTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Supplier 中的 T get()     * Employee 中的空参构造器 Employee()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> sup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> sup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> sup2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sup2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Function 中的 R apply(T t)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">></span></span> func1 <span class="token operator">=</span> id <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">></span></span> func2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>func2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * BiFunction 中的 R apply(T t, U u)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">></span></span> bfunc1 <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bfunc1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">></span></span> bfun2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bfun2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="五、数组引用"><a href="#五、数组引用" class="headerlink" title="五、数组引用"></a>五、数组引用</h3><ol><li>格式：type[]::new</li><li>可以把数组看作是一个特殊的类，则写法与构造器引用一致。<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayReferencesTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/** 数组引用     * Function 中的 R apply(T t)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> func1 <span class="token operator">=</span> <span class="token class-name">Length</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token class-name">Length</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> func1<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Function</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> func2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> func2<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP模式匹配算法</title>
      <link href="/posts/e1553121.html"/>
      <url>/posts/e1553121.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>KMP算法是一种改进的字符串匹配算法，由D.E.Knuth，J.H.Morris和V.R.Pratt提出的，因此人们称它为克努特—莫里斯—普拉特操作（简称KMP算法）。KMP算法的核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。具体实现就是通过一个next()函数实现，函数本身包含了模式串的局部匹配信息。KMP算法的时间复杂度O(m+n)。<br>转自：<a href="https://www.zhihu.com/question/21923021">如何更好地理解和掌握 KMP 算法</a></p></blockquote><p>  字符串的模式匹配是一种常用的运算。所谓模式匹配,可以简单地理解为在目标(字符串)中寻找一个给定的模式(也是字符串)，返回目标和模式匹配的第一个子串的首字符位置。通常目标串比较大，而模式串则比较短小。<br>  比较暴力的解法是，在大循环中遍历主串的每个字符，并以此字符为首，挨个与模式字符串中的每个字符依次比较，若全能匹配上，则返回该首字符所在位置；若不能全匹配上，则在主字符串中循环下一个字符作为首字符重新与模式字符串依次比较。这种方式不仅慢，而且慢，而且还慢。<strong>KMP算法</strong>是一种改进的字符串匹配算法，其关键是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。</p><h3 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h3><p>  先解释一下字符串的前缀和后缀。如果字符串A和B，存在A&#x3D;BS，其中S是任意的<strong>非空字符串</strong>，那就称B为A的前缀。例如，”Harry”的前缀包括{”H”, ”Ha”, ”Har”, ”Harr”}，我们把所有前缀组成的集合，称为字符串的前缀集合。同样可以定义后缀A&#x3D;SB， 其中S是任意的<strong>非空字符串</strong>，那就称B为A的后缀，例如，”Potter”的后缀包括{”otter”, ”tter”, ”ter”, ”er”, ”r”}，然后把所有后缀组成的集合，称为字符串的后缀集合。要注意的是，字符串本身并不是自己的前缀、后缀。</p><p>  KMP算法的核心，是一个被称为**部分匹配表(Partial Match Table)**的数组。我觉得理解KMP的最大障碍就是很多人在看了很多关于KMP的文章之后，仍然搞不懂PMT中的值代表了什么意思。这里我们抛开所有的枝枝蔓蔓，先来解释一下这个数据到底是什么。<br><strong>对于字符串“abababca”，它的PMT如下表所示：</strong></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>char</strong></td><td>a</td><td>b</td><td>a</td><td>b</td><td>a</td><td>b</td><td>c</td><td>a</td></tr><tr><td><strong>index</strong></td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td><strong>value</strong></td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>0</td><td>1</td></tr></tbody></table><p>  就像例子中所示，如果待匹配的模式字符串有8个字符，那么PMT就会有8个值。那么PMT中各个值的意思是什么呢？<strong>PMT中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度</strong>。例如，对于”aba”，它的前缀集合为{”a”, ”ab”}，后缀 集合为{”ba”, ”a”}。两个集合的交集为{”a”}，那么长度最长的元素就是字符串”a”了，长度为1，所以对于”aba”而言，它在PMT表中对应的值就是1。再比如，对于字符串”ababa”，它的前缀集合为{”a”, ”ab”, ”aba”, ”abab”}，它的后缀集合为{”baba”, ”aba”, ”ba”, ”a”}， 两个集合的交集为{”a”, ”aba”}，其中最长的元素为”aba”，长度为3。<br>  解释清楚这个表是什么之后，我们再来看如何使用这个表来加速字符串的查找，以及这样用的道理是什么。如下图所示，要在主字符串”ababababca”中查找模式字符串”abababca”。如果在模式字符串的 j 处字符不匹配，那么由于前边所说的模式字符串 PMT 的性质，主字符串中 i 指针之前的 PMT[j −1] 位就一定与模式字符串的第 0 位至第 PMT[j−1] 位是相同的。这是因为<strong>主字符串在 i 位失配，也就意味着主字符串从 i−j 到 i 这一段是与模式字符串的 0 到 j 这一段是完全相同的</strong>。上面也解释了，模式字符串从 0 到 j−1 ，在这个例子中就是”ababab”，其前缀集合与后缀集合的交集的最长元素为”abab”， 长度为4。所以就可以断言，主字符串中i指针之前的 4 位一定与模式字符串的第0位至第 4 位是相同的，即长度为 4 的后缀与前缀相同。这样一来，我们就可以将这些字符段的比较省略掉。具体的做法是，保持i指针不动，然后将j指针指向模式字符串的PMT[j −1]位即可。<br><img src="/posts/e1553121/1.png" alt="匹配过程示意图"><br>  简而言之，以图中的例子来说，主字符串在 i 处失配，那么主字符串和模式字符串的前边6位就是相同的。又因为模式字符串的前6位，它的前4位前缀和后4位后缀是相同的，所以我们推知主字符串i之前的4位和模式字符串开头的4位是相同的。就是图中的灰色部分。那这部分就不用再比较了。<br>  有了上面的思路，我们就可以使用<strong>PMT算法</strong>加速字符串的查找了。我们看到如果模式字符串是在 j 位失配那么影响 j 指针回溯的位置的其实是第 j−1 位的<strong>PMT值</strong>，所以为了编程的方便，我们不直接使用PMT数组，而是将PMT数组向后偏移一位，将偏移后新得到的数组称为 <strong>next 数组</strong>。<strong>但是注意：</strong>在把PMT进行向右偏移时，第0位的值，我们将其设成了-1，这只是为了编程的方便，并没有其他的意义。本例中的next数组如下表所示：</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong>char</strong></td><td>a</td><td>b</td><td>a</td><td>b</td><td>a</td><td>b</td><td>c</td><td>a</td></tr><tr><td><strong>index</strong></td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td><strong>pmt</strong></td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>0</td><td>1</td></tr><tr><td><strong>next</strong></td><td>-1</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>0</td></tr></tbody></table><p><strong>下面给出根据next数组进行字符串匹配加速的字符串匹配程序。</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span>        j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>  讲到这里，其实KMP算法的主体就已经讲解完了。你会发现，其实KMP算法的动机是很简单的，解决的方案也很简单。远没有很多教材和算法书里所讲的那么乱七八糟，只要搞明白了PMT的意义，其实整个算法都迎刃而解。但是现在还有一个问题，<strong>如何快速求得next数组</strong>。其实，求next数组的过程也完全可以看成字符串匹配的过程，即以模式字符串为主字符串，以模式字符串的前缀为目标字符串，一旦字符串匹配成功，那么当前的next值就是匹配成功的字符串的长度。具体来说，就是从模式字符串的第一位(注意，不包括第0位)开始对自身进行匹配运算。 在任一位置，能匹配的最长长度就是当前位置的next值。如下图所示：（默认next[0]&#x3D;-1，next[1]&#x3D;0）<br><img src="/posts/e1553121/2.png" alt="(a)"><br><img src="/posts/e1553121/3.png" alt="(b)"><br><img src="/posts/e1553121/4.png" alt="(c)"><br><img src="/posts/e1553121/5.png" alt="(d)"><br><img src="/posts/e1553121/6.png" alt="(e)"><br><img src="/posts/e1553121/7.png" alt="(f)"></p><p><strong>求next数组值的程序如下。</strong></p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>至此，KMP算法就全部介绍完了。</strong></p><h3 id="java程序示例："><a href="#java程序示例：" class="headerlink" title="java程序示例："></a>java程序示例：</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KMP</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> mainStr <span class="token operator">=</span> <span class="token string">"dhakshdakdhasjdhjahsdjh"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> subStr <span class="token operator">=</span> <span class="token string">"hasjdh"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res1 <span class="token operator">=</span> <span class="token function">KMP1</span><span class="token punctuation">(</span>mainStr<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res2 <span class="token operator">=</span> <span class="token function">KMP2</span><span class="token punctuation">(</span>mainStr<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* KMP模式匹配算法，从前往后匹配 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">KMP1</span><span class="token punctuation">(</span><span class="token class-name">String</span> mainStr<span class="token punctuation">,</span> <span class="token class-name">String</span> subStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sub <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造next数组[-1, 0, ......]。部分匹配表PMT</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sub<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* KMP模式匹配算法，从后往前匹配 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">KMP2</span><span class="token punctuation">(</span><span class="token class-name">String</span> mainStr<span class="token punctuation">,</span> <span class="token class-name">String</span> subStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sub <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造next数组[......, length-1, length]。部分匹配表PMT</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sub<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span>sub<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> sub<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> sub<span class="token punctuation">.</span>length <span class="token operator">||</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">--</span>i<span class="token punctuation">;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>                next<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//避免出现next[-1]，将结果往后存。</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        i <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> sub<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> sub<span class="token punctuation">.</span>length <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">--</span>i<span class="token punctuation">;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="KMP改进"><a href="#KMP改进" class="headerlink" title="KMP改进"></a>KMP改进</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KMP</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> mainStr <span class="token operator">=</span> <span class="token string">"dhakshdakdhasjdhjahsdj"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> subStr <span class="token operator">=</span> <span class="token string">"hasjdh"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res1 <span class="token operator">=</span> <span class="token function">KMP1</span><span class="token punctuation">(</span>mainStr<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res2 <span class="token operator">=</span> <span class="token function">KMP2</span><span class="token punctuation">(</span>mainStr<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* KMP模式匹配算法，从前往后匹配 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">KMP1</span><span class="token punctuation">(</span><span class="token class-name">String</span> mainStr<span class="token punctuation">,</span> <span class="token class-name">String</span> subStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sub <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sub<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>                <span class="token comment">//为了在后续匹配时，加快回溯（注意体会不同点）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> sub<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* KMP模式匹配算法，从后往前匹配 */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">KMP2</span><span class="token punctuation">(</span><span class="token class-name">String</span> mainStr<span class="token punctuation">,</span> <span class="token class-name">String</span> subStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sub <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sub<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span>sub<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> sub<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> sub<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> sub<span class="token punctuation">.</span>length <span class="token operator">||</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">--</span>i<span class="token punctuation">;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>                <span class="token comment">//为了在后续匹配时，加快回溯（注意体会不同点）</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    next<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    next<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        i <span class="token operator">=</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> sub<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> sub<span class="token punctuation">.</span>length <span class="token operator">||</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token operator">--</span>i<span class="token punctuation">;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中使用Socket网络编程</title>
      <link href="/posts/a5f50a24.html"/>
      <url>/posts/a5f50a24.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>主要就是TCP&#x2F;UDP网络通信的使用</p></blockquote><h3 id="一、TCP-网络编程"><a href="#一、TCP-网络编程" class="headerlink" title="一、TCP 网络编程"></a>一、TCP 网络编程</h3><h4 id="例子1：客户端发送信息给服务端，服务端将数据显示在控制台上"><a href="#例子1：客户端发送信息给服务端，服务端将数据显示在控制台上" class="headerlink" title="例子1：客户端发送信息给服务端，服务端将数据显示在控制台上"></a>例子1：客户端发送信息给服务端，服务端将数据显示在控制台上</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPTest1</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//客户端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1. 创建Socket对象，指明服务器端的ip和端口号</span>            <span class="token class-name">InetAddress</span> inet <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>inet<span class="token punctuation">,</span> <span class="token number">8899</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2. 获取一个输出流，用于输出数据</span>            os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3. 写出数据</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好，我是客户端。HaHaHa"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//4. 关闭资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>os <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//服务端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1. 创建服务器端的ServerSocket，指明自己的端口号</span>            ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8899</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2. 调用accept()表示接收来自于客户端的socket</span>            socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3. 获取输入流</span>            is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//不建议这样写，可能会有乱码</span>            <span class="token comment">/*byte[] buffer = new byte[1024];            int len;            while((len = is.read(buffer)) != -1)&#123;                String str = new String(buffer,0,len);                System.out.print(str);            &#125;*/</span>            <span class="token comment">//4. 读取输入流中的数据，先写入到ByteArrayOutputStream中。然后通过toString()获取写入数据</span>            baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//5. 关闭资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>baos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ss <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    ss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="例子2：客户端发送文件给服务端，服务端将文件保存在本地。"><a href="#例子2：客户端发送文件给服务端，服务端将文件保存在本地。" class="headerlink" title="例子2：客户端发送文件给服务端，服务端将文件保存在本地。"></a>例子2：客户端发送文件给服务端，服务端将文件保存在本地。</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPTest2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    注意：这里涉及到的异常，应该使用try-catch-finally处理     */</span>    <span class="token comment">// 客户端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"beauty.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    注意：同样，这里涉及到的异常，应该使用try-catch-finally处理     */</span>    <span class="token comment">// 服务端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"beauty1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="例子3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。然后闭相应的连接。"><a href="#例子3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。然后闭相应的连接。" class="headerlink" title="例子3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。然后闭相应的连接。"></a>例子3：从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。然后闭相应的连接。</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TCPTest3</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    注意：这里涉及到的异常，应该使用try-catch-finally处理     */</span>    <span class="token comment">// 客户端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"beauty.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//关闭数据的输出</span>        socket<span class="token punctuation">.</span><span class="token function">shutdownOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接收来自于服务器端的数据，并显示到控制台上</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bufferr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len1<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len1 <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> len1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    注意：同样，这里涉及到的异常，应该使用try-catch-finally处理     */</span>    <span class="token comment">// 服务端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"beauty1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件传输完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//服务端给予客户端反馈</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"你好，文件我收到了。Very nice"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二、UDP-网络编程"><a href="#二、UDP-网络编程" class="headerlink" title="二、UDP 网络编程"></a>二、UDP 网络编程</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//发送端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"我是UDP方式发送的导弹"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InetAddress</span> inet <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> inet<span class="token punctuation">,</span> <span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//接收端</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="三、URL资源访问"><a href="#三、URL资源访问" class="headerlink" title="三、URL资源访问"></a>三、URL资源访问</h3><p><strong>下载百度图像到本地</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">URLTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpURLConnection</span> urlConnection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3363295869,2467511306&amp;fm=26&amp;gp=0.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlConnection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            urlConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下载完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//关闭资源</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>is <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>urlConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                urlConnection<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的动态代理(反射的应用)</title>
      <link href="/posts/a7eb226d.html"/>
      <url>/posts/a7eb226d.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p><strong>代理设计模式的原理：</strong>使用一个代理将对象包装起来, 然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上。</p></blockquote><p>  对于静态代理，代理类和目标对象的类都是在编译期间确定下来，不利于程序的扩展。同时，每一个代理类只能为一个接口服务，这样一来程序开发中必然产生过多的代理。最好可以通过一个代理类完成全部的代理功能。<strong>动态代理是指客户通过代理类来调用其它对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象。</strong><br>  <strong>动态代理相比于静态代理的优点：</strong>抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活和统一的处理众多的方法。</p><p><strong>静态代理</strong>（特点：代理类和被代理类在编译期间，就确定下来了。）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*接口*/</span><span class="token keyword">interface</span> <span class="token class-name">ClothFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*代理类*/</span><span class="token keyword">class</span> <span class="token class-name">ProxyClothFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ClothFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ClothFactory</span> factory<span class="token punctuation">;</span><span class="token comment">//用被代理类对象进行实例化</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyClothFactory</span><span class="token punctuation">(</span><span class="token class-name">ClothFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理工厂做一些准备工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理工厂做一些收尾工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*被代理类*/</span><span class="token keyword">class</span> <span class="token class-name">NikeClothFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ClothFactory</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Nike 工厂生产品牌服装"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建被代理类对象</span>        <span class="token class-name">ClothFactory</span> nike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NikeClothFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建代理类对象</span>        <span class="token class-name">ClothFactory</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyClothFactory</span><span class="token punctuation">(</span>nike<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>动态代理</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*接口*/</span><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*被代理类*/</span><span class="token keyword">class</span> <span class="token class-name">SuperMan</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"I believe I can fly!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃："</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*要想实现动态代理，需要解决的问题？问题一：如何根据加载到内存中的被代理类，动态的创建一个代理类及其对象。问题二：当通过代理类的对象调用方法a时，如何动态的去调用被代理类中的同名方法a。 */</span><span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//调用此方法，返回一个代理类的对象。解决问题一</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//obj：被代理类的对象</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被代理类的类加载器</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//被代理类实现的接口</span>        <span class="token class-name">MyInvocationHandler</span> myHander <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实现了InvocationHandler接口的类</span>        myHander<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> myHander<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回一个和被代理类实现了相同接口的代理类对象</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj<span class="token punctuation">;</span><span class="token comment">//需要使用被代理类的对象进行赋值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当我们通过代理类的对象，调用方法a时，就会自动的调用如下的方法：invoke()</span>    <span class="token comment">//将被代理类要执行的方法a的功能就声明在invoke()中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//method：即为代理类对象调用的方法，此方法也就作为了被代理类对象要调用的方法</span>        <span class="token comment">//obj：被代理类的对象</span>        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span><span class="token comment">//上述方法的返回值就作为当前类中的invoke()的返回值。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SuperMan</span> superMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*实现了和被代理类相同接口的代理类的对象*/</span>        <span class="token class-name">Human</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Human</span><span class="token punctuation">)</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>superMan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当通过代理类对象调用方法时，会自动的调用被代理类中同名的方法</span>        <span class="token class-name">String</span> belief <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>belief<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"重庆火锅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NikeClothFactory</span> nike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NikeClothFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClothFactory</span> proxyFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ClothFactory</span><span class="token punctuation">)</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>nike<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyFactory<span class="token punctuation">.</span><span class="token function">produceCloth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Java动态代理API"><a href="#Java动态代理API" class="headerlink" title="Java动态代理API"></a>Java动态代理API</h3><p>  <strong>Proxy：</strong>专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态地生成实现类。提供用于创建动态代理类和动态代理对象的静态方法</p><blockquote><ul><li>static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;… interfaces)：创建一个动态代理类所对应的Class对象</li><li>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)：直接创建一个动态代理对象</li></ul></blockquote><h3 id="AOP（Aspect-Orient-Programming）面向切面编程"><a href="#AOP（Aspect-Orient-Programming）面向切面编程" class="headerlink" title="AOP（Aspect Orient Programming）面向切面编程"></a>AOP（Aspect Orient Programming）面向切面编程</h3><p>  使用Proxy生成一个动态代理时，往往并不会凭空产生一个动态代理，这样没有太大的意义。通常都是为指定的目标对象生成动态代理。这种动态代理在AOP中被称为AOP代理，AOP代理可代替目标对象，AOP代理包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异：<strong>AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理</strong>。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Human</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SuperMan</span> <span class="token keyword">implements</span> <span class="token class-name">Human</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"I believe I can fly!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃："</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HumanUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==================== 通用方法一 ===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==================== 通用方法二 ===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyInvocationHandler</span> myHander <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myHander<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> myHander<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HumanUtil</span> util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HumanUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        util<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        util<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SuperMan</span> superMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Human</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Human</span><span class="token punctuation">)</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span>superMan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> belief <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">getBelief</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>belief<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"重庆火锅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的反射机制</title>
      <link href="/posts/7ef4d58a.html"/>
      <url>/posts/7ef4d58a.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Reflect（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p></blockquote><h3 id="一、反射机制概述"><a href="#一、反射机制概述" class="headerlink" title="一、反射机制概述"></a>一、反射机制概述</h3><ol><li>Reflect（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</li><li>加载完类之后，在堆内存的方法区中就会产生一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，形象的称之为：反射。</li></ol><h4 id="1、动态语言-vs-静态语言"><a href="#1、动态语言-vs-静态语言" class="headerlink" title="1、动态语言 vs 静态语言"></a>1、动态语言 vs 静态语言</h4><ol><li>动态语言<br>  是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。</li><li>静态语言<br>  与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。</li><li>Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！</li></ol><h4 id="2、反射机制所提供的功能"><a href="#2、反射机制所提供的功能" class="headerlink" title="2、反射机制所提供的功能"></a>2、反射机制所提供的功能</h4><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ol><h4 id="3、反射相关的主要-API"><a href="#3、反射相关的主要-API" class="headerlink" title="3、反射相关的主要 API"></a>3、反射相关的主要 API</h4><ol><li>java.lang.Class：代表一个类</li><li>java.lang.reflect.Method：代表类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造器</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好，我是一个人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">showNation</span><span class="token punctuation">(</span><span class="token class-name">String</span> nation<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我的国籍是："</span> <span class="token operator">+</span> nation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nation<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//反射前，对于Person的操作</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//1.创建Person类的对象</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.通过对象调用其内部的属性、方法</span>        p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*在Person类外部，不可以通过Person类的对象调用私有的结构*/</span>        <span class="token comment">//比如：name，showNation()以及私有的构造器</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//使用反射</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//通过反射，创建Person类的对象</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> cons <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过反射，调用对象指定的属性、方法</span>        <span class="token comment">//调属性</span>        <span class="token class-name">Field</span> age <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调方法</span>        <span class="token class-name">Method</span> show <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        show<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//反射的强大之处，调用私有的属性和方法</span>        <span class="token comment">//通过反射，可以调用Person类私有结构。比如：私有的构造器、属性、方法</span>        <span class="token comment">// 调用私有构造器</span>        <span class="token class-name">Constructor</span> cons1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cons1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> cons1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用私有的属性</span>        <span class="token class-name">Field</span> name <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">"HanMeimei"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用私有的方法</span>        <span class="token class-name">Method</span> showNation <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"showNation"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        showNation<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> nation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> showNation<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于String nation = p1.showNation("中国");</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二、Class类的理解"><a href="#二、Class类的理解" class="headerlink" title="二、Class类的理解"></a>二、Class类的理解</h3><h4 id="1、Class类"><a href="#1、Class类" class="headerlink" title="1、Class类"></a>1、Class类</h4><ol><li>在Object类中定义了以下的方法，此方法将被所有的子类继承：public final Class getClass()</li><li>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</li><li>通过反射可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE都为其保留了一个不变的Class类型的对象。一个Class对象包含了特定某个结构（class&#x2F;interface&#x2F;enum&#x2F;annotation&#x2F;primitive type&#x2F;void&#x2F;[]）的有关信息。<blockquote><ul><li>Class 本身也是一个类</li><li>Class 对象<strong>只能由系统建立对象</strong></li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的 Class对象</li></ul></blockquote></li></ol><h4 id="2、Class类的常用方法"><a href="#2、Class类的常用方法" class="headerlink" title="2、Class类的常用方法"></a>2、Class类的常用方法</h4><ol><li>static Class forName(String name)：返回指定类名的Class对象</li><li>Object newInstance()：调用缺省构造器，返回该Class对象的一个实例</li><li>getName()：返回此Class对象所表示的实体（类，接口，数组，基本类型或void）名称</li><li>Class[] getInterfaces()：获取当前Class对象的接口</li><li>ClassLoader getClassLoader()：返回该类的类加载器</li><li>Class getSuperclass()：返回表示此Class所表示的实体的超类的Class</li><li>Constructor[] getConstructors()：返回一个包含某些Constructor对象的数组</li><li>Field[] getDeclaredFields()：返回Field对象的一个数组</li><li>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)：返回一个Method对象，此对象的形参类型为paramType</li></ol><h4 id="3、获取Class类的实例（四种方法）"><a href="#3、获取Class类的实例（四种方法）" class="headerlink" title="3、获取Class类的实例（四种方法）"></a>3、获取Class类的实例（四种方法）</h4><ol><li>前提：若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高。<blockquote><p>实例：Class cls &#x3D; String.class;</p></blockquote></li><li>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象<blockquote><p>实例：Class cls &#x3D; “yczlab.gitee.io”.getClass();</p></blockquote></li><li>前提：已知一个类的全类名，且该类在路径下，可通过Class类的静态方法 forName() 获取，可能抛出 ClassNotFoundException<blockquote><p>实例：Class cls &#x3D; Class.forName(“java.lang.String”);</p></blockquote></li><li>其他方法<blockquote><p>ClassLoader cl &#x3D; this.getClass().getClassLoader();<br>Class cls &#x3D; cl.loadClass(“类的全类名”);</p></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//方式一：调用运行时类的属性：.class</span>        <span class="token class-name">Class</span> clazz1 <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式二：通过运行时类的对象，调用getClass()</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz2 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式三：调用Class的静态方法：forName(String classPath)</span>        <span class="token class-name">Class</span> clazz3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//clazz3 = Class.forName("java.lang.String");</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token comment">//方式四：使用类的加载器：ClassLoader  (了解)</span>        <span class="token comment">//ClassLoader classLoader = ReflectionTest.class.getClassLoader();</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz4 <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="4、哪些类型可以有Class对象"><a href="#4、哪些类型可以有Class对象" class="headerlink" title="4、哪些类型可以有Class对象"></a>4、哪些类型可以有Class对象</h4><ol><li>class：外部类、成员内部类、静态内部类、局部内部类、匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Class</span> c1 <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c2 <span class="token operator">=</span> <span class="token class-name">Comparable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c4 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c5 <span class="token operator">=</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c6 <span class="token operator">=</span> <span class="token class-name">Override</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c7 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c8 <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c9 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c10 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span> c11 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 只要数组的元素类型与维度一样，就是同一个Class</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c10 <span class="token operator">==</span> c11<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="三、类的加载与ClassLoader"><a href="#三、类的加载与ClassLoader" class="headerlink" title="三、类的加载与ClassLoader"></a>三、类的加载与ClassLoader</h3><h4 id="1、类的加载过程"><a href="#1、类的加载过程" class="headerlink" title="1、类的加载过程"></a>1、类的加载过程</h4><p>  程序经过javac.exe命令以后，会生成一个或多个字节码文件(.class结尾)。接着我们使用java.exe命令对某个字节码文件进行解释运行。相当于将某个字节码文件加载到内存中。此过程就称为类的加载。加载到内存中的类，我们就称为运行时类，<strong>此运行时类，就作为Class的一个实例</strong>。(<strong>可以理解为类本身也是一个对象，是一个Class类型的对象</strong>)当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p><blockquote><p><img src="/posts/7ef4d58a/1.png" alt="类的加载过程"><br>加载</p><blockquote><p>  将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。</p></blockquote><p>链接</p><blockquote><p>将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><blockquote><ul><li>验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题</li><li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul></blockquote></blockquote><p>初始化</p><blockquote><ul><li>执行类构造器&lt;clinit&gt;()方法的过程。类构造器&lt;clinit&gt;()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中被正确加锁和同步。</li></ul></blockquote></blockquote><h4 id="2、类的初始化"><a href="#2、类的初始化" class="headerlink" title="2、类的初始化"></a>2、类的初始化</h4><ol><li>类的主动引用（一定会发生类的初始化）<blockquote><ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul></blockquote></li><li>类的被动引用（不会发生类的初始化）<blockquote><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如，当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul></blockquote></li></ol><h4 id="3、类加载器的作用"><a href="#3、类加载器的作用" class="headerlink" title="3、类加载器的作用"></a>3、类加载器的作用</h4><ol><li>类加载的作用：<blockquote><p>将class文件字节码内容加载到内存中，并将这些静态数据转<strong>换成方法区的运行时数据结构</strong>，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p></blockquote></li><li>类缓存：<blockquote><p>标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//对于自定义类，使用系统类加载器进行加载</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoaderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用系统类加载器的getParent()：获取扩展类加载器</span>        <span class="token class-name">ClassLoader</span> classLoader1 <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用扩展类加载器的getParent()：无法获取引导类加载器</span>        <span class="token comment">//引导类加载器主要负责加载java的核心类库，无法加载自定义类的。</span>        <span class="token class-name">ClassLoader</span> classLoader2 <span class="token operator">=</span> classLoader1<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>        <span class="token class-name">ClassLoader</span> classLoader3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取一个系统类加载器</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.获取系统类加载器的父类加载器，即扩展类加载器</span>        classLoader <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.获取扩展类加载器的父类加载器，即引导类加载器</span>        classLoader <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>        <span class="token comment">//4.测试当前类由哪个类加载器进行加载</span>        classLoader <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"ClassLoaderTest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.测试JDK提供的Object类由哪个类加载器加载</span>        classLoader <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span>        <span class="token comment">//6. 关于类加载器的一个主要方法：getResourceAsStream(String str)：获取类路径下的指定文件的输入流</span>        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        in <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    Properties：用来读取配置文件。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> pros <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//此时的文件默认在当前的module下。</span>        <span class="token comment">//读取配置文件的方式一：</span><span class="token comment">//        FileInputStream fis = new FileInputStream("jdbc.properties");</span><span class="token comment">//        FileInputStream fis = new FileInputStream("src\\jdbc1.properties");</span><span class="token comment">//        pros.load(fis);</span>        <span class="token comment">//读取配置文件的方式二：使用ClassLoader</span>        <span class="token comment">//配置文件默认识别为：当前module的src下</span>        <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token class-name">ClassLoaderTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc1.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> user <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user = "</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">",password = "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="四、创建运行时类的对象"><a href="#四、创建运行时类的对象" class="headerlink" title="四、创建运行时类的对象"></a>四、创建运行时类的对象</h3><ol><li>创建类的对象：调用Class对象的newInstance()方法（相当于调用类的无参构造器来造对象）<blockquote><p>类必须有一个无参的构造器<br>类的构造器的访问权限需要足够</p></blockquote></li><li>也可以在反射中使用其他的构造器来造对象<blockquote><ul><li>通过Class类的getDeclaredConstructor(Class&lt;?&gt; … parameterTypes)取得本类的指定形参类型的构造器</li><li>向构造器的形参中传递一个对象数组进去，里面包含了构造器中所需要的的各个参数</li><li>通过Constructor实例化对象</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewInstanceTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewInstanceTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * newInstance()：调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参的构造器。         * 要想此方法正常的创建运行时类的对象，要求：         * 1. 运行时类必须提供空参的构造器         * 2. 空参的构造器的访问权限得够。通常，设置为public。         *         * 在javabean中要求提供一个public的空参构造器。原因：         * 1. 便于通过反射，创建运行时类的对象         * 2. 便于子类继承此运行时类时，默认调用super()时，保证父类有此构造器         */</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取公共构造器，造对象</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> cls <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> cons <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取私有构造器，造对象</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> cons1 <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cons1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> cons1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 体会反射的动态性 */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0,1,2</span>            <span class="token class-name">String</span> classPath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                    classPath <span class="token operator">=</span> <span class="token string">"java.util.Date"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    classPath <span class="token operator">=</span> <span class="token string">"java.lang.Object"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                    classPath <span class="token operator">=</span> <span class="token string">"Person"</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>classPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*创建一个指定类的对象*/</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> classPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="五、获取运行时类的完整结构"><a href="#五、获取运行时类的完整结构" class="headerlink" title="五、获取运行时类的完整结构"></a>五、获取运行时类的完整结构</h3><ol><li><p>实现的全部接口</p><blockquote><p><strong>public Class&lt;?&gt;[] getInterfaces()：</strong>获取该Class对象所表示的类或接口所实现的接口。（不包括其父类所实现的接口）</p></blockquote></li><li><p>所继承的父类</p><blockquote><p><strong>public Class&lt;? Super T&gt; getSuperclass()：</strong>返回表示此Class所表示的实体（类、接口、基本类型）的父类的Class</p></blockquote></li><li><p>全部的构造器</p><blockquote><ul><li><strong>public Constructor&lt;T&gt;[] getConstructors()：</strong>返回此Class对象所表示的类的所有的public构造方法</li><li><strong>public Constructor&lt;T&gt;[] getDeclaredConstructors()：</strong>返回此 Class 对象表示的类声明的所有构造方法。</li><li><strong>public Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;… parameterTypes)：</strong>按照指定的形参类型，返回此 Class 对象表示的类中所声明的带有指定形参列表的public构造器</li><li><strong>public Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)：</strong>按照指定的形参类型，返回此 Class 对象表示的类中所声明的带有指定形参列表的构造器（包括私有的构造器也能被获取）<blockquote><p>Constructor类中：</p><ul><li>取得修饰符：<strong>public int getModifiers()</strong></li><li>取得方法名称：<strong>public String getName()</strong></li><li>取得参数类型：<strong>public Class&lt;?&gt;[] getParameterTypes()</strong></li></ul></blockquote></li></ul></blockquote></li><li><p>全部的方法</p><blockquote><ul><li><strong>public Method[] getDeclaredMethods()：</strong>返回此Class对象所表示的类或接口中声明的所有方法。（不包括父类中声明的方法）</li><li><strong>public Method[] getMethods()：</strong>返回Class对象所表示类或接口中声明为public的方法。（包括父类中声明为public的方法）<blockquote><p>Method类中：</p><ul><li>取得全部的返回值：<strong>public Class&lt;?&gt; getReturnType()</strong></li><li>取得全部的参数：<strong>public Class&lt;?&gt;[] getParameterTypes()</strong></li><li>取得修饰符：<strong>public int getModifiers()</strong></li><li>取得异常信息：<strong>public Class&lt;?&gt;[] getExceptionTypes()</strong></li></ul></blockquote></li></ul></blockquote></li><li><p>全部的Field</p><blockquote><ul><li><strong>public Field getFields()：</strong>返回此Class对象所表示的类或接口中声明为public的Field。(包括父类中声明为public的属性)</li><li><strong>public Field getDeclaredFields()：</strong>返回此Class对象所表示的类或接口中声明的全部Field。（不包括父类中声明的属性）<blockquote><p>Field类中：</p><ul><li>以整数形式返回此Field的修饰符：<strong>public int getModifiers()</strong></li><li>得到Field的属性类型：<strong>public Class&lt;?&gt; getType()</strong></li><li>返回Field的名称：<strong>public String getName()</strong></li></ul></blockquote></li></ul></blockquote></li><li><p>相关注解 Annotation</p><blockquote><ul><li>getAnnotation(Class&lt;T&gt; annotationClass)</li><li>getDeclaredAnnotations()</li></ul></blockquote></li><li><p>相关泛型</p><blockquote><ul><li>获取带有泛型的父类类型：Type getGenericSuperclass()</li><li>泛型类型：ParameterizedType</li><li>获取实际的泛型类型参数数组：Type[] getActualTypeArguments()</li></ul></blockquote></li><li><p>类所在的包</p><blockquote><p>Packge getPackage()</p></blockquote></li></ol><h3 id="六、获取运行时类的指定结构"><a href="#六、获取运行时类的指定结构" class="headerlink" title="六、获取运行时类的指定结构"></a>六、获取运行时类的指定结构</h3><ol><li><p>调用指定方法</p><blockquote><p>通过反射，调用类中的方法，通过Method类完成。步骤：</p><ol><li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</li><li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。</li></ol><p><strong>Object invoke(Object obj, Object … args)</strong></p><blockquote><ul><li>Object 对应原方法的返回值，若原方法无返回值，此时返回null</li><li>若原方法若为静态方法，此时形参Object obj可为null</li><li>若原方法形参列表为空，则Object[] args为null</li><li>若原方法声明为private，则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。</li></ul></blockquote></blockquote></li><li><p>调用指定属性<br>  在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作。</p><blockquote><ul><li><strong>public Field getField(String name)</strong> 返回此Class对象表示的类或接口的指定为public的Field。</li><li><strong>public Field getDeclaredField(String name)</strong> 返回此Class对象表示的类或接口的指定的Field。</li></ul><p>在Field中：</p><blockquote><ul><li><strong>public Object get(Object obj)</strong> 取得指定对象obj上此Field的属性内容</li><li><strong>public void set(Object obj,Object value)</strong> 设置指定对象obj上此Field的属性内容</li></ul></blockquote></blockquote></li><li><p>获取指定的构造器</p><blockquote><ul><li><strong>public Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;… parameterTypes)：</strong>按照指定的形参类型，返回此 Class 对象表示的类中所声明的带有指定形参列表的public构造器</li><li><strong>public Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)：</strong>按照指定的形参类型，返回此 Class 对象表示的类中所声明的带有指定形参列表的构造器（包括私有的构造器也能被获取）</li></ul><p>使用得到的构造器</p><ul><li>调用所得到的Constructor中的newInstance()方法，并传入指定的形参列表即可创建对应的实例。</li></ul></blockquote></li><li><p>关于 setAccessible 方法的使用</p><blockquote><ul><li>Method和Field、Constructor对象都有setAccessible()方法。</li><li>setAccessible启动和禁用访问安全检查的开关。</li><li>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。<blockquote><ul><li>提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。</li><li>使得原本无法访问的私有成员也可以访问</li></ul></blockquote></li><li>参数值为false则指示反射的对象应该实施Java语言访问检查。</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的IO流</title>
      <link href="/posts/a24ff270.html"/>
      <url>/posts/a24ff270.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>I&#x2F;O是Input&#x2F;Output的缩写，I&#x2F;O技术是非常实用的技术，用于处理设备之间的数据传输。如读&#x2F;写文件，网络通讯等。Java程序中，对于数据的输入&#x2F;输出操作以“流(stream)” 的方式进行。java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过<strong>标准的方法</strong>输入或输出数据。</p></blockquote><ol><li>输入input：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</li><li>输出output：将程序（内存）数据输出到外部存储设备中。</li></ol><h3 id="一、流的分类"><a href="#一、流的分类" class="headerlink" title="一、流的分类"></a>一、流的分类</h3><ol><li>按操作<strong>数据单位</strong>不同分为：<strong>字节流（8 bit），字符流（16 bit）</strong></li><li>按数据流的<strong>流向</strong>不同分为：<strong>输入流，输出流</strong></li><li>按流的<strong>角色</strong>不同分为：<strong>节点流，处理流</strong><blockquote><ul><li><strong>节点流：</strong>直接从数据源或目的地读写数据</li><li><strong>处理流：</strong>不直接连接到数据源或目的地，而是“连接”在已经存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</li></ul></blockquote></li></ol><table><thead><tr><th>抽象基类</th><th>字节流</th><th>字符流</th></tr></thead><tbody><tr><td>输入流</td><td>InputStream</td><td>Reader</td></tr><tr><td>输出流</td><td>OutputStream</td><td>Writer</td></tr></tbody></table><p><strong>I&#x2F;O流的体系</strong></p><table><thead><tr><th>分类</th><th>字节输入流</th><th>字节输出流</th><th>字符输入流</th><th>字符输出流</th></tr></thead><tbody><tr><td><strong>抽象基类</strong></td><td>InputStream</td><td>OuputStream</td><td>Reader</td><td>Writer</td></tr><tr><td><strong>访问文件</strong></td><td>FileInputStream</td><td>FileOutputStream</td><td>FileReader</td><td>FileWriter</td></tr><tr><td><strong>访问数组</strong></td><td>ByteArrayInputStream</td><td>ByteArrayOutputStream</td><td>CharArrayReader</td><td>CharArrayWriter</td></tr><tr><td><strong>访问管道</strong></td><td>PipedInputStream</td><td>PipedOutputStream</td><td>pipedReader</td><td>pipedWriter</td></tr><tr><td><strong>访问字符串</strong></td><td></td><td></td><td>StringReader</td><td>StringWriter</td></tr><tr><td><strong>缓冲流</strong></td><td>BufferedInputStream</td><td>BufferedOutputStream</td><td>BufferedReader</td><td>BufferedWriter</td></tr><tr><td><strong>转换流</strong></td><td></td><td></td><td>InputStreamReader</td><td>OuputStreamWriter</td></tr><tr><td><strong>对象流</strong></td><td>ObjectInputStream</td><td>ObjectOutputStream</td><td></td><td></td></tr><tr><td></td><td>FilterInputStream</td><td>FilterOutputStream</td><td>FilterReader</td><td>FilterWriter</td></tr><tr><td><strong>打印流</strong></td><td></td><td>PrintStream</td><td></td><td>PrintWriter</td></tr><tr><td><strong>推回输入流</strong></td><td>PushbackInputStream</td><td></td><td>PushbackReader</td><td></td></tr><tr><td><strong>数据流</strong></td><td>DataInputStream</td><td>DataOutputStream</td><td></td><td></td></tr></tbody></table><h3 id="二、InputStream-amp-Reader"><a href="#二、InputStream-amp-Reader" class="headerlink" title="二、InputStream &amp; Reader"></a>二、InputStream &amp; Reader</h3><ol><li><p>InputStream 和 Reader 是所有<strong>输入流</strong>的基类。</p></li><li><p>程序中打开的文件IO资源不属于内存里的资源，垃圾回收机制无法回收该资源，所以<strong>应该显示关闭文件IO资源</strong></p></li><li><p>FileInputStream从文件系统中的某个文件中获得输入<strong>字节</strong>。FileInputStream用于读取非文本数据之类的原始字节流。若想要读取字符流，需要使用FileReader。</p></li><li><p>InputStream（典型实现：FileInputStream）</p><blockquote><ul><li><strong>int read()：</strong>从输入流中读取数据的下一个字节。返回 0 到 255 范围内的 int 字节值。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。</li><li><strong>int read(byte[] b)：</strong>从此输入流中将最多 b.length 个字节的数据读入一个 byte 数组中。如果因为已经到达流末尾而没有可用的字节，则返回值 -1。否则以整数形式返回实际读取的字节数。</li><li><strong>int read(byte[] b, int off, int len)：</strong>将输入流中最多 len 个数据字节读入 byte 数组，从off处开始存储。尝试读取 len 个字节，但读取的字节也可能小于该值。以整数形式返回实际读取的字节数。如果因为流位于文件末尾而没有可用的字节，则返回值 -1。</li><li><strong>public void close() throws IOException：</strong>关闭此输入字节流并释放与之关联的所有系统资源。</li></ul></blockquote></li><li><p>Reader (典型实现：FileReader)</p><blockquote><ul><li><strong>int read()：</strong>读取单个字符。作为整数读取的字符，范围在 0 到 65535 之间 (0x00-0xffff)（2个字节的Unicode码），如果已到达流的末尾，则返回 -1</li><li><strong>int read(char[] cbuf)：</strong>将字符读入数组。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</li><li><strong>int read(char[] cbuf, int off, int len)：</strong>将字符读入数组的某一部分。存到数组cbuf中，从off处开始存储，最多读len个字符。如果已到达流的末尾，则返回 -1。否则返回本次读取的字符数。</li><li><strong>public void close() throws IOException：</strong>关闭此输入字符流并释放与该流关联的所有系统资源。</li></ul></blockquote></li></ol><h3 id="三、OutputStream-amp-Writer"><a href="#三、OutputStream-amp-Writer" class="headerlink" title="三、OutputStream &amp; Writer"></a>三、OutputStream &amp; Writer</h3><ol><li><p>OutputStream 和 Writer 也非常相似：</p><blockquote><ul><li>void write(int b &#x2F; int c)</li><li>void write(byte[] b &#x2F; char[] cbuf)</li><li>void writer(byte[] b &#x2F; char[] cbuf, int off, int len)</li><li>void flush() 刷新</li><li>void close() 关闭，需要先刷新，再关闭</li></ul></blockquote></li><li><p>因为字符流直接以字符作为操作单位，所以 Writer 可以用字符串来替换字符数组，即以 String 对象作为参数</p><blockquote><ul><li>void write(String str);</li><li>void write(String str, int off, int len);</li></ul></blockquote></li><li><p>FileOutputStream 从文件系统中的某个文件中获得输出字节。FileOutputStream用于写出非文本数据之类的原始字节流。要写出字符流，需要使用 FileWriter</p></li><li><p>OutputStream（典型实现类：FileOutputStream）</p><blockquote><ul><li><strong>void write(int b)：</strong>将指定的字节写入此输出流。write 的常规协定是：向输出流写入一个字节。要写入的字节是参数 b 的八个低位。b 的 24 个高位将被忽略。即写入0~255范围的。</li><li><strong>void write(byte[] b)：</strong>将 b.length 个字节从指定的 byte 数组写入此输出流。write(b) 的常规协定是：应该与调用 write(b, 0, b.length) 的效果完全相同。</li><li><strong>void write(byte[] b, int off, int len)：</strong>将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流。</li><li><strong>public void flush() throws IOException：</strong>刷新此输出流并强制写出所有缓冲的输出字节，调用此方法表示应将这些字节立即写入它们预期的目标。</li><li><strong>public void close() throws IOException：</strong>关闭此输出字节流并释放与该流关联的所有系统资源。</li></ul></blockquote></li><li><p>Writer（典型实现类：FileWriter）</p><blockquote><ul><li><strong>void write(int c)：</strong>写入单个字符。要写入的字符包含在给定整数值的 16 个低位中，16 高位被忽略。 即写入0 到 65535 之间的Unicode码。</li><li><strong>void write(char[] cbuf)：</strong>写入字符数组。</li><li><strong>void write(char[] cbuf, int off, int len)：</strong>写入字符数组的某一部分。从off开始，写入len个字符</li><li><strong>void write(String str)：</strong>写入字符串。</li><li><strong>void write(String str, int off, int len)：</strong>写入字符串的某一部分。</li><li><strong>public void flush()：</strong>刷新该流的缓冲，则立即将它们写入预期目标。</li><li><strong>public void close() throws IOException：</strong>关闭此输出字符流并释放与该流关联的所有系统资源</li></ul></blockquote></li></ol><h3 id="四、节点流（或文件流）"><a href="#四、节点流（或文件流）" class="headerlink" title="四、节点流（或文件流）"></a>四、节点流（或文件流）</h3><h4 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h4><ol><li>建立一个输入流对象，将已存在的一个文件加载进流。<blockquote><p>FileReader fr &#x3D; new FileReader(new File(“test.txt”));</p></blockquote></li><li>创建一个临时存放数据的数组。<blockquote><p>char[] ch &#x3D; new char[1024];</p></blockquote></li><li>调用流对象的读取方法将流中的数据读入到数组中。<blockquote><p>fr.read(ch);</p></blockquote></li><li>关闭资源。<blockquote><p>fr.close();</p></blockquote></li></ol><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><ol><li>创建输出流对象，建立数据存放文件。<blockquote><p>FileWriter fw &#x3D; new FileWriter(new File(“text.txt”));</p></blockquote></li><li>调用流对象的写入方法，将数据写入流。<blockquote><p>fw.write(“atguigu-songhongkang”);</p></blockquote></li><li>关闭流资源，并将流中的数据清空到文件中。<blockquote><p>fw.close();</p></blockquote></li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>定义文件路径时，注意：可以用“&#x2F;”或者“\\”。</li><li>在<strong>写入</strong>一个文件时，如果使用构造器FileOutputStream(file)，则<strong>目录下有同名文件将被覆盖</strong>。</li><li>如果使用构造器FileOutputStream(file,true)，则目录下的同名文件不会被覆盖，<strong>在文件内容末尾追加内容</strong>。</li><li>在读取文件时，必须保证该文件已存在，否则报异常。</li><li>字节流操作字节，比如：**.mp3<strong>，</strong>.avi<strong>，</strong>.rmvb<strong>，</strong>.mp4<strong>，</strong>.jpg<strong>，</strong>.doc<strong>，</strong>.ppt**</li><li>字符流操作字符，只能操作普通文本文件。最常见的文本文件：**.txt<strong>，</strong>.java<strong>，</strong>.c<strong>，</strong>.cpp** 等语言的源代码。尤其注意**.doc<strong>，</strong>.excel<strong>，</strong>.ppt**这些不是文本文件。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReaderWriterTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    说明点：    1. read()的理解：返回读入的一个字符。如果达到文件末尾，返回-1    2. 异常的处理：为了保证流资源一定可以执行关闭操作。需要使用try-catch-finally处理    3. 读入的文件一定要存在，否则就会报FileNotFoundException。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.实例化File类的对象，指明要操作的文件</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相较于当前Module</span>            <span class="token comment">//2.提供具体的流</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.数据的读入</span>            <span class="token comment">//read():返回读入的一个字符。如果达到文件末尾，返回-1</span>            <span class="token comment">//方式一：</span><span class="token comment">//        int data = fr.read();</span><span class="token comment">//        while(data != -1)&#123;</span><span class="token comment">//            System.out.print((char)data);</span><span class="token comment">//            data = fr.read();</span><span class="token comment">//        &#125;</span>            <span class="token comment">//方式二：语法上针对于方式一的修改</span>            <span class="token keyword">int</span> data<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//4.流的关闭操作</span><span class="token comment">//            try &#123;</span><span class="token comment">//                if(fr != null)</span><span class="token comment">//                    fr.close();</span><span class="token comment">//            &#125; catch (IOException e) &#123;</span><span class="token comment">//                e.printStackTrace();</span><span class="token comment">//            &#125;</span>            <span class="token comment">//或</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对read()操作升级：使用read的重载方法</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileReader1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.File类的实例化</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.FileReader流的实例化</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.读入的操作</span>            <span class="token comment">//read(char[] cbuf):返回每次读入cbuf数组中的字符的个数。如果达到文件末尾，返回-1</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//方式一：</span>                <span class="token comment">//错误的写法</span><span class="token comment">//                for(int i = 0;i &lt; cbuf.length;i++)&#123;</span><span class="token comment">//                    System.out.print(cbuf[i]);</span><span class="token comment">//                &#125;</span>                <span class="token comment">//正确的写法</span><span class="token comment">//                for(int i = 0;i &lt; len;i++)&#123;</span><span class="token comment">//                    System.out.print(cbuf[i]);</span><span class="token comment">//                &#125;</span>                <span class="token comment">//方式二：</span>                <span class="token comment">//错误的写法,对应着方式一的错误的写法</span><span class="token comment">//                String str = new String(cbuf);</span><span class="token comment">//                System.out.print(str);</span>                <span class="token comment">//正确的写法</span>                <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//4.资源的关闭</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    从内存中写出数据到硬盘的文件里。    说明：    1. 输出操作，对应的File可以不存在的。并不会报异常    2.         File对应的硬盘中的文件如果不存在，在输出的过程中，会自动创建此文件。         File对应的硬盘中的文件如果存在：                如果流使用的构造器是：FileWriter(file,false) / FileWriter(file):对原有文件的覆盖                如果流使用的构造器是：FileWriter(file,true):不会对原有文件覆盖，而是在原有文件基础上追加内容     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.提供File类的对象，指明写出到的文件</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.提供FileWriter的对象，用于数据的写出</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.写出的操作</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"I have a dream!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"you need to have a dream!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//4.流资源的关闭</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fw <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileReaderFileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.创建File类的对象，指明读入和写出的文件</span>            <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//不能使用字符流来处理图片等字节数据</span><span class="token comment">//            File srcFile = new File("爱情与友情.jpg");</span><span class="token comment">//            File destFile = new File("爱情与友情1.jpg");</span>            <span class="token comment">//2.创建输入流和输出流的对象</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.数据的读入和写出操作</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment">//记录每次读入到cbuf数组中的字符的个数</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//每次写出len个字符</span>                fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//4.关闭流资源</span>            <span class="token comment">//方式一：</span><span class="token comment">//            try &#123;</span><span class="token comment">//                if(fw != null)</span><span class="token comment">//                    fw.close();</span><span class="token comment">//            &#125; catch (IOException e) &#123;</span><span class="token comment">//                e.printStackTrace();</span><span class="token comment">//            &#125;finally&#123;</span><span class="token comment">//                try &#123;</span><span class="token comment">//                    if(fr != null)</span><span class="token comment">//                        fr.close();</span><span class="token comment">//                &#125; catch (IOException e) &#123;</span><span class="token comment">//                    e.printStackTrace();</span><span class="token comment">//                &#125;</span><span class="token comment">//            &#125;</span>            <span class="token comment">//方式二：</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>fw <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>fr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileInputOutputStreamTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//使用字节流FileInputStream处理文本文件，可能出现乱码。</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1. 造文件</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.造流</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.读数据</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment">//记录每次读取的字节的个数</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//4.关闭资源</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    实现对图片的复制操作     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFileInputOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//</span>            <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情2.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//复制的过程</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//指定路径下文件的复制</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> srcPath<span class="token punctuation">,</span> <span class="token class-name">String</span> destPath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//</span>            <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//复制的过程</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCopyFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> srcPath <span class="token operator">=</span> <span class="token string">"C:\\Users\\Administrator\\Desktop\\01-视频.avi"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> destPath <span class="token operator">=</span> <span class="token string">"C:\\Users\\Administrator\\Desktop\\02-视频.avi"</span><span class="token punctuation">;</span><span class="token comment">//        String srcPath = "hello.txt";</span><span class="token comment">//        String destPath = "hello3.txt";</span>        <span class="token function">copyFile</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复制操作花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//618</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>图片加密</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PicTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//图片的加密</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"爱情与友情.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"爱情与友情secret.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//字节数组进行修改</span>                <span class="token comment">//错误的</span>                <span class="token comment">/*for(byte b : buffer)&#123;                    b = (byte) (b ^ 5);                &#125;*/</span>                <span class="token comment">//正确的</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//图片的解密</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"爱情与友情secret.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"爱情与友情4.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="五、处理流之一：缓冲流"><a href="#五、处理流之一：缓冲流" class="headerlink" title="五、处理流之一：缓冲流"></a>五、处理流之一：缓冲流</h3><p>  <strong>为了提高数据读写的速度</strong>，Java API 提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组，缺省使用**8192个字节(8Kb)**的缓冲区。</p><ol><li>缓冲流要“套接”在相应的节点流之上，根据数据操作单位可以把缓冲流分为：<blockquote><ul><li><strong>BufferedInputStream</strong> 和 <strong>BufferedOutputStream</strong></li><li><strong>BufferedReader</strong> 和 <strong>BufferedWriter</strong></li></ul></blockquote></li><li>当读取数据时，数据按块读入缓冲区，其后的读操作则直接访问缓冲区。</li><li>BufferedReader 会多出一个readLine()方法，每次读取文件中的一行字符数据，但是不包括换行符，若读到末尾则返回null。</li><li>BufferedWriter 会有一个newLine()方法，写入换行符。</li><li>当使用BufferedInputStream读取字节文件时，BufferedInputStream会一次性从文件中读取8192个(8Kb)，存在缓冲区中，直到缓冲区装满了，才重新从文件中读取下一个8192个字节数组。</li><li>向流中写入字节时，不会直接写到文件，先写到缓冲区中直到缓冲区写满，BufferedOutputStream才会把缓冲区中的数据一次性写到文件里。使用方法<strong>flush()可以强制将缓冲区的内容全部写入输出流</strong>。</li><li>关闭流的顺序和打开流的顺序相反。只要关闭最外层流即可，关闭最外层流也会相应关闭内层节点流</li><li>flush()方法的使用：手动将buffer中内容写入文件</li><li>如果是带缓冲区的流对象的close()方法，不但会关闭流，还<strong>会在关闭流之前刷新缓冲区</strong>，关闭后不能再写出</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferedTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    实现非文本文件的复制     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">BufferedStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.造文件</span>            <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情3.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.造流</span>            <span class="token comment">//2.1 造节点流</span>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.2 造缓冲流</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.复制的细节：读取、写入</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                bos.flush();//刷新缓冲区</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//4.资源关闭</span>            <span class="token comment">//要求：先关闭外层的流，再关闭内层的流</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span><span class="token comment">//        fos.close();</span><span class="token comment">//        fis.close();</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//实现文件复制的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copyFileWithBuffered</span><span class="token punctuation">(</span><span class="token class-name">String</span> srcPath<span class="token punctuation">,</span> <span class="token class-name">String</span> destPath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.造文件</span>            <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.造流</span>            <span class="token comment">//2.1 造节点流</span>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.2 造缓冲流</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.复制的细节：读取、写入</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//4.资源关闭</span>            <span class="token comment">//要求：先关闭外层的流，再关闭内层的流</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//说明：关闭外层流的同时，内层流也会自动的进行关闭。关于内层流的关闭，我们可以省略.</span><span class="token comment">//        fos.close();</span><span class="token comment">//        fis.close();</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCopyFileWithBuffered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> srcPath <span class="token operator">=</span> <span class="token string">"C:\\Users\\Administrator\\Desktop\\01-视频.avi"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> destPath <span class="token operator">=</span> <span class="token string">"C:\\Users\\Administrator\\Desktop\\03-视频.avi"</span><span class="token punctuation">;</span>        <span class="token function">copyFileWithBuffered</span><span class="token punctuation">(</span>srcPath<span class="token punctuation">,</span>destPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复制操作花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//618 vs 176</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    使用BufferedReader和BufferedWriter实现文本文件的复制     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBufferedReaderBufferedWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建文件和相应的流</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"dbcp.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"dbcp1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//读写操作</span>            <span class="token comment">//方式一：使用char[]数组</span><span class="token comment">//            char[] cbuf = new char[1024];</span><span class="token comment">//            int len;</span><span class="token comment">//            while((len = br.read(cbuf)) != -1)&#123;</span><span class="token comment">//                bw.write(cbuf,0,len);</span><span class="token comment">//    //            bw.flush();</span><span class="token comment">//            &#125;</span>            <span class="token comment">//方式二：使用String</span>            <span class="token class-name">String</span> data<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//方法一：</span><span class="token comment">//                bw.write(data + "\n");//data中不包含换行符</span>                <span class="token comment">//方法二：</span>                bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//data中不包含换行符</span>                bw<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提供换行的操作</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//关闭资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bw <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>br <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="六、处理流之二：转换流（属于字符流）"><a href="#六、处理流之二：转换流（属于字符流）" class="headerlink" title="六、处理流之二：转换流（属于字符流）"></a>六、处理流之二：转换流（属于字符流）</h3><p>  转换流实现了在字节流和字符流之间的转换。Java API 提供了两个转换流：</p><blockquote><ul><li><strong>InputStreamReader：将InputStream转换成Reader，即，将字节输入流转换成字符输入流</strong></li><li><strong>OuputStreamWriter：将Writer转换成OutputStream，即，将字符输出流转换成字节输出流</strong><br><img src="/posts/a24ff270/1.png" alt="转换流的使用"></li></ul></blockquote><ol><li><p>当字节流中的数据都是字符时，转成字符流操作更高效</p></li><li><p>很多时候我们使用转换流来处理文件乱码问题。实现编码和解码的功能。</p><blockquote><ul><li>解码：字节、字节数组 —&gt; 字符数组、字符串</li><li>编码：字符数组、字符串 —&gt; 字节、字节数组</li></ul></blockquote></li><li><p>字符集</p><blockquote><ul><li>ASCII：美国标准信息交换码。（用一个字节的7位可以表示）</li><li>ISO8859-1：拉丁码表。欧洲码表。（用一个字节的8为表示）</li><li>GB2312：中国的中文编码表。（最多两个字节编码所有字符）</li><li>GBK：中国的中文编码表升级，融合了更多的中文文字符号。（最多两个字节编码）</li><li>Unicode：国际标准码，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。（所有的文字都用两个字节来表示。）</li><li>UTF-8：变长的编码方式，可用1-4个字节来表示一个字符。</li></ul></blockquote></li><li><p><strong>InputStreamReader</strong><br>  <strong>实现将字节的输入流按指定字符集转换为字符的输入流。需要和InputStream“套接”。</strong></p><blockquote><p>构造器</p><blockquote><ul><li>public InputStreamReader(InputStream in)</li><li>public InputStreamReader(InputStream in, String charsetName)</li><li>如：Reader isr &#x3D; new InputStreamReader(System.in, “gbk”); 将标准输入流（字节流）转换成了指定字符集的字符输入流。</li></ul></blockquote></blockquote></li><li><p><strong>OutputStreamWriter</strong><br>  <strong>实现将字符的输出流按指定字符集转换为字节的输出流。</strong></p><blockquote><p>构造器</p><blockquote><ul><li>public OutputStreamWriter(OutputStream out)</li><li>public OutputSreamWriter(OutputStream out, String charsetName)</li></ul></blockquote></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStreamReaderTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    此时处理异常的话，仍然应该使用try-catch-finally    InputStreamReader的使用，实现字节输入流到字符输入流的转换     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"dbcp.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//InputStreamReader isr = new InputStreamReader(fis);//使用系统默认的字符集</span>        <span class="token comment">//参数2指明了字符集，具体使用哪个字符集，取决于文件dbcp.txt保存时使用的字符集</span>        <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    此时处理异常的话，仍然应该使用try-catch-finally    综合使用InputStreamReader和OutputStreamWriter     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.造文件、造流</span>        <span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"dbcp.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"dbcp_gbk.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fis<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fos<span class="token punctuation">,</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.读写过程</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//3.关闭资源</span>        isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="七、处理流之三：标准输入、输出流"><a href="#七、处理流之三：标准输入、输出流" class="headerlink" title="七、处理流之三：标准输入、输出流"></a>七、处理流之三：标准输入、输出流</h3><ol><li>System.in和System.out分别代表了系统标准的输入和输出设备</li><li>默认输入设备是：键盘，输出设备是：显示器</li><li>System.in的类型是InputStream</li><li>System.out的类型是PrintStream，其是OutputStream的子类FilterOutputStream 的子类</li><li>重定向：可以通过System类的setIn，setOut方法对默认设备进行改变。<blockquote><ul><li>public static void setIn(InputStream in)</li><li>public static void setOut(PrintStream out)</li></ul></blockquote></li></ol><h3 id="八、处理流之四：打印流"><a href="#八、处理流之四：打印流" class="headerlink" title="八、处理流之四：打印流"></a>八、处理流之四：打印流</h3><ol><li>实现将基本数据类型的数据格式转化为字符串输出</li><li>打印流：PrintStream和PrintWriter<blockquote><ul><li>提供了一系列重载的print()和println()方法，用于多种数据类型的输出</li><li>PrintStream和PrintWriter的输出不会抛出IOException异常</li><li>PrintStream和PrintWriter有自动flush功能</li><li>PrintStream 打印的所有字符都使用平台的默认字符编码转换为字节。在需要写入字符而不是写入字节的情况下，应该使用 PrintWriter 类。</li><li><strong>System.out返回的是PrintStream的实例</strong></li></ul></blockquote></li></ol><h3 id="九、处理流之五：数据流"><a href="#九、处理流之五：数据流" class="headerlink" title="九、处理流之五：数据流"></a>九、处理流之五：数据流</h3><ol><li>为了方便地操作Java语言的基本数据类型和String的数据，可以使用数据流。</li><li>数据流有两个类：（用于读取和写出基本数据类型、String类的数据）<blockquote><ul><li><strong>DataInputStream</strong> 和 <strong>DataOuputStream</strong></li><li>分别“套接”在InputStream和OutputStream子类的流上</li></ul></blockquote></li><li>DataInputStream 中的方法<blockquote><ul><li>boolean readBooelean()</li><li>char readChar()</li><li>byte readByte()</li><li>short readShort()</li><li>int readInt()</li><li>long readLong()</li><li>float readFloat()</li><li>double readDouble()</li><li>void readFully(byte[] b)</li><li>String readUTF()</li></ul></blockquote></li><li>DataOutputStream 中的方法<blockquote><p>将上述的方法的read改为相应的write即可</p></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OtherStreamTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    1.标准的输入、输出流        System.in:标准的输入流，默认从键盘输入        System.out:标准的输出流，默认从控制台输出        System类的setIn(InputStream is) / setOut(PrintStream ps)方式重新指定输入和输出的流。    练习：        从键盘输入字符串，要求将读取到的整行字符串转成大写输出。然后继续进行输入操作，        直至当输入“e”或者“exit”时，退出程序。    方法一：使用Scanner实现，调用next()返回一个字符串    方法二：使用System.in实现。System.in  --->  转换流 ---> BufferedReader的readLine()     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入字符串："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> data <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">"exit"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">String</span> upperCase <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>upperCase<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    2. 打印流：PrintStream 和 PrintWriter       提供了一系列重载的print() 和 println()     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\IO\\text.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建打印输出流,设置为自动刷新模式(写入换行符或字节 '\n' 时都会刷新输出缓冲区)</span>            ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 把标准输出流(控制台输出)改成文件</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 输出ASCII字符</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 每50个数据一行</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 换行</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ps <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    3. 数据流        DataInputStream 和 DataOutputStream        作用：用于读取或写出基本数据类型的变量或字符串    练习：将内存中的字符串、基本数据类型的变量写出到文件中。    注意：处理异常的话，仍然应该使用try-catch-finally.     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.</span>        <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.</span>        dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//刷新操作，将内存中的数据写入文件</span>        dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.</span>        dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    将文件中存储的基本数据类型变量和字符串读取到内存中，保存在变量中。    注意点：读取不同类型的数据的顺序要与当初写入文件时，保存的数据的顺序一致！     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.</span>        <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isMale <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age = "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isMale = "</span> <span class="token operator">+</span> isMale<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.</span>        dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="十、处理流之六：对象流"><a href="#十、处理流之六：对象流" class="headerlink" title="十、处理流之六：对象流"></a>十、处理流之六：对象流</h3><ol><li>用于<strong>存储</strong>和<strong>读取</strong> <strong>基本数据类型数据</strong>或<strong>对象</strong>的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</li><li>对象流有两个类：<strong>ObjectInputStream</strong> 和 <strong>OjbectOutputSteam</strong></li><li><strong>序列化：</strong>用ObjectOutputStream类<strong>保存</strong>基本类型数据或对象的机制</li><li><strong>反序列化：</strong>用ObjectInputStream类<strong>读取</strong>基本类型数据或对象的机制</li><li><strong>注：</strong>ObjectOutputStream和ObjectInputStream不能序列化<strong>static</strong>和<strong>transient</strong>修饰的成员变量</li></ol><h4 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h4><blockquote><ul><li>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。而当其它程序获取了这种二进制流，就可以恢复成原来的Java对象。</li><li>序列化的好处在于可将任何实现了Serializable接口（标识接口）的对象转化为字节数据，使其在保存和传输时可被还原</li><li>序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是JavaEE 平台的基础。</li><li>如果需要让某个对象支持序列化机制，则必须让对象所属的类及其属性是可序列化的（默认基本数据类型是可序列化的），为了让某个类是可序列化的，该类必须实现如下两个接口之一。否则，会抛出NotSerializableException异常 ① Serializable ② Externalizable</li><li>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：<blockquote><ul><li>private static final long serialVersionUID;</li><li>serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象进行版本控制，有关各版本反序列化时是否兼容。</li><li>如果类没有显示定义这个静态常量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明。</li></ul></blockquote></li><li>简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)</li></ul></blockquote><h4 id="使用对象流序列化对象"><a href="#使用对象流序列化对象" class="headerlink" title="使用对象流序列化对象"></a>使用对象流序列化对象</h4><blockquote><ul><li>若某个类实现了 Serializable 接口，该类的对象就是可序列化的：<blockquote><ul><li>创建一个 ObjectOutputStream</li><li>调用 ObjectOutputStream 对象的 writeObject(对象) 方法输出可序列化对象</li><li><strong>注意写出一次，操作flush()一次</strong></li></ul></blockquote></li><li>反序列化<blockquote><ul><li>创建一个 ObjectInputStream</li><li>调用 readObject() 方法读取流中的对象</li></ul></blockquote></li><li>强调：如果某个类的属性不是基本数据类型或 String 类型，而是另一个引用类型，那么这个引用类型必须是可序列化的，否则拥有该类型的Field 的类也不能序列化</li></ul></blockquote><h3 id="十一、随机存取文件流。不同于以上的IO流。"><a href="#十一、随机存取文件流。不同于以上的IO流。" class="headerlink" title="十一、随机存取文件流。不同于以上的IO流。"></a>十一、随机存取文件流。不同于以上的IO流。</h3><h4 id="RandomAccessFile-类"><a href="#RandomAccessFile-类" class="headerlink" title="RandomAccessFile 类"></a>RandomAccessFile 类</h4><ol><li><p>RandomAccessFile 声明在java.io包下，但直接继承于java.lang.Object类。并且它实现了DataInput、DataOutput这两个接口，也就意味着这个类既可以读也可以写。</p></li><li><p>RandomAccessFile 类支持 “随机访问” 的方式，程序可以直接跳到文件的任意地方来读、写文件。</p><blockquote><ul><li>支持只访问文件的部分内容</li><li>可以向已存在的文件后追加内容。</li></ul></blockquote></li><li><p>RandomAccessFile 对象包含一个记录指针，用以标示当前读写处的位置。RandomAccessFile 类对象可以自由移动记录指针：</p><blockquote><ul><li>long getFilePointer()：获取文件记录指针的当前位置</li><li>void seek(long pos)：将文件记录指针定位到 pos 位置</li></ul></blockquote></li><li><p>构造器：</p><blockquote><p>public RandomAccessFile(File file, String mode)<br>public RandomAccessFile(String name, String mode)</p></blockquote></li><li><p>创建 RandomAccessFile 类实例需要指定一个 mode 参数，该参数指定 RandomAccessFile 的访问模式：</p><blockquote><ul><li><strong>r：</strong>以只读方式打开</li><li><strong>rw：</strong>打开以便读取和写入</li><li><strong>rwd：</strong>打开以便读取和写入；同步文件内容的更新</li><li><strong>rws：</strong>打开以便读取和写入；同步文件内容和元数据的更新</li></ul></blockquote></li><li><p>如果模式为只读r。则不会创建文件，而是会去读取一个已经存在的文件，如果读取的文件不存在则会出现异常。 如果模式为rw读写。如果文件不存在则会去创建文件，如果存在则不会创建。</p></li><li><p>我们可以用RandomAccessFile这个类，来实现一个多线程断点下载的功能，用过下载工具的朋友们都知道，下载前都会建立两个临时文件，一个是与被下载文件大小相同的空文件，另一个是记录文件指针的位置文件，每次暂停的时候，都会保存上一次的指针，然后断点下载的时候，会继续从上一次的地方下载，从而实现断点下载或上传的功能。</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * RandomAccessFile的使用 * 1.RandomAccessFile直接继承于java.lang.Object类，实现了DataInput和DataOutput接口 * 2.RandomAccessFile既可以作为一个输入流，又可以作为一个输出流 * * 3.如果RandomAccessFile作为输出流时，写出到的文件如果不存在，则在执行过程中自动创建。 *   如果写出到的文件存在，则会对原有文件内容进行覆盖。（默认情况下，从头覆盖） * * 4. 可以通过相关的操作，实现RandomAccessFile“插入”数据的效果 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomAccessFileTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RandomAccessFile</span> raf1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">RandomAccessFile</span> raf2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.</span>            raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            raf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"爱情与友情1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> raf1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                raf2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//3.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>raf1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>raf2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    raf2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RandomAccessFile</span> raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将指针调到角标为3的位置</span>        raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    使用RandomAccessFile实现数据的插入效果     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RandomAccessFile</span> raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">,</span><span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将指针调到角标为3的位置</span>        <span class="token comment">//保存指针3后面的所有数据到StringBuilder中</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> raf1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//调回指针，写入“xyz”</span>        raf1<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将StringBuilder中的数据写入到文件中</span>        raf1<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        raf1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考：将StringBuilder替换为ByteArrayOutputStream</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="十二、Java-NIO"><a href="#十二、Java-NIO" class="headerlink" title="十二、Java NIO"></a>十二、Java NIO</h3><p>  Java NIO (New IO，Non-Blocking IO)是从Java 1.4版本开始引入的一套新的IO API，可以替代标准的Java IO API。NIO与原来的IO有同样的作用和目的，但是使用的方式完全不同，NIO支持面向缓冲区的(IO是面向流的)、基于通道的IO操作。<strong>NIO将以更加高效的方式进行文件的读写操作</strong>。</p><ol><li><p>随着 JDK 7 的发布，Java对NIO进行了极大的扩展，增强了对文件处理和文件系统特性的支持，以至于我们称他们为 NIO.2。因为 NIO 提供的一些功能，NIO已经成为文件处理中越来越重要的部分。</p></li><li><p>早期的Java只提供了一个File类来访问文件系统，但File类的功能比较有限，所提供的方法性能也不高。而且，大多数方法在出错时仅返回失败，并不会提供异常信息。</p></li><li><p>NIO. 2为了弥补这种不足，引入了Path接口，代表一个平台无关的平台路径，描述了目录结构中文件的位置。Path可以看成是File类的升级版本，实际引用的资源也可以不存在。</p><blockquote><p>在以前IO操作都是这样写的:</p><blockquote><p>import java.io.File;<br>File file &#x3D; new File(“index.html”);</p></blockquote><p>但在Java7 中，我们可以这样写：</p><blockquote><p>import java.nio.file.Path;<br>import java.nio.file.Paths;<br>Path path &#x3D; Paths.get(“index.html”);</p></blockquote></blockquote></li><li><p>同时，NIO.2在java.nio.file包下还提供了Files、Paths工具类，Files包含了大量静态的工具方法来操作文件；Paths则包含了两个返回Path的静态工厂方法。</p></li><li><p>Paths 类提供的静态 get() 方法用来获取 Path 对象：</p><blockquote><ul><li>static Path get(String first, String … more) : 用于将多个字符串串连成路径</li><li>static Path get(URI uri): 返回指定uri对应的Path路径</li></ul></blockquote></li><li><p>Path接口 常用方法</p><blockquote><ul><li>String toString()：返回调用 Path 对象的字符串表示形式</li><li>boolean startsWith(String path)：判断是否以 path 路径开始</li><li>boolean endsWith(String path)：判断是否以 path 路径结束</li><li>boolean isAbsolute()：判断是否是绝对路径</li><li>Path getParent()：返回Path对象包含整个路径，不包含 Path 对象指定的文件路径</li><li>Path getRoot()：返回调用 Path 对象的根路径</li><li>Path getFileName()：返回与调用 Path 对象关联的文件名</li><li>int getNameCount()：返回Path 根目录后面元素的数量</li><li>Path getName(int idx)：返回指定索引位置 idx 的路径名称</li><li>Path toAbsolutePath()：作为绝对路径返回调用 Path 对象</li><li>Path resolve(Path p)：合并两个路径，返回合并后的路径对应的Path对象</li><li>File toFile()：将Path转化为File类的对象</li></ul></blockquote></li><li><p>操作文件或目录的工具类 Files</p><blockquote><p>常用方法</p><blockquote><ul><li>Path copy(Path src, Path dest, CopyOption … how)：文件的复制</li><li>Path createDirectory(Path path, FileAttribute&lt;?&gt; … attr)：创建一个目录</li><li>Path createFile(Path path, FileAttribute&lt;?&gt; … arr)：创建一个文件</li><li>void delete(Path path)：删除一个文件&#x2F;目录，如果不存在，执行报错</li><li>void deleteIfExists(Path path)：Path对应的文件&#x2F;目录如果存在，执行删除</li><li>Path move(Path src, Path dest, CopyOption…how)：将 src 移动到 dest 位置</li><li>long size(Path path)：返回 path 指定文件的大小</li></ul></blockquote><p>用于判断</p><blockquote><ul><li>boolean exists(Path path, LinkOption … opts)：判断文件是否存在</li><li>boolean isDirectory(Path path, LinkOption … opts)：判断是否是目录</li><li>boolean isRegularFile(Path path, LinkOption … opts)：判断是否是文件</li><li>boolean isHidden(Path path)：判断是否是隐藏文件</li><li>boolean isReadable(Path path)：判断文件是否可读</li><li>boolean isWritable(Path path)：判断文件是否可写</li><li>boolean notExists(Path path, LinkOption … opts)：判断文件是否不存在</li></ul></blockquote><p>用于操作内容</p><ul><li>SeekableByteChannel newByteChannel(Path path, OpenOption…how)：获取与指定文件的连接，how 指定打开方式。</li><li>InputStream <strong>newInputStream</strong>(Path path, OpenOption…how)：获取 InputStream 对象</li><li>OutputStream <strong>newOutputStream</strong>(Path path, OpenOption…how)：获取 OutputStream 对象</li><li>BufferedReader <strong>newBufferedReader</strong>(Path path)</li><li>BufferedReader <strong>newBufferedReader</strong>(Path path, Charset cs)</li><li>BufferedWriter <strong>newBufferedWriter</strong>(Path path, OpenOption… options)</li><li>BufferedWriter <strong>newBufferedWriter</strong>(Path path, Charset cs, OpenOption… options)</li><li>DirectoryStream&lt;Path&gt; newDirectoryStream(Path dir)：打开dir指定的目录</li><li>DirectoryStream&lt;Path&gt; newDirectoryStream(Path dir, String glob)</li><li>DirectoryStream&lt;Path&gt; newDirectoryStream(Path dir, DirectoryStream.Filter&lt;? super Path&gt; filter)</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中File类的使用</title>
      <link href="/posts/fa8d17db.html"/>
      <url>/posts/fa8d17db.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java.io.File 是用来表示文件和文件目录路径的抽象形式，与平台无关。</p></blockquote><ol><li>File 能新建、删除、重命名文件和目录，但是<strong>File不能访问文件内容本身</strong>。如果需要访问文件内容本身，则需要使用<strong>输入&#x2F;输出流</strong>。</li><li><strong>想要在Java程序中表示一个真实存在的文件或目录，那么必须有一个File对象；但是Java程序中的一个File对象，可能没有一个真实存在的文件或目录</strong>。</li><li>File 对象可以作为参数传递给流的构造器。</li></ol><h3 id="一、常用构造器"><a href="#一、常用构造器" class="headerlink" title="一、常用构造器"></a>一、常用构造器</h3><ol><li><p>public File(String pathname)</p><blockquote><p>以pathname为路径创建File对象，可以是<strong>绝对路径或者相对路径</strong>，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。（绝对路径：是一个固定的路径，从盘符开始。相对路径：是相对于某个位置开始。）<br><img src="/posts/fa8d17db/1.png" alt="创建File类的对象"></p></blockquote></li><li><p>public File(String parent, String child)</p><blockquote><p>以parent为父路径，child为子路径创建File对象</p></blockquote></li><li><p>public File(File parent, String)</p><blockquote><p>根据一个父File对象和子文件路径创建File对象</p></blockquote></li></ol><h3 id="二、路径分隔符"><a href="#二、路径分隔符" class="headerlink" title="二、路径分隔符"></a>二、路径分隔符</h3><ol><li>路径中的每级目录之间用一个路径分隔符隔开。路径分隔符和系统有关：<blockquote><ul><li>windows和DOS系统默认使用“\”来表示</li><li>UNIX和URL使用“&#x2F;”来表示</li></ul></blockquote></li><li>Java程序支持跨平台运行，因此路径分隔符要慎用。为了解决这个隐患，File类提供了一个常量：public static final String separator。<strong>根据操作系统，动态的提供分隔符</strong>。</li></ol><h3 id="三、File类的常用方法"><a href="#三、File类的常用方法" class="headerlink" title="三、File类的常用方法"></a>三、File类的常用方法</h3><ol><li><p>获取功能：</p><blockquote><ul><li>public String getAbsolutePath()：获取绝对路径</li><li>public String getPath()：获取路径</li><li>public String getName()：获取名称</li><li>public String getParent()：获取上层文件目录路径。若无，返回null</li><li>public long length()：获取文件长度（即：字节数）。不能获取目录的长度。</li><li>public long lastModified()：获取最后一次修改时间，毫秒值。</li><li>public String[] list()：获取指定目录下的所有文件或者文件目录的名称数组</li><li>public File[] listFile()：获取指定目录下的所有文件或者文件目录的File数组</li></ul></blockquote></li><li><p>重命名功能</p><blockquote><ul><li>public boolean renameTo(File dest)：把文件重命名为指定的文件路径</li><li>file1.renameTo(file2)，要想保证返回true，需要file1在硬盘中是存在的，且file2不能再硬盘中存在。（这个功能更像是在复制文件）</li></ul></blockquote></li><li><p>判断功能</p><blockquote><ul><li>public boolean isDirectory()：判断是否是文件目录</li><li>public boolean isFile()：判断是否是文件</li><li>public boolean exists()：判断是否存在</li><li>public boolean canRread()：判断是否可读</li><li>public boolean canWrite()：判断是否可写</li><li>public boolean isHidden()：判断是否隐藏</li></ul></blockquote></li><li><p>创建功能</p><blockquote><ul><li><strong>public boolean createNewFile()：</strong>创建文件。若文件存在，则不创建，返回false</li><li><strong>public boolean mkdir()：</strong>创建文件目录。如果此文件目录存在，就不创建了。如果此文件目录的上层目录不存在，也不创建。</li><li><strong>public boolean mkdirs()：</strong>创建文件目录。如果上层文件目录不存在，一并创建</li><li><strong>注意事项：</strong>如果你创建文件或者文件目录没有写盘符路径，那么，默认在项目<br>路径下。</li></ul></blockquote></li><li><p>删除功能</p><blockquote><ul><li>public boolean delete()：删除文件或者文件夹</li><li><strong>注意：</strong>Java中的删除不走回收站。若要删除一个文件目录，注意该目录内不能包含文件或者文件目录。</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的泛型使用</title>
      <link href="/posts/8255cc5e.html"/>
      <url>/posts/8255cc5e.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>从JDK1.5以后，Java引入了“参数化类型（Parameterized type）”的概念，允许我们在创建集合时再指定集合元素的类型，正如：List&lt;String&gt;，这表明该List只能保存字符串类型的对象。</p></blockquote><h3 id="一、泛型的设计背景"><a href="#一、泛型的设计背景" class="headerlink" title="一、泛型的设计背景"></a>一、泛型的设计背景</h3><p>  集合容器类在设计阶段&#x2F;声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。Collection&lt;E&gt;，List&lt;E&gt;，ArrayList&lt;E&gt; 这个&lt;E&gt;就是类型参数，即泛型。</p><h3 id="二、泛型的概念"><a href="#二、泛型的概念" class="headerlink" title="二、泛型的概念"></a>二、泛型的概念</h3><p>  所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。</p><table><thead><tr><th>有泛型时</th><th>无泛型时</th></tr></thead><tbody><tr><td><img src="/posts/8255cc5e/1.png"></td><td><img src="/posts/8255cc5e/2.png"></td></tr></tbody></table><h3 id="三、在集合中使用泛型"><a href="#三、在集合中使用泛型" class="headerlink" title="三、在集合中使用泛型"></a>三、在集合中使用泛型</h3><ol><li>集合接口或集合类在jdk5.0时都修改为带泛型的结构。</li><li>在实例化集合类时，可以指明具体的泛型类型</li><li>指明完以后，在集合类或接口中凡是定义类或接口时，内部结构（比如：方法、构造器、属性等）使用到类的泛型的位置，都指定为实例化的泛型类型。比如：add(E e)  —&gt;实例化以后：add(Integer e)</li><li><strong>注意点：泛型的类型必须是类，不能是基本数据类型。需要用到基本数据类型的位置，拿包装类替换</strong></li><li>如果实例化时，没有指明泛型的类型。<strong>默认类型为java.lang.Object类型</strong>。<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tset1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//Map&lt;String,Integer> map = new HashMap&lt;String,Integer>();</span>        <span class="token comment">//jdk7新特性：类型推断</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//map.put(123,"ABC");//会报错</span>        <span class="token comment">//泛型的嵌套</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entry <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> e <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"----"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="四、自定义泛型结构：泛型类、泛型接口；泛型方法"><a href="#四、自定义泛型结构：泛型类、泛型接口；泛型方法" class="headerlink" title="四、自定义泛型结构：泛型类、泛型接口；泛型方法"></a>四、自定义泛型结构：泛型类、泛型接口；泛型方法</h3><h4 id="泛型类、泛型接口："><a href="#泛型类、泛型接口：" class="headerlink" title="泛型类、泛型接口："></a>泛型类、泛型接口：</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> orderName<span class="token punctuation">;</span>    <span class="token keyword">int</span> orderId<span class="token punctuation">;</span>    <span class="token class-name">T</span> orderT<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderName<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">OrderId</span><span class="token punctuation">,</span> <span class="token class-name">T</span> orderT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderName <span class="token operator">=</span> orderName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> <span class="token class-name">OrderId</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderT <span class="token operator">=</span> orderT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getOrderT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> orderT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderT</span><span class="token punctuation">(</span><span class="token class-name">T</span> orderT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderT <span class="token operator">=</span> orderT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Order&#123;"</span> <span class="token operator">+</span>                <span class="token string">"orderName='"</span> <span class="token operator">+</span> orderName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", orderId="</span> <span class="token operator">+</span> orderId <span class="token operator">+</span>                <span class="token string">", orderT="</span> <span class="token operator">+</span> orderT <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果定义了泛型类，实例化没有指明类的泛型，则认为此泛型类型为Object类型</span>    <span class="token comment">//要求：如果大家定义了类是带泛型的，建议在实例化时要指明类的泛型</span>    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    order<span class="token punctuation">.</span><span class="token function">setOrderT</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    order<span class="token punctuation">.</span><span class="token function">setOrderT</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//建议：实例化时指明类的泛型</span>    <span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> order1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"orderAA"</span><span class="token punctuation">,</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"order:AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    order1<span class="token punctuation">.</span><span class="token function">setOrderT</span><span class="token punctuation">(</span><span class="token string">"AA:hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol><li>泛型类可能有多个参数，此时应将多个参数一起放在尖括号内。比如：&lt;E1,E2,E3&gt;</li><li>泛型类的构造器如下：public GenericClass(){}。而下面是错误的：public GenericClass&lt;E&gt;(){}</li><li>实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。</li><li>泛型不同的引用不能相互赋值。尽管在编译时ArrayList&lt;String&gt;和ArrayList&lt;Integer&gt;是两种类型，但是，在运行时只有一个ArrayList被加载到JVM中。</li><li>泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。<strong>经验：泛型要使用一路都用。要不用，一路都不要用。</strong></li><li>如果泛型结构是一个接口或抽象类，则不可创建泛型类的对象。</li><li>jdk1.7，泛型的简化操作：ArrayList&lt;Fruit&gt; flist &#x3D; new ArrayList&lt;&gt;();自动类型推断。</li><li>泛型的指定中不能使用基本数据类型，可以使用包装类替换。</li><li>在类&#x2F;接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。<strong>但在静态方法中不能使用类的泛型。</strong></li><li><strong>异常类不能是泛型的</strong></li><li>不能使用new E[]来实例化一个泛型对象。但是可以：E[] elements &#x3D; (E[])new Object[capacity]; 参考ArrayList源码中的声明：Object[] elementData，而非泛型参数类型数组。</li><li><strong>父类中有泛型，子类可以选择保留泛型，也可以选择指定泛型类型：</strong><blockquote><p>子类不保留父类的泛型：按需实现</p><blockquote><ul><li>没有类型，擦除</li><li>具体类型（子类在继承带泛型的父类时，如果指明了泛型类型。则实例化子类对象时，不再需要指明泛型，前提是子类没有自定义其他类型的泛型）</li></ul></blockquote><p>子类保留父类的泛型：泛型子类</p><blockquote><ul><li>全部保留 (public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;)</li><li>部分保留</li></ul></blockquote></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类不保留父类的泛型</span><span class="token comment">// 1）没有类型 擦除</span><span class="token keyword">class</span> <span class="token class-name">Son1</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span><span class="token comment">//等价于class Son1&lt;A, B> extends Father&lt;Object, Object>&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2）具体类型</span><span class="token keyword">class</span> <span class="token class-name">Son2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//子类保留父类的泛型</span><span class="token comment">// 1）全部保留</span><span class="token keyword">class</span> <span class="token class-name">Son3</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2）部分保留</span><span class="token keyword">class</span> <span class="token class-name">Son4</span><span class="token generics"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> T2<span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>注意：</strong><br><img src="/posts/8255cc5e/3.png"></p><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><ol><li>方法也可以被泛型化，不管此时所在类是不是泛型类。在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的类型。<strong>泛型方法可以是静态方法。</strong></li><li>泛型方法的格式：<blockquote><p>[访问权限] &lt;泛型&gt; 返回类型 方法名([泛型标识 参数名称]) 抛出的异常</p></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Creature</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Creature</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Creature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">fromArrayToCollection</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> o <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> co <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fromArrayToCollection</span><span class="token punctuation">(</span>ao<span class="token punctuation">,</span> co<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> as <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> cs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fromArrayToCollection</span><span class="token punctuation">(</span>as<span class="token punctuation">,</span> cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> cd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//fromArrayToCollection(as, cd);//中T是Double类，但sa是String类型，编译错误。</span>        <span class="token function">fromArrayToCollection</span><span class="token punctuation">(</span>as<span class="token punctuation">,</span> co<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//T是Object类型，sa是String类型，可以赋值成功。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="五、泛型类和泛型方法的使用情景"><a href="#五、泛型类和泛型方法的使用情景" class="headerlink" title="五、泛型类和泛型方法的使用情景"></a>五、泛型类和泛型方法的使用情景</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * DAO：database access object */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token comment">//表的共性操作的DAO</span>    <span class="token comment">/* 添加一条记录 */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 删除一条记录 */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 修改一条记录 */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 查询一条记录 */</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 查询多条记录 */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getForList</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//泛型方法</span>    <span class="token comment">/* 获取表中一共有多少条记录(int、long)? 获取最大的员工入职时间*/</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token class-name">E</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">CustomerDao</span> <span class="token keyword">extends</span> <span class="token class-name">DAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//只能操作一个表的DAO</span><span class="token keyword">class</span> <span class="token class-name">StudentDao</span> <span class="token keyword">extends</span> <span class="token class-name">DAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//只能操作一个表的DAO</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">DAOTest</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">CustomerDao</span> dao1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomerDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dao1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> dao1<span class="token punctuation">.</span><span class="token function">getForList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StudentDao</span> dao2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> dao2<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="五、泛型在继承上的体现"><a href="#五、泛型在继承上的体现" class="headerlink" title="五、泛型在继承上的体现"></a>五、泛型在继承上的体现</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 1. 虽然类A是类B的父类，但是 G&lt;A> 和 G&lt;B> 二者不具备子父类关系，二者是并列关系。但是二者共同的父类是 G&lt;?> * 2. 类A是类B的父类，A&lt;G> 是 B&lt;G> 的父类 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> str<span class="token punctuation">;</span><span class="token comment">//不会报错（多态的体现）</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        arr1 <span class="token operator">=</span> arr2<span class="token punctuation">;</span><span class="token comment">//不会报错（也是多态得体现）</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        list1 <span class="token operator">=</span> list2<span class="token punctuation">;</span><span class="token comment">//编译不过，会报错。此时的 list1 与 list2 不具有子父类关系</span>        <span class="token function">show</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不报错</span>        <span class="token function">show</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报错</span>        <span class="token function">show1</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不报错</span>        <span class="token function">show1</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不报错</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">show1</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1 <span class="token operator">=</span> list2<span class="token punctuation">;</span><span class="token comment">//不报错</span>        list2 <span class="token operator">=</span> list3<span class="token punctuation">;</span><span class="token comment">//不报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="六、通配符"><a href="#六、通配符" class="headerlink" title="六、通配符"></a>六、通配符</h3><ol><li><p>使用类型<strong>通配符：”？”</strong><br>比如：List&lt;?&gt; ，Map&lt;?,?&gt;<br>List&lt;?&gt; 是 List&lt;String&gt;、List&lt;Object&gt;等各种泛型List的父类。</p></li><li><p>读取List&lt;?&gt;的对象list中的元素时，永远是安全的，因为不管list的真实类型是什么，它包含的都是Object。</p></li><li><p>写入list&lt;?&gt;中的元素时，不行。因为我们不知道c的元素类型，我们不能向其中添加对象。但是，唯一的例外是null，它是所有类型的成员。</p><blockquote><p>Collection&lt;?&gt; c &#x3D; new ArrayList&lt;String&gt;();<br>c.add(new Object());&#x2F;&#x2F;编译时错误<br>  因为我们并不知道c的元素类型，我们不能向其中添加对象。add方法有类型参数E作为集合的元素类型。我们传给add的任何参数都必须是一个未知类型的子类。因为我们不知道那是什么类型，所以我们无法传任何东西进去。<br>  另一方面，我们可以调用get()方法并使用其返回值。返回值是一个未知的类型，但是我们知道，他总是一个Object</p></blockquote></li><li><p><strong>类A是类B的父类，G&lt;A&gt; 和 G&lt;B&gt;是没有子父类关系的，但二者共同父类是 G&lt;?&gt;</strong></p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//通配符的使用</span>        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//list.add(3);//编译不通过</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//通配符的使用</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="有限制条件的通配符"><a href="#有限制条件的通配符" class="headerlink" title="有限制条件的通配符"></a>有限制条件的通配符</h4><ol><li><p>通配符指定上限</p><blockquote><p>上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口，即 ≤</p></blockquote></li><li><p>通配符指定下限</p><blockquote><p>下限super：使用时指定的类型不能小于操作的类，即 ≥</p></blockquote></li><li><p>举例：</p><blockquote><ul><li>&lt;? extends Number&gt; 表示只允许泛型为Number及Number子类的引用调用</li><li>&lt;? super Number&gt; 表示只允许泛型为Number及Number父类的引用调用</li><li>&lt;? extends Comparable&gt; 表示只允许泛型为实现Comparable接口的实现类调用</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> list3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> list1<span class="token punctuation">;</span>        a <span class="token operator">=</span> list2<span class="token punctuation">;</span>        <span class="token comment">//a = list3;//报错</span>        <span class="token comment">//b = list1;//报错</span>        b <span class="token operator">=</span> list2<span class="token punctuation">;</span>        b <span class="token operator">=</span> list3<span class="token punctuation">;</span>        <span class="token comment">//读取数据</span>        a <span class="token operator">=</span> list1<span class="token punctuation">;</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> list2<span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写入数据</span>        <span class="token comment">//a.add(new Student());//报错。将?理解成未知类型，未知类型可能是Student的子类，所以会报错</span>        <span class="token comment">//a.add(new Person());//报错。未知类型可能是Student，所以会报错</span>        <span class="token comment">//a.add(new Object());//报错。未知类型可能的最大值为Person，所以会报错</span>        <span class="token comment">//b.add(new Object());//报错。未知类型可能为Person，所以会报错</span>        b<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的常用类常用方法</title>
      <link href="/posts/b78c789a.html"/>
      <url>/posts/b78c789a.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中常用类中的常用方法，如果能够记住些，对刷题还是有一定的帮助的。</p></blockquote><h3 id="一、Object类"><a href="#一、Object类" class="headerlink" title="一、Object类"></a>一、Object类</h3><blockquote><ul><li>public final native Class&lt;?&gt; <strong>getClass()</strong>;<blockquote><p>native方法，用于返回当前运行时对象的Class对象，使用了final关键字修饰，故不允许子类重写。</p></blockquote></li><li>public native int <strong>hashCode()</strong>;<blockquote><p>native方法，用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap。</p></blockquote></li><li>public boolean <strong>equals(Object obj)</strong><blockquote><p>用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等。</p></blockquote></li><li>protected native Object <strong>clone()</strong> throws CloneNotSupportedException;<blockquote><p>naitive方法，用于创建并返回当前对象的一份拷贝。一般情况下，对于任何对象 x，表达式 x.clone() !&#x3D; x 为true；x.clone().getClass() &#x3D;&#x3D; x.getClass() 为true。Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会发生CloneNotSupportedException异常。</p></blockquote></li><li>public String <strong>toString()</strong><blockquote><p>返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</p></blockquote></li><li>public final native void <strong>notify()</strong>;<blockquote><p>native方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</p></blockquote></li><li>public final native void <strong>notifyAll()</strong>;<blockquote><p>native方法，并且不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</p></blockquote></li><li>public final native void <strong>wait(long timeout)</strong> throws InterruptedException;<blockquote><p>native方法，并且不能重写。暂停线程的执行，使线程进入阻塞状态。注意：sleep方法没有释放锁，而wait方法释放了锁。timeout 是等待时间，以毫秒为单位。</p></blockquote></li><li>public final void <strong>wait(long timeout, int nanos)</strong> throws InterruptedException<blockquote><p>多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。所以超时的时间还需要加上nanos 毫秒。</p></blockquote></li><li>public final void <strong>wait()</strong> throws InterruptedException<blockquote><p>该方法一直等待，没有超时时间这个概念</p></blockquote></li><li>protected void <strong>finalize()</strong> throws Throwable<blockquote><p>实例被垃圾回收器回收的时候触发的操作@Deprecated(since &#x3D; “9”)</p></blockquote></li></ul></blockquote><h3 id="二、Objects工具类"><a href="#二、Objects工具类" class="headerlink" title="二、Objects工具类"></a>二、Objects工具类</h3><blockquote><ul><li>public static &lt;T&gt; int <strong>compare(T a, T b, Comparator&lt;? super T&gt; c)</strong></li><li>public static boolean <strong>deepEquals(Object a, Objetc b)：</strong>可以深度比较两个数组是否相等</li><li>public static boolean <strong>equals(Object a, Objetc b)</strong></li><li>public static int <strong>hash(Object… values)</strong></li><li>public static int <strong>hashCode(Object o)</strong></li><li>public static boolean <strong>isNull(Objetc obj)</strong></li><li>public static boolean <strong>nonNull(Object obj)</strong></li><li>public static &lt;T&gt; T <strong>requireNonNull(T obj)</strong></li><li>public static &lt;T&gt; T <strong>requireNonNull(T obj, String message)：</strong>抛出带指定消息异常</li><li>public static &lt;T&gt; T <strong>requireNonNull(T obj, Supplier&lt;String&gt; messageSupplier)：</strong>抛出带指定消息异常</li><li>public static &lt;T&gt; T <strong>requireNonNullElse(T obj, T defaultObj)</strong></li><li>public static &lt;T&gt; T <strong>requireNonNullElseGet(T obj, Supplier&lt;? extends T&gt; supplier)</strong></li><li>public static String <strong>toString(Object o)</strong></li><li>public static String <strong>toString(Object o, String nullDefault)</strong></li><li>public static int <strong>checkFromToIndex(int fromIndex, int toIndex, int length)：</strong>判断 [fromIndex, toIndex) 是否在 [0, length) 中</li><li>public static int <strong>checkFromIndexSize(int fromIndex, int size, int length)：</strong>判断 [fromIndex, fromIndex + size) 是否在 [0, length) 中</li></ul></blockquote><h3 id="三、String类"><a href="#三、String类" class="headerlink" title="三、String类"></a>三、String类</h3><ol><li>int length()：返回字符串的长度：return value.length</li></ol><hr><ol start="2"><li>char charAt(int index)： 返回某索引处的字符return value[index]</li></ol><hr><ol start="3"><li>boolean isEmpty()：判断是否是空字符串：return value.length &#x3D;&#x3D; 0</li></ol><hr><ol start="4"><li>String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写</li><li>String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写<blockquote><p>转换后的值用新变量接受，调用者本身的值不变。（不可变性）</p></blockquote></li></ol><hr><ol start="6"><li>String trim()：返回字符串的副本，忽略前导空白和尾部空白，中间的空格不会忽略。</li></ol><hr><ol start="7"><li>boolean equals(Object obj)：比较字符串的内容是否相同</li><li>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，但忽略大小写进行比较</li></ol><hr><ol start="9"><li>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</li></ol><hr><ol start="10"><li>int compareTo(String anotherString)：比较两个字符串的大小</li></ol><hr><ol start="11"><li>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</li><li>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</li></ol><hr><ol start="13"><li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</li><li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</li><li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li></ol><hr><ol start="16"><li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</li></ol><hr><ol start="17"><li>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</li><li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引处开始向后寻找。但返回值还是相对于首字母开始，并不是从指定索引处开始</li><li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</li><li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索<blockquote><p><strong>注：</strong>indexOf和lastIndexOf方法如果未找到都是返回-1<br>什么情况下，indexOf(str)和lastIndexOf(str)返回值相同？①：存在唯一的一个str。②：不存在str</p><blockquote><p>int indexOf(int ch)<br>int indexOf(int ch, int fromIndex)<br>int lastIndexOf(int ch)<br>int lastIndexOf(int ch, int fromIndex)</p></blockquote></blockquote></li></ol><hr><ol start="21"><li>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</li><li>String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</li><li>String replaceAll(String regex, String replacement)：使用给定replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</li><li>String replaceFirst(String regex, String replacement)：使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li></ol><hr><ol start="25"><li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</li></ol><hr><ol start="26"><li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</li><li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li></ol><hr><ul><li>字符串 &lt;–&gt; 包装类</li></ul><ol start="28"><li>包装类.parseXxx(String str)：包装类中的 public static xxx parseXxx(String s) 可以将由“数字”字符组成的字符串转换为基本数据类型。这类包装类包括Byte、Short、Integer、Long、Float、Double。</li><li>public static String valueOf(xxx x)：将相应的参数类型转换到字符串。valueOf(byte b)、valueOf(int i)、valueOf(long l)、valueOf(float f)、valueOf(double)、valueOf(boolean b)。</li></ol><hr><ul><li>字符串 –&gt; 字符数组</li></ul><ol start="30"><li>public char[] toCharArray()：将字符串中的全部字符存放在一个字符数组中。</li><li>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)：将指定索引范围内的字符串存放到指定数组中</li></ol><hr><ul><li>字符数组 –&gt; 字符串</li></ul><ol start="32"><li>public static String valueOf(char[] data)：将字符数组转换成字符串。</li><li>public static String valueOf(char[] data, int offset, int count)：用指定的字符数组的一部分，即从数组起始位置offset开始取count个字节构造一个字符串对象。</li><li>String(char[] value)：使用构造器</li><li>String(chat[] value, int offset, int count)：使用构造器，指定字符数组中的一部分来构造字符串。</li></ol><hr><ul><li>编码（String –&gt; byte[]）</li></ul><ol start="36"><li>public byte[] getBytes()：使用平台的默认字符集将此 String 编码为byte 序列，并将结果存储到一个新的 byte 数组中。</li><li>public byte[] getBytes(Charset charset)：使用指定的字符集将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</li><li>public byte[] getBytes(String charsetName)：使用指定的字符集将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</li></ol><hr><ul><li>解码（byte[] –&gt; String）</li></ul><ol start="39"><li>String(byte[] bytes)：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。</li><li>String(byte[] bytes, Charset charset)：指定字符集</li><li>String(byte[] bytes, String charsetName)：指定字符集</li><li>String(byte[] bytes, int offset, int count)：用指定的字节数组的一部分，即从数组起始位置offset开始取length个字节构造一个字符串对象。</li><li>String(byte[] bytes, int offset, int count, Charset charset)：指定字符集</li><li>String(byte[] bytes, int offset, int count, String charsetName)：指定字符集</li></ol><h3 id="四、StringBuffer-线程安全-、StringBuilder类"><a href="#四、StringBuffer-线程安全-、StringBuilder类" class="headerlink" title="四、StringBuffer(线程安全)、StringBuilder类"></a>四、StringBuffer(线程安全)、StringBuilder类</h3><ol><li><p>字符串拼接</p><blockquote><ul><li>StringBuffer append(boolean b)</li><li>StringBuffer append(char c)</li><li>StringBuffer append(charp[] str)</li><li>StringBuffer append(char[] str, int offset, int len)</li><li>StringBuffer append(double d)</li><li>StringBuffer append(float f)</li><li>StringBuffer append(int i)</li><li>StringBuffer append(long lng)</li><li>StringBuffer append(Object obj) &#x2F;&#x2F;实际上是obj.toString()</li><li>StringBuffer append(String str)</li><li>StringBuffer append(StringBuffer sb)</li></ul></blockquote></li><li><p>删除</p><blockquote><ul><li>StringBuffer delete(int start, int end)</li><li>StringBuffer deleteCharAt(int index)</li></ul></blockquote></li><li><p>替换</p><blockquote><ul><li>StringBuffer replace(int start, int end, String str)：把[start, end)位置替换为str</li><li>void setCharAt(int index, char ch)：替换指定位置的字符</li></ul></blockquote></li><li><p>指定位置插入</p><blockquote><ul><li>StringBuffer insert(int offset, boolean b)</li><li>StringBuffer insert(int offset, char c)</li><li>StringBuffer insert(int offset, char[] str)</li><li>StringBuffer insert(int idnex, char[] str, int offset, int len)</li><li>StringBuffer insert(int offset, double d)</li><li>StringBuffer insert(int offset, float f)</li><li>StringBuffer insert(int offset, int i)</li><li>StringBuffer insert(int offset, long l)</li><li>StringBuffer insert(int offset, Object obj)</li><li>StringBuffer insert(int offset, String str)</li></ul></blockquote></li><li><p>查找</p><blockquote><ul><li>int indexOf(String str)</li><li>int indexOf(String str, int fromIndex)</li><li>int lastIndexOf(String str)</li><li>int lastIndexOf(String str, int fromIndex)</li></ul></blockquote></li><li><p>子串</p><blockquote><ul><li>String substring(int start)</li><li>String substring(int start, int end)</li></ul></blockquote></li><li><p>获取字符 char charAt(int index)</p></li><li><p>反转字符串 StringBuffer reverse()</p></li><li><p>总结：</p><blockquote><ul><li><strong>增：</strong>append()</li><li><strong>删：</strong>delete(int start, int end) &#x2F; deleteCharAt(int index)</li><li><strong>改：</strong>setCharAt(int index, char ch) &#x2F; replace(int start, int end String str)</li><li><strong>查：</strong>charAt(int index) &#x2F; indexOf() &#x2F; lastIndexOf()</li><li><strong>插：</strong>insert()</li><li><strong>长度：</strong>length()</li><li><strong>遍历：</strong>for() + charAt() &#x2F; toString()</li></ul></blockquote></li></ol><h3 id="五、Collection-lt-E-gt-接口中的通用方法"><a href="#五、Collection-lt-E-gt-接口中的通用方法" class="headerlink" title="五、Collection&lt;E&gt;接口中的通用方法"></a>五、Collection&lt;E&gt;接口中的通用方法</h3><p>  注意，Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。集合Collection中存储的如果是自定义类的对象，需要自定义类重写equals()方法，因为在调用equals()和contains()等方法时会用到。JDK 5.0增加了泛型，若未指定泛型 E 的具体类型，则默认为Object类型。</p><ol><li>添加元素<blockquote><ul><li><strong>boolean add(E e)：</strong>添加单个元素</li><li><strong>boolean add(Collection&lt;? extends E&gt; c)：</strong>添加多个元素</li></ul></blockquote></li><li>获取有效元素个数：<strong>int size()</strong></li><li>清空当前集合：<strong>void clear()</strong></li><li>判断当前集合是否为空：<strong>boolean isEmpty()</strong></li><li>判断是否包含某元素<blockquote><ul><li><strong>boolean contains(Object obj)：</strong>判断当前集合中是否包含形参元素。通过元素的equals()方法来判断是否为同一个对象。将当前集合中的元素依次作为obj.equals()方法的形参。</li><li><strong>boolean containsAll(Collection&lt;?&gt; c)：</strong>判断当前集合中是否包含形参集合中的所有元素。依次遍历形参集合c中的元素obj，然后将调用者集合中的元素依次作为obj.equals()方法的形参来进行判断。相当于形参集合c中的每个元素都要挨个与调用者集合中的每个元素进行判断（最坏的情况下）。</li></ul></blockquote></li><li>判断两个集合是否相等<blockquote><ul><li><strong>boolean equals(Objext o)：</strong>当前集合和形参集合的元素都相同时返回true。针对具体的有序集合List和无序集合Set，稍有不同。</li></ul></blockquote></li><li>删除元素<blockquote><ul><li><strong>boolean remove(Object o)：</strong>通过元素的equals()方法判断是否为要删除的那个方法。<strong>只会删除找到的第一个元素</strong>。</li><li><strong>boolean removeAll(Collection&lt;?&gt; c)：相当于求差集</strong></li><li><strong>default boolean removeIf(Predicate&lt;? super E&gt; filter)：</strong>删除该集合中满足给定条件的所有元素。（这里的形参类型是函数式接口类型，可以使用Lambda表达式）</li></ul></blockquote></li><li>取两个集合的交集<blockquote><ul><li><strong>boolean remainAll(Collection&lt;?&gt; c)：把交集的结果存入当前集合中，不影响形参集合c</strong>。</li></ul></blockquote></li><li>转换成数组<blockquote><ul><li><strong>Object[] toArray()：</strong>转换成Object类型的数组</li><li><strong>&lt;T&gt; T[] toArray(T[] a)：</strong>转换成指定类型的数组</li></ul></blockquote></li><li>获取集合对象的哈希值：<strong>int hashCode()</strong></li><li>遍历<blockquote><ul><li><strong>Iterator&lt;E&gt; iterator()：</strong>返回迭代器对象，用于遍历集合元素。</li><li>增强For循环（底层采用Iterator来实现）</li><li><strong>void forEach(Consumer&lt;? super T&gt; action)：</strong>使用继承自Iterable接口的forEach方法。</li><li>使用Stream新特新。Collection对象.stream().forEach(Consumer action)</li></ul></blockquote></li><li>其他默认方法（JDK 8在接口中可以定义默认方法）<blockquote><ul><li><strong>default Stream&lt;E&gt; parallelStream()</strong></li><li><strong>default boolean removeIf(Predicate&lt;? super E&gt; filter)</strong></li><li><strong>default Spliterator&lt;E&gt; spliterator()</strong></li><li><strong>default Stream&lt;E&gt; stream()</strong></li></ul></blockquote></li></ol><h3 id="六、List-lt-E-gt-接口中的通用方法"><a href="#六、List-lt-E-gt-接口中的通用方法" class="headerlink" title="六、List&lt;E&gt;接口中的通用方法"></a>六、List&lt;E&gt;接口中的通用方法</h3><p><strong>List除了从Collection集合中继承的方法外，还多了一些根据索引来操作集合元素的方法。因为我们知道List中存放的数据是有序的。</strong></p><p><strong>在Collection接口中就具有的方法：</strong></p><blockquote><ul><li>boolean add(E e)</li><li>boolean addAll(Collection&lt;? extends E&gt; c)</li><li>int size()</li><li>int hashCode()</li><li>void clear()</li><li>boolean isEmpty()</li><li>boolean equals(Object o)</li><li>boolean contains(Object o)</li><li>boolean containsAll(Collection&lt;?&gt; c)</li><li>Iterator&lt;E&gt; iterator()</li><li>boolean remove(Object o)</li><li>boolean removeAll(Collection&lt;?&gt; c)</li><li>boolean retainAll(Collection&lt;?&gt; c)</li><li>Object[] toArray()</li><li>&lt;T&gt; T[] toArray(T[] a)</li><li>default boolean removeIf(Predicate&lt;? super E&gt; filter)</li><li>default Spliterator&lt;E&gt; spliterator()</li><li>default Stream&lt;E&gt; stream()</li><li>default Stream&lt;E&gt; parallelStream()</li></ul></blockquote><p><strong>特有的方法：</strong></p><ol><li>在给定索引位置处添加元素<blockquote><ul><li><strong>void add(int index, E element)</strong></li><li><strong>boolean addAll(int index, Collection&lt;? extends E&gt; c)</strong></li></ul></blockquote></li><li>获取指定位置的元素：<strong>E get(int index)</strong></li><li>查找元素<blockquote><ul><li><strong>int indexOf(Objext o)</strong></li><li><strong>int lastIndexOf(Object o)</strong></li></ul></blockquote></li><li>删除指定位置的元素并返回：<strong>E remove(int index)</strong></li><li>替换(改)元素<blockquote><ul><li><strong>E set(int index, E element)</strong></li><li><strong>default void replaceAll(UnaryOperator&lt;E&gt; operator)：</strong>可能会用到Lambda表达式，UnaryOperator是函数式接口，对类型为E的对象进行一元运算，并返回E类型的结果。</li></ul></blockquote></li><li>获取子集：<strong>List&lt;E&gt; subList(int fromIndex, int toIndex)</strong></li><li>定制排序：<strong>default void sort(Comparator&lt;? super E&gt; com)</strong></li><li>遍历：<blockquote><ul><li><strong>ListIterator&lt;E&gt; listIterator()</strong></li><li><strong>ListIterator&lt;E&gt; listIterator(int index)</strong></li></ul></blockquote></li></ol><p><strong>总结：</strong></p><blockquote><p>增：add(Object o) &#x2F; addAll(Collection c)<br>删：remove(Object o) &#x2F; remove(int index) &#x2F; removeAll(Collection c)<br>改：set(int index, Object obj) &#x2F; repalceAll(UnaryOperator&lt;E&gt; operator)<br>取：get(int index)<br>查：indexOf(Object o) &#x2F; lastIndexOf(Object o)<br>插：add(int index, Object o) &#x2F; addAll(int index, Collection c)<br>长度：size()<br>遍历：①Iterator迭代器；②增强For循环；③普通循环(因为其具有索引)；④forEach方法；⑤利用stream()方法转换成流后，再使用forEach()方法。</p></blockquote><h3 id="七、Set-lt-E-gt-接口中的通用方法"><a href="#七、Set-lt-E-gt-接口中的通用方法" class="headerlink" title="七、Set&lt;E&gt;接口中的通用方法"></a>七、Set&lt;E&gt;接口中的通用方法</h3><p>  Set 接口是Collection接口的另一个子接口，没有提供额外的方法，其使用的都是Collection中声明过的方法。</p><blockquote><ul><li>boolean add(E e)</li><li>boolean addAll(Collection&lt;? extends E&gt; c)</li><li>int size()</li><li>int hashCode()</li><li>void clear()</li><li>boolean isEmpty()</li><li>boolean equals(Object o)</li><li>boolean contains(Object o)</li><li>boolean containsAll(Collection&lt;?&gt; c)</li><li>Iterator&lt;E&gt; iterator()</li><li>boolean remove(Object o)</li><li>boolean removeAll(Collection&lt;?&gt; c)</li><li>boolean retainAll(Collection&lt;?&gt; c)</li><li>Object[] toArray()</li><li>&lt;T&gt; T[] toArray(T[] a)</li><li>default boolean removeIf(Predicate&lt;? super E&gt; filter)</li><li>default Spliterator&lt;E&gt; spliterator()</li><li>default Stream&lt;E&gt; stream()</li><li>default Stream&lt;E&gt; parallelStream()</li></ul></blockquote><h3 id="八、Map-lt-K-V-gt-接口中的常用方法"><a href="#八、Map-lt-K-V-gt-接口中的常用方法" class="headerlink" title="八、Map&lt;K,V&gt;接口中的常用方法"></a>八、Map&lt;K,V&gt;接口中的常用方法</h3><h3 id="九、Collections工具类"><a href="#九、Collections工具类" class="headerlink" title="九、Collections工具类"></a>九、Collections工具类</h3><p>Collections工具类提供了很多静态方法。不仅可以用来操作Collection，还能用来操作Map。<br>1.添加元素</p><blockquote><ul><li>public static &lt;T&gt; boolean <strong>addAll</strong>(Collection&lt;? super T&gt; c, T… elements)</li></ul></blockquote><p>2.排序</p><blockquote><ul><li>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void <strong>sort</strong>(List&lt;T&gt; list)：自然排序</li><li>public static &lt;T&gt; void <strong>sort</strong>(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)：定制排序</li><li>public static void <strong>reverse</strong>(List&lt;?&gt; list)：逆序</li><li>public static &lt;T&gt; Comparator&lt;T&gt; <strong>reverseOrder</strong>()：返回一个与自然排序逆序的比较器，要求泛型T需实现Comparabale接口。</li><li>public static &lt;T&gt; Comparator&lt;T&gt; <strong>reverseOrder</strong>(Comparator&lt;T&gt; cmp)：返回一个与指定比较器逆序的比较器。</li><li>public static void <strong>shuffle</strong>(List&lt;?&gt; list)：每次打乱的顺序都不一样</li><li>public static void <strong>shuffle</strong>(List&lt;?&gt; list, Random rnd)：每次打乱的顺序一样</li><li>public static void <strong>swap</strong>(List&lt;?&gt; int i, int j)：交换对应位置的元素</li></ul></blockquote><p>3.查找，统计</p><blockquote><ul><li>public static &lt;T&gt; int <strong>binarySearch</strong>(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key)</li><li>public static &lt;T&gt; int <strong>binarySearch</strong>(List&lt;? extends T&gt; list, T key, Comparator&lt;? super T&gt; c)</li><li>public static int <strong>indexOfSubList</strong>(List<?> source, List<?> target)</li><li>public static int <strong>lastIndexOfSubList</strong>(List<?> source, List<?> target)</li><li>public static int <strong>frequency</strong>(Collection&lt;?&gt; c, Object o)</li><li>public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T <strong>max</strong>(Collection&lt;? extends T&gt; coll)</li><li>public static &lt;T&gt; T <strong>max</strong>(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</li><li>public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T <strong>min</strong>(Collection&lt;? extends T&gt; coll)</li><li>public static &lt;T&gt; T <strong>min</strong>(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</li><li>public static <strong>disjoint</strong>(Collection<?> c1, Collection<?> c2)：如果两个集合没有相同的集合，则返回 true</li></ul></blockquote><p>4.替换</p><blockquote><ul><li>public static &lt;T&gt; void <strong>fill</strong>(List&lt;? super T&gt; list, T obj)</li><li>public static &lt;T&gt; boolean <strong>replaceAll</strong>(List&lt;T&gt; list, T oldVal, T newVal)</li></ul></blockquote><p>5.复制</p><blockquote><ul><li>public static &lt;T&gt; void <strong>copy</strong>(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</li><li>public static &lt;T&gt; List&lt;T&gt; <strong>nCopies</strong>(int n, T o)：将 o 复制 n 份，形成不可变 list 并返回</li></ul></blockquote><p>6.同步控制(返回线程安全的集合)</p><blockquote><ul><li>public static &lt;T&gt; Collection&lt;T&gt; <strong>synchronizedCollection</strong>(Collection&lt;T&gt; c)</li><li>public static &lt;T&gt; List&lt;T&gt; <strong>synchronizedList</strong>(List&lt;T&gt; list)</li><li>public static &lt;T&gt; Set&lt;T&gt; <strong>synchronizedSet</strong>(Set&lt;T&gt; s)</li><li>public static &lt;K,V&gt; Map&lt;K,V&gt; <strong>synchronizedMap</strong>(Map&lt;K,V&gt; m)</li><li>public static &lt;T&gt; SortedSet&lt;T&gt; <strong>synchronizedSortedSet</strong>(SortedSet&lt;T&gt; s)</li><li>public static &lt;K,V&gt; SortedMap&lt;K,V&gt; <strong>synchronizedSortedMap</strong>(SortedMap&lt;K,V&gt; m)</li><li>public static &lt;T&gt; NavigableSet&lt;T&gt; <strong>synchronizedNavigableSet</strong>(NavigableSet&lt;T&gt; s)</li><li>public static &lt;K,V&gt; NavigableMap&lt;K,V&gt; <strong>synchronizedNavigableMap</strong>(NavigableMap&lt;K,V&gt; m)</li></ul></blockquote><p>7.返回一个空集合</p><blockquote><ul><li>public static &lt;T&gt; List&lt;T&gt; <strong>emptyList</strong>()</li><li>public static &lt;T&gt; Set&lt;T&gt; <strong>emptySet</strong>()</li><li>public static &lt;K,V&gt; Map&lt;K,V&gt; <strong>emptyMap</strong>()</li><li>public static &lt;E&gt; SortedSet&lt;E&gt; <strong>emptySortedSet</strong>()</li><li>public static &lt;K,V&gt; SortedMap&lt;K,V&gt; <strong>emptySortedMap</strong>()</li><li>public static &lt;T&gt; Enumeration&lt;T&gt; <strong>emptyEnumeration</strong>()</li><li>public static &lt;T&gt; Iterator&lt;T&gt; <strong>emptyIterator</strong>()</li><li>public static &lt;T&gt; ListIterator&lt;T&gt; <strong>emptyListIterator</strong>()</li><li>public static &lt;E&gt; NavigableSet&lt;E&gt; <strong>emptyNavigableSet</strong>()</li><li>public static &lt;K,V&gt; NavigableMap&lt;K,V&gt; <strong>emptyNavigableMap</strong>()</li></ul></blockquote><p>8.返回一个可进行元素类型检查(添加元素时)的集合，相当于将现有的集合封装成在添加元素时可以进行元素类型检查的集合。</p><blockquote><ul><li>public static &lt;E&gt; Collection&lt;E&gt; <strong>checkedCollection</strong>(Collection&lt;E&gt; c, Class&lt;E&gt; type)</li><li>public static &lt;E&gt; List&lt;E&gt; <strong>checkedList</strong>(List&lt;E&gt; list, Class&lt;E&gt; type)</li><li>public static &lt;E&gt; Set&lt;E&gt; <strong>checkedSet</strong>(Set&lt;E&gt; s, Class&lt;E&gt; type)</li><li>public static &lt;K,V&gt; Map&lt;K,V&gt; <strong>checkedMap</strong>(Map&lt;K,V&gt; m, Class&lt;K&gt; keyType, Class&lt;V&gt; valueType)</li><li>public static &lt;E&gt; SortedSet&lt;E&gt; <strong>checkedSortedSet</strong>(SortedSet&lt;E&gt; s, Class&lt;E&gt; type)</li><li>public static &lt;K,V&gt; SortedMap&lt;K,V&gt; <strong>checkedSortedMap</strong>(SortedMap&lt;K,V&gt; m, Class&lt;K&gt; keyType, Class&lt;V&gt; valueType)</li><li>public static &lt;E&gt; Queue&lt;E&gt; <strong>checkedQueue</strong>(Queue&lt;E&gt; queue, Class&lt;E&gt; type)</li><li>public static &lt;E&gt; NavigableSet&lt;E&gt; <strong>checkedNavigableSet</strong>(NavigableSet&lt;E&gt; s, Class&lt;E&gt; type)</li><li>public static &lt;K,V&gt; NavigableMap&lt;K,V&gt; <strong>checkedNavigableMap</strong>(NavigableMap&lt;K,V&gt; m, Class&lt;K&gt; keyType, Class&lt;V&gt; valueType)</li></ul></blockquote><p>9.创建只读，不可改变的集合</p><blockquote><ul><li>public static &lt;T&gt; Collection&lt;T&gt; <strong>unmodifiableCollection</strong>(Collection&lt;? extends T&gt; c)</li><li>public static &lt;T&gt; List&lt;T&gt; <strong>unmodifiableList</strong>(List&lt;? extends T&gt; list)</li><li>public static &lt;T&gt; Set&lt;T&gt; <strong>unmodifiableSet</strong>(Set&lt;? extends T&gt; s)</li><li>public static &lt;K, V&gt; Map&lt;K, V&gt; <strong>unmodifiableMap</strong>(Map&lt;? extends K, ? extends V&gt; m)</li><li>public static &lt;T&gt; SortedSet&lt;T&gt; <strong>unmodifiableSortedSet</strong>(SortedSet&lt;T&gt; s)</li><li>public static &lt;K, V&gt; SortedMap&lt;K, V&gt; <strong>unmodifiableSortedMap</strong>(SortedMap&lt;K, ? extends V&gt; m)</li><li>public static &lt;T&gt; NavigableSet&lt;T&gt; <strong>unmodifiableNavigableSet</strong>(NavigableSet&lt;T&gt; s)</li><li>public static &lt;K, V&gt; NavigableMap&lt;K, V&gt; <strong>unmodifiableNavigableMap</strong>(NavigableMap&lt;K, ? extends V&gt; m)</li></ul></blockquote><p>10.其他</p><blockquote><ul><li>public static &lt;T&gt; Enumeration&lt;T&gt; <strong>enumeration</strong>(Collection&lt;T&gt; c)</li><li>public static &lt;E&gt; Set&lt;E&gt; <strong>newSetFromMap</strong>(Map&lt;E,Boolean&gt; map)：提供一个和 Map 实现相对应的Set实现</li></ul></blockquote><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的集合工具类Collections</title>
      <link href="/posts/566c9780.html"/>
      <url>/posts/566c9780.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Collections工具类可以用来操作Collection，还能用来操作Map。</p></blockquote><p>  Collections 中提供了一系列<strong>静态的方法</strong>对集合元素进行<strong>排序、查询、修改、复制等操作</strong>，还提供了对集合对象设置不可变、对集合对象实现同步控制、返回空集合、检测集合元素类型等方法。功能还是比较强大。</p><p><strong>1. 添加元素</strong></p><blockquote><ul><li>public static &lt;T&gt; boolean <strong>addAll</strong>(Collection&lt;? super T&gt; c, T… elements)</li></ul></blockquote><p><strong>2. 排序</strong></p><blockquote><ul><li>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void <strong>sort</strong>(List&lt;T&gt; list)：自然排序</li><li>public static &lt;T&gt; void <strong>sort</strong>(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)：定制排序</li><li>public static void <strong>reverse</strong>(List&lt;?&gt; list)：逆序</li><li>public static &lt;T&gt; Comparator&lt;T&gt; <strong>reverseOrder</strong>()：返回一个与自然排序逆序的比较器，要求泛型T需实现Comparabale接口。</li><li>public static &lt;T&gt; Comparator&lt;T&gt; <strong>reverseOrder</strong>(Comparator&lt;T&gt; cmp)：返回一个与指定比较器逆序的比较器。</li><li>public static void <strong>shuffle</strong>(List&lt;?&gt; list)：每次打乱的顺序都不一样</li><li>public static void <strong>shuffle</strong>(List&lt;?&gt; list, Random rnd)：每次打乱的顺序一样</li><li>public static void <strong>swap</strong>(List&lt;?&gt; int i, int j)：交换对应位置的元素</li><li>public static void <strong>rotate</strong>(List&lt;?&gt; list, int distance)：旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面</li></ul></blockquote><p><strong>3. 查找，统计</strong></p><blockquote><ul><li>public static &lt;T&gt; int <strong>binarySearch</strong>(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key)</li><li>public static &lt;T&gt; int <strong>binarySearch</strong>(List&lt;? extends T&gt; list, T key, Comparator&lt;? super T&gt; c)</li><li>public static int <strong>indexOfSubList</strong>(List<?> source, List<?> target)</li><li>public static int <strong>lastIndexOfSubList</strong>(List<?> source, List<?> target)</li><li>public static int <strong>frequency</strong>(Collection&lt;?&gt; c, Object o)</li><li>public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T <strong>max</strong>(Collection&lt;? extends T&gt; coll)</li><li>public static &lt;T&gt; T <strong>max</strong>(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</li><li>public static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T <strong>min</strong>(Collection&lt;? extends T&gt; coll)</li><li>public static &lt;T&gt; T <strong>min</strong>(Collection&lt;? extends T&gt; coll, Comparator&lt;? super T&gt; comp)</li><li>public static <strong>disjoint</strong>(Collection<?> c1, Collection<?> c2)：如果两个集合没有相同的集合，则返回 true</li></ul></blockquote><p><strong>4. 替换</strong></p><blockquote><ul><li>public static &lt;T&gt; void <strong>fill</strong>(List&lt;? super T&gt; list, T obj)</li><li>public static &lt;T&gt; boolean <strong>replaceAll</strong>(List&lt;T&gt; list, T oldVal, T newVal)</li></ul></blockquote><p><strong>5. 复制</strong></p><blockquote><ul><li>public static &lt;T&gt; void <strong>copy</strong>(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)</li><li>public static &lt;T&gt; List&lt;T&gt; <strong>nCopies</strong>(int n, T o)：将 o 复制 n 份，形成不可变 list 并返回</li></ul></blockquote><p><strong>6. 同步控制(返回线程安全的集合)。Collections工具类提供了多个 synchronizedXxx() 方法，这些方法可以将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题。我们知道Vector是线程安全的，ArrayList是线程不安全的，但是往往ArrayList的执行效率比Vector高，所以可以使用以下方法将ArrayList包装成线程安全的List。</strong></p><blockquote><ul><li>public static &lt;T&gt; Collection&lt;T&gt; <strong>synchronizedCollection</strong>(Collection&lt;T&gt; c)</li><li>public static &lt;T&gt; List&lt;T&gt; <strong>synchronizedList</strong>(List&lt;T&gt; list)</li><li>public static &lt;T&gt; Set&lt;T&gt; <strong>synchronizedSet</strong>(Set&lt;T&gt; s)</li><li>public static &lt;K,V&gt; Map&lt;K,V&gt; <strong>synchronizedMap</strong>(Map&lt;K,V&gt; m)</li><li>public static &lt;T&gt; SortedSet&lt;T&gt; <strong>synchronizedSortedSet</strong>(SortedSet&lt;T&gt; s)</li><li>public static &lt;K,V&gt; SortedMap&lt;K,V&gt; <strong>synchronizedSortedMap</strong>(SortedMap&lt;K,V&gt; m)</li><li>public static &lt;T&gt; NavigableSet&lt;T&gt; <strong>synchronizedNavigableSet</strong>(NavigableSet&lt;T&gt; s)</li><li>public static &lt;K,V&gt; NavigableMap&lt;K,V&gt; <strong>synchronizedNavigableMap</strong>(NavigableMap&lt;K,V&gt; m)</li></ul></blockquote><p><strong>7. 返回一个空集合</strong></p><blockquote><ul><li>public static &lt;T&gt; List&lt;T&gt; <strong>emptyList</strong>()</li><li>public static &lt;T&gt; Set&lt;T&gt; <strong>emptySet</strong>()</li><li>public static &lt;K,V&gt; Map&lt;K,V&gt; <strong>emptyMap</strong>()</li><li>public static &lt;E&gt; SortedSet&lt;E&gt; <strong>emptySortedSet</strong>()</li><li>public static &lt;K,V&gt; SortedMap&lt;K,V&gt; <strong>emptySortedMap</strong>()</li><li>public static &lt;T&gt; Enumeration&lt;T&gt; <strong>emptyEnumeration</strong>()</li><li>public static &lt;T&gt; Iterator&lt;T&gt; <strong>emptyIterator</strong>()</li><li>public static &lt;T&gt; ListIterator&lt;T&gt; <strong>emptyListIterator</strong>()</li><li>public static &lt;E&gt; NavigableSet&lt;E&gt; <strong>emptyNavigableSet</strong>()</li><li>public static &lt;K,V&gt; NavigableMap&lt;K,V&gt; <strong>emptyNavigableMap</strong>()</li></ul></blockquote><p><strong>8. 返回一个可进行元素类型检查(添加元素时)的集合，相当于将现有的集合封装成在添加元素时可以进行元素类型检查的集合。</strong></p><blockquote><ul><li>public static &lt;E&gt; Collection&lt;E&gt; <strong>checkedCollection</strong>(Collection&lt;E&gt; c, Class&lt;E&gt; type)</li><li>public static &lt;E&gt; List&lt;E&gt; <strong>checkedList</strong>(List&lt;E&gt; list, Class&lt;E&gt; type)</li><li>public static &lt;E&gt; Set&lt;E&gt; <strong>checkedSet</strong>(Set&lt;E&gt; s, Class&lt;E&gt; type)</li><li>public static &lt;K,V&gt; Map&lt;K,V&gt; <strong>checkedMap</strong>(Map&lt;K,V&gt; m, Class&lt;K&gt; keyType, Class&lt;V&gt; valueType)</li><li>public static &lt;E&gt; SortedSet&lt;E&gt; <strong>checkedSortedSet</strong>(SortedSet&lt;E&gt; s, Class&lt;E&gt; type)</li><li>public static &lt;K,V&gt; SortedMap&lt;K,V&gt; <strong>checkedSortedMap</strong>(SortedMap&lt;K,V&gt; m, Class&lt;K&gt; keyType, Class&lt;V&gt; valueType)</li><li>public static &lt;E&gt; Queue&lt;E&gt; <strong>checkedQueue</strong>(Queue&lt;E&gt; queue, Class&lt;E&gt; type)</li><li>public static &lt;E&gt; NavigableSet&lt;E&gt; <strong>checkedNavigableSet</strong>(NavigableSet&lt;E&gt; s, Class&lt;E&gt; type)</li><li>public static &lt;K,V&gt; NavigableMap&lt;K,V&gt; <strong>checkedNavigableMap</strong>(NavigableMap&lt;K,V&gt; m, Class&lt;K&gt; keyType, Class&lt;V&gt; valueType)</li></ul></blockquote><p><strong>9. 创建只读，不可改变的集合</strong></p><blockquote><ul><li>public static &lt;T&gt; Collection&lt;T&gt; <strong>unmodifiableCollection</strong>(Collection&lt;? extends T&gt; c)</li><li>public static &lt;T&gt; List&lt;T&gt; <strong>unmodifiableList</strong>(List&lt;? extends T&gt; list)</li><li>public static &lt;T&gt; Set&lt;T&gt; <strong>unmodifiableSet</strong>(Set&lt;? extends T&gt; s)</li><li>public static &lt;K, V&gt; Map&lt;K, V&gt; <strong>unmodifiableMap</strong>(Map&lt;? extends K, ? extends V&gt; m)</li><li>public static &lt;T&gt; SortedSet&lt;T&gt; <strong>unmodifiableSortedSet</strong>(SortedSet&lt;T&gt; s)</li><li>public static &lt;K, V&gt; SortedMap&lt;K, V&gt; <strong>unmodifiableSortedMap</strong>(SortedMap&lt;K, ? extends V&gt; m)</li><li>public static &lt;T&gt; NavigableSet&lt;T&gt; <strong>unmodifiableNavigableSet</strong>(NavigableSet&lt;T&gt; s)</li><li>public static &lt;K, V&gt; NavigableMap&lt;K, V&gt; <strong>unmodifiableNavigableMap</strong>(NavigableMap&lt;K, ? extends V&gt; m)</li></ul></blockquote><p><strong>10. 其他</strong></p><blockquote><ul><li>public static &lt;T&gt; Enumeration&lt;T&gt; <strong>enumeration</strong>(Collection&lt;T&gt; c)</li><li>public static &lt;E&gt; Set&lt;E&gt; <strong>newSetFromMap</strong>(Map&lt;E,Boolean&gt; map)：提供一个和 Map 实现相对应的Set实现</li></ul></blockquote><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionsTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">765</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        报异常：IndexOutOfBoundsException("Source does not fit in dest")        List dest = new ArrayList();        Collections.copy(dest, list);        */</span>        <span class="token comment">//正确的：</span>        <span class="token class-name">List</span> dest <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//list.size();</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        Collections 类中提供了多个 synchronizedXxx() 方法，        该方法可使将指定集合包装成线程同步的集合，从而可以解决        多线程并发访问集合时的线程安全问题        */</span>        <span class="token comment">//返回的list1即为线程安全的List</span>        <span class="token class-name">List</span> list1 <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">765</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">765</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">765</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> frequency <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">frequency</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的集合Collection和Map</title>
      <link href="/posts/b593f441.html"/>
      <url>/posts/b593f441.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中的集合可分为 <strong>Collection</strong> 和 <strong>Map</strong> 两种体系。Collection接口：单列数据，定义了存取一组对象的方法的集合。Map接口：双列数据，保存具有映射关系“key-value对”的集合。Java 集合类可以用于<strong>存储数量不等的多个对象</strong>，还可用于<strong>保存具有映射关系的关联数组</strong>。Java 集合就像一种<strong>容器</strong>，可以动态地把多个对象的引用放入容器中。</p></blockquote><h3 id="一、数组的特点和弊端"><a href="#一、数组的特点和弊端" class="headerlink" title="一、数组的特点和弊端"></a>一、数组的特点和弊端</h3><ol><li><p>数组在内存存储方面的特点：</p><blockquote><ul><li>数组初始化以后，长度就确定了。</li><li>数组声明的类型，就决定了进行元素初始化时的类型。数组一旦定义好，其元素的类型也就确定了。我们也就只能操作指定类型的数据了。</li></ul></blockquote></li><li><p>数组在存储数据方面的弊端：</p><blockquote><ul><li>数组初始化以后，长度就不可变了，不便于扩展</li><li>数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高。</li><li>获取数组中实际元素的个数的需求，数组没有现成的属性或方法可用</li><li>数组存储数据的特点：有序、可重复。对于无序、不可重复的需求，不能满足。（存储数据的特点单一）</li></ul></blockquote></li></ol><h3 id="二、java中的集合框架（API）"><a href="#二、java中的集合框架（API）" class="headerlink" title="二、java中的集合框架（API）"></a>二、java中的集合框架（API）</h3><p><strong>1. Collection接口：单列集合，用来存储一个一个的对象</strong></p><blockquote><ul><li><p><strong>List接口：存储有序的、可重复的数据。（更像是动态的数组）</strong></p><blockquote><p><strong>ArrayList、LinkedList、Vector</strong></p></blockquote></li><li><p><strong>Set接口：存储无序的、不可重复的数据。（更像是数学中的集合）</strong></p><blockquote><p><strong>HashSet、LinkedHashSet、TreeSet</strong></p></blockquote></li></ul><p><img src="/posts/b593f441/1.png" alt="Collection接口继承树"></p></blockquote><p><strong>2. Map接口：双列集合，用来存储一对一对（key-value）的数据</strong></p><blockquote><ul><li><strong>HashMap、LinkedHashMap、TreeMap、Hashtable、Properties</strong><br><img src="/posts/b593f441/2.png" alt="Map接口继承树"></li></ul></blockquote><h3 id="三、Cellection接口"><a href="#三、Cellection接口" class="headerlink" title="三、Cellection接口"></a>三、Cellection接口</h3><p>  Collection 接口是 List、Set 和 Queue 接口的<strong>父接口</strong>，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。<strong>JDK不提供此接口的任何直接实现</strong>，而是提供更具体的子接口(如：Set和List)实现。在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成 Object 类型处理；从 JDK 5.0 增加了<strong>泛型</strong>以后，Java 集合可以记住容器中对象的数据类型。集合Collection中存储的如果是自定义类的对象，需要自定义类重写equals()方法。</p><h4 id="1、Collection接口中的常用方法"><a href="#1、Collection接口中的常用方法" class="headerlink" title="1、Collection接口中的常用方法"></a>1、Collection接口中的常用方法</h4><blockquote><ul><li>1.添加<blockquote><p><strong>add(Object obj)</strong><br><strong>addAll(Collection coll)</strong></p></blockquote></li><li>2.获取有效元素个数：<strong>int size()</strong></li><li>3.清空集合：<strong>void clear()</strong></li><li>4.判断是否是空集合：<strong>boolean isEmpty()</strong></li><li>5.判断是否包含某个元素<blockquote><ul><li><strong>boolean contains(Object obj)：</strong>是通过元素的equals()方法来判断是否是同一个对象。<strong>将集合中的元素依次作为obj.equals()方法的形参</strong>。</li><li><strong>boolean containsAll(Collection c)：</strong>判断形参集合c中的所有元素是否都存在于当前集合中。<strong>依次遍历形参集合c中的元素obj，然后将调用者集合中的元素依次作为obj.equals()方法的形参来进行判断。</strong>相当于形参集合c中的每个元素都要挨个与调用者集合中的每个元素进行判断（最坏的情况下）。</li></ul></blockquote></li><li>6.删除<blockquote><ul><li><strong>boolean remove(Object obj)：</strong>通过元素的equals()方法判断是否是要删除的那个元素。<strong>只会删除找到的第一个元素</strong>。</li><li><strong>boolean removeAll(Collection coll)：</strong> <strong>取当前集合的差集</strong></li></ul></blockquote></li><li>7.取两个集合的交集：<strong>boolean retainAll(Collection c)：</strong>把交集的结果存在当前集合中，不影响c</li><li>8.集合是否相等：<strong>boolean equals(Object obj)</strong> 当前集合和形参集合的元素都相同时，返回true。</li><li>9.转换成对象数组：<strong>Object[] toArray()</strong></li><li>10.获取集合对象的哈希值：<strong>hashCode()</strong></li><li>11.遍历：<strong>iterator()：</strong>返回迭代器对象，用于遍历集合元素</li></ul></blockquote><h4 id="2、使用-Iterator-接口遍历Collection集合元素"><a href="#2、使用-Iterator-接口遍历Collection集合元素" class="headerlink" title="2、使用 Iterator 接口遍历Collection集合元素"></a>2、使用 Iterator 接口遍历Collection集合元素</h4><ol><li>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素<strong>。注：不适用遍历Map集合</strong>。</li><li>提供一种方法访问一个容器(container)对象中各个元素，而又<strong>不需暴露该对象的内部细节</strong>。迭代器模式，就是为容器而生。</li><li>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以<strong>返回一个实现了Iterator接口的对象</strong>。</li><li>Iterator 仅用于遍历集合，Iterator <strong>本身并不提供承装对象的能力</strong>。如果需要创建Iterator 对象，则必须有一个被迭代的集合。</li><li>集合对象每次调用iterator()方法都得到一个<strong>全新的迭代器对象</strong>，默认游标都在集合的第一个元素之前。</li><li>内部定义了remove(),可以在遍历的时候，删除集合中的元素。此方法不同于集合直接调用remove()。如果<strong>还未调用过next()<strong>或在上一次调用 next 方法之后已经调用了remove 方法，再调用remove都会报</strong>IllegalStateException</strong>异常。</li><li>在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出<strong>NoSuchElementException</strong>异常。<br><img src="/posts/b593f441/3.png"><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*Iterator遍历集合的正确使用*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*方式一：*/</span>        <span class="token comment">/*        System.out.println(iterator.next());        System.out.println(iterator.next());        System.out.println(iterator.next());        System.out.println(iterator.next());        System.out.println(iterator.next());        System.out.println(iterator.next());//报异常：NoSuchElementException        */</span>        <span class="token comment">/*方式二：不推荐这样使用*/</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coll<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重新赋值</span>        <span class="token comment">/*方式三：推荐使用*/</span>        <span class="token comment">//hasNext()：判断是否还有下一个元素</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//next()：①指针下移 ②将下移以后集合位置上的元素返回</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h4 id="3、使用foreach循环（增强for循环）遍历集合元素"><a href="#3、使用foreach循环（增强for循环）遍历集合元素" class="headerlink" title="3、使用foreach循环（增强for循环）遍历集合元素"></a>3、使用foreach循环（增强for循环）遍历集合元素</h4><ol><li>Java 5.0 提供了 foreach 循环迭代访问 Collection和数组。</li><li>遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。</li><li><strong>遍历集合的底层调用Iterator完成操作</strong>。</li><li>foreach还可以用来遍历数组。<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//for(集合元素的类型 局部变量 : 集合对象)</span>        <span class="token comment">//内部仍然调用了迭代器</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> coll<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//for(数组元素的类型 局部变量 : 数组对象)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"AA"</span><span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">,</span> <span class="token string">"CC"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s <span class="token operator">=</span> <span class="token string">"DD"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[AA, BB, CC]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="四、Collection的子接口-之-List-接口"><a href="#四、Collection的子接口-之-List-接口" class="headerlink" title="四、Collection的子接口 之 List 接口"></a>四、Collection的子接口 之 List 接口</h3><p>  鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组。List集合类中<strong>元素有序、且可重复</strong>，集合中的每个元素都有其对应的顺序索引。List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。JDK API中List接口的实现类常用的有：<strong>ArrayList</strong>、<strong>LinkedList</strong>和<strong>Vector</strong>。</p><blockquote><ul><li><strong>ArrayList：</strong>作为List接口的<strong>主要实现类</strong>（JDK1.2）；<strong>线程不安全的，效率高</strong>；底层使用Object[] elementData存储</li><li><strong>LinkedList：</strong>（JDK1.2）对于<strong>频繁的插入、删除</strong>操作，使用此类<strong>效率比ArrayList高</strong>；底层使用<strong>双向链表</strong>存储</li><li><strong>Vector：</strong>作为List接口的<strong>古老实现类</strong>（JDK1.0）；<strong>线程安全的，效率低</strong>；底层使用Object[] elementData存储</li></ul></blockquote><p>  <strong>注意：</strong>Arrays.asList(T… a) 方法返回的 List 集合，既不是 ArrayList 实例，也不是Vector 实例。 Arrays.asList(T… a) 返回值是一个固定长度的 List 集合，Arrays类中有一个内部类private static class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements RandomAccess, java.io.Serializable。</p><h4 id="1、List接口中的常用方法"><a href="#1、List接口中的常用方法" class="headerlink" title="1、List接口中的常用方法"></a>1、List接口中的常用方法</h4><p>  List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。</p><blockquote><ul><li><strong>void add(int index, Object ele)：</strong>在index位置插入ele元素</li><li><strong>boolean addAll(int index, Collection eles)：</strong>从index位置开始将eles中的所有元素添加进来</li><li><strong>Object get(int index)：</strong>获取指定index位置的元素</li><li><strong>int indexOf(Object obj)：</strong>返回obj在集合中首次出现的位置。不存在时，返回-1</li><li><strong>int lastIndexOf(Object obj)：</strong>返回obj在当前集合中末次出现的位置。不存在时，返回-1</li><li><strong>Object remove(int index)：</strong>移除指定index位置的元素，并返回此元素</li><li><strong>Object set(int index, Object ele)：</strong>设置指定index位置的元素为ele</li><li><strong>List subList(int fromIndex, int toIndex)：</strong>返回从fromIndex到toIndex 位置的子集合</li><li><strong>总结：</strong><blockquote><ul><li>增：add(Object obj)</li><li>删：remove(int index) &#x2F; remove(Object obj)</li><li>改：set(int index, Object ele)</li><li>查：get(int index)</li><li>插：add(int index, Object ele)</li><li>长度：size()</li><li>遍历：① Iterator迭代器方式; ② 增强for循环; ③ 普通的循环（因为其具有索引）</li></ul></blockquote></li></ul></blockquote><h4 id="2、ArrayList-类"><a href="#2、ArrayList-类" class="headerlink" title="2、ArrayList 类"></a>2、ArrayList 类</h4><p>  ArrayList 是 List 接口的典型实现类、主要实现类。本质上，<strong>ArrayList是对象引用的一个”变长”数组</strong>。</p><h5 id="jdk-7-的情况"><a href="#jdk-7-的情况" class="headerlink" title="jdk 7 的情况"></a>jdk 7 的情况</h5><p>  ArrayList像饿汉式，直接创建一个<strong>初始容量为10</strong>的数组。</p><ul><li>ArrayList list &#x3D; new ArrayList();&#x2F;&#x2F;底层创建了<strong>长度是10</strong>的Object[]数组elementData</li><li>list.add(123);&#x2F;&#x2F;elementData[0] &#x3D; new Integer(123);</li><li>…</li><li>list.add(11);&#x2F;&#x2F;如果此次的添加导致底层elementData数组容量不够，则扩容。</li><li>默认情况下，<strong>扩容为原来的容量的1.5倍</strong>，同时需要将原有数组中的数据复制到新的数组中。</li><li>结论：建议开发中使用带参的构造器：ArrayList list &#x3D; new ArrayList(int capacity)</li></ul><h5 id="jdk-8-的变化"><a href="#jdk-8-的变化" class="headerlink" title="jdk 8 的变化"></a>jdk 8 的变化</h5><p>  ArrayList像懒汉式，一开始创建一个<strong>长度为0</strong>的数组，当添加第一个元素时再创建一个始容量为10的数组</p><ul><li>ArrayList list &#x3D; new ArrayList();&#x2F;&#x2F;底层Object[] elementData初始化为{}。并没有创建长度为10的数组</li><li>list.add(123);&#x2F;&#x2F;第一次调用add()时，底层才创建了<strong>长度10</strong>的数组，并将数据123添加到elementData[0]</li><li>…</li><li>后续的添加和扩容操作与jdk 7 无异。</li></ul><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>  jdk7中的ArrayList的对象的创建类似于单例的饿汉式，而jdk8中的ArrayList的对象的创建类似于单例的懒汉式，延迟了数组的创建，节省内存。</p><h4 id="3、LinkedList-类"><a href="#3、LinkedList-类" class="headerlink" title="3、LinkedList 类"></a>3、LinkedList 类</h4><p>  对于频繁的插入或删除元素的操作，建议使用LinkedList类，效率较高。LinkedList：<strong>双向链表</strong>，内部没有声明数组，而是定义了Node类型的 <strong>first</strong> 和 <strong>last</strong>，用于记录首末元素。同时，定义<strong>内部类Node</strong>，作为LinkedList中保存数据的基本结构。Node除了保存数据，还定义了两个变量：① <strong>prev</strong>变量记录前一个元素的位置；② <strong>next</strong>变量记录下一个元素的位置。</p><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><ul><li>LinkedList list &#x3D; new LinkedList(); 内部声明了Node类型的first和last属性，默认值为null</li><li>list.add(123);&#x2F;&#x2F;将123封装到Node中，创建了Node对象。</li><li>其中，Node定义如下，体现了LinkedList的双向链表的说法<br><img src="/posts/b593f441/4.png" alt="双向链表结构"></li></ul><h5 id="新增方法"><a href="#新增方法" class="headerlink" title="新增方法"></a>新增方法</h5><blockquote><ul><li><strong>void addFirst(Object obj)</strong></li><li><strong>void addLast(Object obj)</strong></li><li><strong>Object getFirst()</strong></li><li><strong>Object getLast()</strong></li><li><strong>Object removeFirst()</strong></li><li><strong>Object removeLast()</strong></li></ul></blockquote><h4 id="4、Vector-类"><a href="#4、Vector-类" class="headerlink" title="4、Vector 类"></a>4、Vector 类</h4><p>  Vector 是一个古老的集合，在JDK 1.0中就有了。大多数操作与ArrayList相同，区别之处在于<strong>Vector是线程安全的</strong>。jdk7和jdk8中通过Vector()构造器创建对象时，底层都创建了长度为10的数组。在扩容方面，默认扩容为原来的数组长度的2倍。</p><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><blockquote><ul><li><strong>void addElement(Object obj)</strong></li><li><strong>void insertElementAt(Object obj,int index)</strong></li><li><strong>void setElementAt(Object obj,int index)</strong></li><li><strong>void removeElement(Object obj)</strong></li><li><strong>void removeElementAt(int index)</strong></li><li><strong>void removeAllElements()</strong></li></ul></blockquote><h4 id="5、常见面试题"><a href="#5、常见面试题" class="headerlink" title="5、常见面试题"></a>5、常见面试题</h4><p>  三个类都是实现了List接口，存储数据的特点相同：<strong>存储有序的、可重复的数据</strong><br><strong>1. ArrayList和LinkedList的异同</strong><br>  首先二者都线程不安全，相对线程安全的Vector，执行效率高。此外，ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。对于随机访问get和set，ArrayList绝对优于LinkedList，因为LinkedList要移动指针。对于新增和删除操作add(特指插入)和remove，LinkedList比较占优势，因为ArrayList要移动数据。<br><strong>2. ArrayList和Vector的区别</strong><br>  Vector和ArrayList几乎是完全相同的，唯一的区别在于Vector是同步类(synchronized)，属于强同步类。因此开销就比ArrayList要大，访问要慢。正常情况下，大多数的Java程序员使用ArrayList而不是Vector，因为同步完全可以由程序员自己来控制。Vector每次扩容请求其大小的2倍空间，而ArrayList是1.5倍。<strong>Vector还有一个子类Stack</strong>。<br><strong>3. 迷惑行为</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Collection</span> coll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coll<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动装箱。Collection接口中的remove方法是remove(Object o)，并没有带索引的remove方法，因为其要兼顾Set接口。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>coll<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[2, 3]</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//List接口中除了remove(Object o)外，还有重载的remove(int index)。因为List有序，其单独定义了一套带索引的操作方法。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1, 3]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="五、Collection的子接口-之-Set-接口"><a href="#五、Collection的子接口-之-Set-接口" class="headerlink" title="五、Collection的子接口 之 Set 接口"></a>五、Collection的子接口 之 Set 接口</h3><p>  Set 接口是Collection接口的另一个子接口，没有提供额外的方法，其使用的都是Collection中声明过的方法。Set 集合<strong>不允许包含相同的元素</strong>，如果试把两个相同的元素加入同一个Set 集合中，则添加操作失败。Set 判断两个对象是否相同不是使用 “&#x3D;&#x3D;” 运算符，而是根据 equals() 方法。Set接口的实现类用来<strong>存储无序的、不可重复的数据</strong>。Set接口的实现类常用的有<strong>HashSet</strong>、<strong>LinkedHashSet</strong>(直接继承于HashSet)、TreeSet。</p><blockquote><ul><li><strong>HashSet：</strong>作为Set接口的<strong>主要实现类</strong>，是<strong>线程不安全的</strong>，可以存储null值。遍历其内部数据时，并非按照添加的顺序输出。</li><li><strong>LinkedHashSet：</strong>做为<strong>HashSet的子类</strong>，遍历其内部数据时，可以按照添加的顺序遍历。对于频繁的遍历操作，LinkedHashSet效率高于HashSet。</li><li><strong>TreeSet：</strong>间接实现Set接口，是SortedSet接口的直接实现类，它可以按照添加对象的指定属性，进行排序。</li></ul></blockquote><ol><li><strong>无序性：</strong>不等于随机性。存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值决定的。</li><li><strong>不可重复性：</strong>保证添加的元素按照equals()判断时，不能返回true。即：相同的元素只能添加一个。</li></ol><p>  向Set（主要指：HashSet、LinkedHashSet）中添加的数据，其所在的类一定要重写hashCode()和equals()。重写的hashCode()和equals()尽可能保持一致性：<strong>相等的对象必须具有相等的散列码</strong>。重写两个方法的小技巧：<strong>对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值</strong>。</p><h4 id="1、重写hashCode-方法"><a href="#1、重写hashCode-方法" class="headerlink" title="1、重写hashCode()方法"></a>1、重写hashCode()方法</h4><p>  在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值。当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode()方法的返回值也应相等。对象中用作 equals() 方法比较的 Field，都应该用来计算 hashCode 值。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User equals()......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> user<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> age<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="/posts/b593f441/5.png" alt="31这个神奇的数字"></p><h4 id="2、重写equals-方法"><a href="#2、重写equals-方法" class="headerlink" title="2、重写equals()方法"></a>2、重写equals()方法</h4><p>  复写equals方法的时候一般都需要同时复写hashCode方法。通常参与计算hashCode的对象的属性也应该参与到equals()中进行计算。</p><h4 id="3、HashSet-类"><a href="#3、HashSet-类" class="headerlink" title="3、HashSet 类"></a>3、HashSet 类</h4><p>  HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。HashSet 按 <strong>Hash 算法</strong>来存储集合中的元素，因此具有很好的<strong>存取、查找、删除</strong>性能。<strong>JDK7中HashSet底层是数组+链表的结构</strong>。</p><h5 id="HashSet-特点"><a href="#HashSet-特点" class="headerlink" title="HashSet 特点"></a>HashSet 特点</h5><blockquote><ul><li><strong>不能保证元素的排列顺序</strong></li><li><strong>HashSet不是线程安全的</strong></li><li><strong>集合元素可以是null</strong></li></ul></blockquote><p>  HashSet 集合判断两个元素相等的标准：<strong>两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等</strong>。对于存放在Set容器中的对象，对应的类一定要重写equals()和hashCode(Object obj)方法，以实现对象相等规则。即：“<strong>相等的对象必须具有相等的散列码</strong>”。</p><h5 id="向HashSet中添加元素的过程："><a href="#向HashSet中添加元素的过程：" class="headerlink" title="向HashSet中添加元素的过程："></a>向HashSet中添加元素的过程：</h5><p>  当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种<strong>散列函数</strong>决定该对象在 HashSet <strong>底层数组</strong>中的存储位置。（这个散列函数会与底层数组的长度相计算得到在数组中的下标，即使：索引位置。并且这种散列函数计算出的位置还尽可能地保证能均匀存储元素，越是散列分布，该散列函数设计得越好）。如果两个元素的 hashCode() 值相等，会继续调用 equals() 方法，如果equals方法结果为true，则添加失败；如果为false，那么会保存该元素，但是该数组的位置上已经有元素了，那么会通过<strong>链表的方式</strong>继续链接。如果两个元素的equals()方法返回true，但是他们的hashCode()返回值不相等，HashSet会将他们存储在不同的位置上，也就是说依然可以添加成功，这点很重要，这也是为什么“相等的对象必须具有相等的散列码”的原因。</p><blockquote><p>  我们向HashSet中添加元素a时，首先调用元素a所在类对象的hashCode()方法，计算元素a的哈希值，此哈希值接着通过某种散列算法计算出在HashSet底层数组中的存放位置（即为：索引位置），判断：数组此位置上是否已经有元素：</p><blockquote><ul><li>如果此位置上没有其他元素，则元素a添加成功。 —&gt;<strong>情况 ①</strong></li><li>如果此位置上有其他元素b(或以链表形式存在的多个元素），则比较元素a与元素b的hash值（因为相同hash值会算出相同的位置，不同的hash值也有可能算出相同的位置）：<blockquote><ul><li>如果hash值不相同，则元素a添加成功。—&gt;<strong>情况 ②</strong></li><li>如果hash值相同，进而需要调用元素a所在类的equals()方法：<blockquote><ul><li>equals()返回true，元素a添加失败</li><li>equals()返回false，则元素a添加成功。—&gt;<strong>情况 ③</strong><br><img src="/posts/b593f441/6.png" alt="HashSet底层结构"></li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><p>  对于添加成功的情况2和情况3而言：元素a与已经存在指定索引位置上数据以链表的方式存储。jdk 7：元素a放到数组中，指向原来的元素。jdk 8：原来的元素在数组中，指向元素a。（七上八下）</p></blockquote><h5 id="HashSet-的经典例子"><a href="#HashSet-的经典例子" class="headerlink" title="HashSet 的经典例子"></a>HashSet 的经典例子</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> person<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> person<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> id<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollectionTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[Person&#123;id=1002, name='BB'&#125;, Person&#123;id=1001, name='AA'&#125;]</span>        p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"CC"</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[Person&#123;id=1002, name='BB'&#125;, Person&#123;id=1001, name='CC'&#125;]</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[Person&#123;id=1002, name='BB'&#125;, Person&#123;id=1001, name='CC'&#125;, Person&#123;id=1001, name='CC'&#125;]</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[Person&#123;id=1002, name='BB'&#125;, Person&#123;id=1001, name='CC'&#125;, Person&#123;id=1001, name='CC'&#125;, Person&#123;id=1001, name='AA'&#125;]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="4、LinkedHashSet-类"><a href="#4、LinkedHashSet-类" class="headerlink" title="4、LinkedHashSet 类"></a>4、LinkedHashSet 类</h4><p>  LinkedHashSet 是 HashSet 的子类。LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用<strong>双向链表</strong>维护元素的次序，这使得元素看起来是以插入顺序保存的。<strong>LinkedHashSet插入性能略低于 HashSet，因为其在插入元素时会维护一个双向链表</strong>，但在迭代访问 Set 里的全部元素时有很好的性能。LinkedHashSet 也是不允许集合元素重复。<br><img src="/posts/b593f441/7.png" alt="LinkedHashSet底层结构"></p><h4 id="5、TreeSet-类"><a href="#5、TreeSet-类" class="headerlink" title="5、TreeSet 类"></a>5、TreeSet 类</h4><p>  TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。TreeSet底层使用<strong>红黑树</strong>结构存储数据。对TreeSet来说重写hashCode()方法不是必须的。TreeSet 两种排序方法：自然排序和定制排序。默认情况下，TreeSet 采用自然排序。</p><h5 id="新增的方法（因为其可以确保元素处于排序状态，所以多了一些特殊方法）"><a href="#新增的方法（因为其可以确保元素处于排序状态，所以多了一些特殊方法）" class="headerlink" title="新增的方法（因为其可以确保元素处于排序状态，所以多了一些特殊方法）"></a>新增的方法（因为其可以确保元素处于排序状态，所以多了一些特殊方法）</h5><blockquote><ul><li>Comparator comparator()</li><li>Object first()</li><li>Object last()</li><li>Object lower(Object e)</li><li>Object higher(Object e)</li><li>SortedSet subSet(fromElement, toElement)</li><li>SortedSet headSet(toElement)</li><li>SortedSet tailSet(fromElement)</li></ul></blockquote><h5 id="TreeSet的自然排序"><a href="#TreeSet的自然排序" class="headerlink" title="TreeSet的自然排序"></a>TreeSet的自然排序</h5><p>  TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列。如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过compareTo(Object obj) 方法的返回值来比较大小。</p><blockquote><p>Comparable 的典型实现：</p><ul><li><strong>BigDecimal</strong>、<strong>BigInteger</strong> 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</li><li><strong>Character</strong>：按字符的 unicode值来进行比较</li><li><strong>Boolean</strong>：true 对应的包装类实例大于 false 对应的包装类实例</li><li><strong>String</strong>：按字符串中字符的 unicode 值进行比较</li><li><strong>Date</strong>、<strong>Time</strong>：后边的时间、日期比前面的时间、日期大</li></ul></blockquote><hr><blockquote><p>向TreeSet中添加元素时的注意点：</p><ol><li>向 TreeSet 中添加元素时，只有第一个元素无须比较compareTo()方法，后面添加的所有元素都会调用compareTo()方法进行比较。</li><li>因为只有相同类的两个实例才会比较大小，所以向 TreeSet 中添加的应该是同一个类的对象。</li><li><strong>对于 TreeSet 集合而言，它判断两个对象是否相等的唯一标准是：两个对象通过 compareTo(Object obj) 方法比较返回值</strong>。</li><li>当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过equals()方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。否则，让人难以理解。</li></ol></blockquote><h5 id="TreeSet的定制排序"><a href="#TreeSet的定制排序" class="headerlink" title="TreeSet的定制排序"></a>TreeSet的定制排序</h5><p>  TreeSet的自然排序要求元素所属的类实现Comparable接口，如果元素所属的类没有实现Comparable接口，或不希望按照升序(默认情况)的方式排列元素或希望按照其它属性大小进行排序，则考虑使用定制排序。定制排序，通过Comparator接口来实现。需要重写compare(T o1,T o2)方法。</p><blockquote><ul><li>利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li><li>要实现定制排序，需要将实现Comparator接口的实例作为形参传递给TreeSet的构造器。</li><li>此时，仍然只能向TreeSet中添加类型相同的对象。否则发生ClassCastException异常。</li><li><strong>使用定制排序判断两个元素相等的标准是：通过Comparator比较两个元素返回了0</strong>。</li></ul></blockquote><h3 id="六、Map接口"><a href="#六、Map接口" class="headerlink" title="六、Map接口"></a>六、Map接口</h3><p>  Map与Collection并列存在。用于保存具有<strong>映射关系</strong>的数据对：key-value。Map 中的 key 和 value 都可以是<strong>任何引用类型</strong>的数据。Map 中的 key 用Set来存放，<strong>不允许重复</strong>，所以key所对应的类，须重写hashCode()和equals()方法。开发中常用String类作为Map的“键”。key 和 value 之间存在单向一对一关系，即通过指定的key 总能找到唯一的、确定的 value。Map接口的常用实现类：<strong>HashMap</strong>、<strong>LinkedHashMap</strong>、<strong>TreeMap</strong>、<strong>HashTable</strong>、<strong>Properties</strong>。其中，<strong>HashMap是 Map 接口使用频率最高的实现类</strong>。</p><blockquote><ul><li><p><strong>HashMap：</strong>作为Map的主要实现类；<strong>线程不安全，效率高</strong>；可以存储null的key和value</p><blockquote><ul><li><strong>LinkedHashMap：</strong>作为HashMap的子类，可以保证在遍历map元素时，按照添加的顺序实现遍历。<strong>原因：</strong>在原有的HashMap底层结构基础上，添加了一对指针，分别指向前后元素，对于频繁的遍历操作，此类执行效率高于HashMap</li></ul></blockquote></li><li><p><strong>TreeMap：</strong>保证按照添加的key-value对进行排序，实现排序遍历。此时考虑key的<strong>自然排序</strong>或<strong>定制排序</strong>。底层使用<strong>红黑树</strong></p></li><li><p><strong>HashTable：</strong>作为古老的实现类；<strong>线程安全，效率低</strong>；不能存储null的key和value</p><blockquote><ul><li><strong>Properties：</strong>作为HashTable的子类，常用来处理配置文件。key和value都是String类型</li></ul></blockquote></li></ul><p><strong>HashMap的底层：数组+链表  （jdk7及之前）; 数组+链表+红黑树 （jdk 8）</strong></p></blockquote><h4 id="1、Map结构的理解"><a href="#1、Map结构的理解" class="headerlink" title="1、Map结构的理解"></a>1、Map结构的理解</h4><blockquote><ul><li>Map中的key：无序的、不可重复的，使用<strong>Set存储</strong>所有的key。<strong>key所在的类要重写equals()和hashCode()方法</strong></li><li>Map中的value：无序的、可重复的，使用<strong>Collection存储</strong>所有的value。<strong>value所在的类要重写equals()方法</strong></li><li>键值对Entry：key-value构成一个Entry对象。Map中的entry是无序的、不可重复的，使用<strong>Set存储</strong>所有的entry</li></ul></blockquote><h4 id="2、Map接口中的常用方法"><a href="#2、Map接口中的常用方法" class="headerlink" title="2、Map接口中的常用方法"></a>2、Map接口中的常用方法</h4><blockquote><p>添加、删除、修改操作：</p><ul><li>Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</li><li>void putAll(Map m)：将m中的所有key-value对存放到当前map中</li><li>Object remove(Object key)：移除指定key的key-value对，并返回value</li><li>void clear()：清空当前map中的所有数据</li></ul><p>元素查询的操作：</p><ul><li>Object get(Object key)：获取指定key对应的value</li><li>Object getOrDefault(Object key, Object defaultValue)：获取指定key对应的value，如果不存在该key，则返回指定的默认值</li><li>boolean containsKey(Object key)：是否包含指定的key</li><li>boolean containsValue(Object value)：是否包含指定的value</li><li>int size()：返回map中key-value对的个数</li><li>boolean isEmpty()：判断当前map是否为空</li><li>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</li></ul><p>元视图操作的方法：</p><ul><li>Set keySet()：返回所有key构成的Set集合</li><li>Collection values()：返回所有value构成的Collection集合。<strong>value是可重复无序的，所以用Collection来接收比较合适。为什么不用List呢，因为List有一些与索引相关的操作对于无序的数据来说没啥用。</strong></li><li>Set entrySet()：返回所有key-value对构成的Set集合</li></ul><p>总结：</p><blockquote><p>添加：put(Object key,Object value)<br>删除：remove(Object key)<br>修改：put(Object key,Object value)<br>查询：get(Object key) &#x2F; getOrDefault(Object key, Object defaultValue)<br>长度：size()<br>遍历：keySet() &#x2F; values() &#x2F; entrySet()</p></blockquote></blockquote><h4 id="3-Map的遍历-keySet-、values-、entrySet"><a href="#3-Map的遍历-keySet-、values-、entrySet" class="headerlink" title="3. Map的遍历 keySet()、values()、entrySet()"></a>3. Map的遍历 keySet()、values()、entrySet()</h4><blockquote><ul><li>Set keySet()</li><li>Collection values()</li><li>Set entrySet()</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*Map的遍历，通过Set keySet(),Collection values(),Set entrySet()方法返回Collection的子接口类型或Collection类型； * 然后调用iterator()方法获得迭代器对象后进行遍历。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历所有的key集：keySet()</span>        <span class="token class-name">Set</span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历所有的value集：values()</span>        <span class="token class-name">Collection</span> values <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历所有的key-value</span>        <span class="token comment">//方式一：entrySet()</span>        <span class="token class-name">Set</span> entrySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> iterator1 <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//entrySet集合中的元素都是entry</span>            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span> entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"---->"</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式二：</span>        <span class="token class-name">Set</span> keySet <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> iterator2 <span class="token operator">=</span> keySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> key <span class="token operator">=</span> iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"====="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="4、HashMap-类"><a href="#4、HashMap-类" class="headerlink" title="4、HashMap 类"></a>4、HashMap 类</h4><p>  <strong>HashMap是Map接口使用频率最高的实现类</strong>。允许使用null键和null值，与HashSet一样，不保证映射的顺序。所有的key构成的集合是Set，无序的不可重复的，所以key所在的类要重写equals()和hashCode()方法。所有的value构成的集合是Collection，无序的可以重复的，所以value所在的类要重写equals()方法。一个key-value对构成一个entry。所有的entry构成的集合是Set，无序的不可重复的。</p><blockquote><ul><li>HashMap判断两个key相等的标准是：两个key通过equals()方法返回true，同时要求hashCode值也相等</li><li>HashMap判断两个value相等的标准是：两个value通过equals()方法返回true</li></ul></blockquote><h5 id="HashMap的底层结构："><a href="#HashMap的底层结构：" class="headerlink" title="HashMap的底层结构："></a>HashMap的底层结构：</h5><table><thead><tr><th>JDK 7</th><th>JDK 8</th></tr></thead><tbody><tr><td><img src="/posts/b593f441/8.png"></td><td><img src="/posts/b593f441/9.png"></td></tr></tbody></table><blockquote><p><strong>1.JDK 1.8之前：</strong><br>  HashMap的内部存储结构其实是数组和链表的结合。当实例化一个HashMap时，系统会创建一个长度为Capacity（默认长度为10）的Entry数组Entry[] table，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。<br><strong>2.JDK 1.8：</strong><br>  HashMap的内部存储结构变成了数组+链表+树的结合。当实例化一个HashMap时，会初始化initialCapacity和loadFactor，在put第一对映射关系时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象可以有两个叶子结点left和right，因此，在一个桶中，就有可能生成一个TreeNode树。而新添加的元素作为链表的last，或树的叶子结点。<br><strong>3.HashMap的扩容：</strong><br>  当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，<strong>而在HashMap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去</strong>，这就是resize。<br>  当HashMap中的元素个数超过数组大小(数组总大小length，不是数组中个数size)&amp;times;loadFactor 时，就会进行数组扩容，loadFactor 的默认值(DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。也就是说，默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中元素个数超过16&amp;times;0.75&#x3D;12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2&amp;times;16&#x3D;32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以<strong>如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</strong></p></blockquote><blockquote><p><strong>4.总结：（JDK1.8相较于之前的变化）</strong></p><blockquote><ul><li>HashMap map &#x3D; new HashMap();&#x2F;&#x2F;默认情况下，先不创建长度为16的数组</li><li>当首次调用map.put()时，再创建长度为16的数组</li><li>数组为Node类型，在jdk7中称为Entry类型</li><li>形成链表结构时，新添加的key-value对在链表的尾部（七上八下）</li><li>当数组指定索引位置的链表长度&gt;8时，且map中的数组的长度&gt; 64时，此索引位置上的所有key-value对使用红黑树进行存储。</li></ul></blockquote></blockquote><h5 id="HashMap源码中的重要常量"><a href="#HashMap源码中的重要常量" class="headerlink" title="HashMap源码中的重要常量"></a>HashMap源码中的重要常量</h5><blockquote><ul><li>DEFAULT_INITIAL_CAPACITY：HashMap的默认容量，16</li><li>MAXIMUM_CAPACITY：HashMap的最大支持容量，2^30</li><li>DEFAULT_LOAD_FACTOR：HashMap的默认加载因子 0.75</li><li>TREEIFY_THRESHOLD：Bucket中链表长度大于该默认值 8，转化为红黑树</li><li>UNTREEIFY_THRESHOLD：Bucket中红黑树存储的Node小于该默认值，转化为链表</li><li>MIN_TREEIFY_CAPACITY：桶中的Node被树化时最小的hash表容量 64。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作。这个MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。）</li><li>table：存储元素的数组，总是2的n次幂</li><li>entrySet：存储具体元素的集</li><li>size：HashMap中存储的键值对的数量</li><li>modCount：HashMap扩容和结构改变的次数。</li><li>threshold：扩容的临界值&#x3D;容量*填充因子 12</li><li>loadFactor：填充因子</li><li>负载因子的大小，对HashMap有什么影响<blockquote><ul><li>负载因子的大小<strong>决定了HashMap的数据密度</strong>。</li><li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长,造成查询或插入时的比较次数增多，性能会下降。</li><li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。</li><li>按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此时平均检索长度接近于常数。</li></ul></blockquote></li></ul></blockquote><h5 id="向HashMap中添加元素的过程"><a href="#向HashMap中添加元素的过程" class="headerlink" title="向HashMap中添加元素的过程"></a>向HashMap中添加元素的过程</h5><p>  以IDK7为例，向HashMap中添加entry1(key，value)时，向HashMap中添加entry1(key，value)，需要首先计算entry1中key的哈希值(根据key所在类的hashCode()计算得到)，此哈希值经过处理以后，得到在底层Entry[]数组中要存储的位置i。如果位置i上没有元素，则entry1直接添加成功。如果位置i上已经存在entry2(或还有链表存在的entry3，entry4)，则需要通过循环的方法，依次比较entry1中key和其他的entry。如果彼此hash值不同，则直接添加成功。如果hash值相同，继续比较二者是否equals。如果返回值为true，则使用entry1的value去替换equals为true的entry的value。如果遍历一遍以后，发现所有的equals返回都为false,则entry1仍可添加成功。entry1指向该数组位置上原有的entry元素。</p><blockquote><p>map.put(key1,value1):<br>首先，调用key1所在类的hashCode()计算key1哈希值，此哈希值经过某种算法计算以后，得到在Entry数组中的存放位置。</p><blockquote><ul><li>如果此位置上的数据为空，此时的key1-value1添加成功。 —&gt;<strong>情况 ①</strong></li><li>如果此位置上的数据不为空，(意味着此位置上存在一个或多个数据(以链表形式存在)),比较key1和已经存在的一个或多个数据的哈希值：<blockquote><ul><li>如果key1的哈希值与已经存在的数据的哈希值都不相同，此时key1-value1添加成功。—&gt;<strong>情况 ②</strong></li><li>如果key1的哈希值和已经存在的某一个数据(key2-value2)的哈希值相同，继续比较：调用key1所在类的equals(key2)方法，比较：<blockquote><ul><li>如果equals()返回false：此时key1-value1添加成功。—&gt;<strong>情况 ③</strong></li><li>如果equals()返回true：使用value1替换value2。 —&gt;<strong>情况 ④（修改替换）</strong></li></ul></blockquote></li></ul></blockquote></li></ul></blockquote><p>  关于情况2和情况3：此时key1-value1和原来的数据以链表的方式存储。在不断的添加过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。<br>  jdk8 相较于jdk7在底层实现方面的不同：</p><blockquote><ul><li>new HashMap()：底层没有创建一个长度为16的数组</li><li><strong>jdk 8底层的数组是：Node[],而非Entry[]</strong></li><li>首次调用put()方法时，底层创建长度为16的数组</li><li>jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。<blockquote><ul><li>形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</li><li>当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; 8 且当前数组的长度 &gt; 64时，此时此索引位置上的所数据改为使用红黑树存储。</li></ul></blockquote></li></ul></blockquote></blockquote><h4 id="5、LinkedHashMap-类"><a href="#5、LinkedHashMap-类" class="headerlink" title="5、LinkedHashMap 类"></a>5、LinkedHashMap 类</h4><blockquote><ul><li>LinkedHashMap 是 HashMap 的子类</li><li>在HashMap存储结构的基础上，使用了一对双向链表来记录添加元素的顺序</li><li>与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代顺序：迭代顺序与 Key-Value 对的插入顺序一致<br><img src="/posts/b593f441/10.png"></li><li>LinkedHashMap的其中一个构造函数**LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder)**可以通过 accessOrder 设置是否需要按照访问顺序排序，最近访问的元素排在最后，调用put(key,val)和get(key)都算是一次访问。有效利用该点，可以实现LRU缓存算法。</li></ul></blockquote><h4 id="6、TreeMap-类"><a href="#6、TreeMap-类" class="headerlink" title="6、TreeMap 类"></a>6、TreeMap 类</h4><blockquote><ul><li><p>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。TreeMap 可以保证所有的 Key-Value 对处于有序状态。</p></li><li><p>向TreeMap中添加key-value，要求key必须是由同一个类创建的对象。因为排序需要同类别对象比较大小。</p></li><li><p>TreeSet底层使用红黑树结构存储数据</p></li><li><p>TreeMap 的 Key 的排序：</p><blockquote><ul><li><strong>自然排序：</strong>TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li><li><strong>定制排序：</strong>创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</li></ul></blockquote></li><li><p>TreeMap判断两个key相等的标准：两个key通过compareTo()方法或者compare()方法返回0。</p></li></ul></blockquote><h4 id="7、HashTable-类"><a href="#7、HashTable-类" class="headerlink" title="7、HashTable 类"></a>7、HashTable 类</h4><blockquote><ul><li>Hashtable是个古老的 Map 实现类，JDK1.0就提供了。不同于HashMap，Hashtable是线程安全的。</li><li>Hashtable实现原理和HashMap相同，功能相同。底层都使用哈希表结构，查询速度快，很多情况下可以互用。</li><li>与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value</li><li>与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序</li><li>Hashtable判断两个key相等、两个value相等的标准，与HashMap一致。</li></ul></blockquote><h4 id="8、Properties-类"><a href="#8、Properties-类" class="headerlink" title="8、Properties 类"></a>8、Properties 类</h4><blockquote><ul><li>Properties 类是 Hashtable 的子类，该对象用于处理属性文件</li><li>由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型</li><li>存取数据时，建议使用setProperty(String key,String value)方法和 getProperty(String key)方法</li></ul></blockquote><p>jdbc.properties 文件</p><pre class="language-text" data-language="text"><code class="language-text">name=Tompassword=123456</code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Properties</span> pros <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pros<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加载流对应的文件</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> password <span class="token operator">=</span> pros<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"password = "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的注解</title>
      <link href="/posts/74852cbf.html"/>
      <url>/posts/74852cbf.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>从 JDK5.0开始，Java增加了对元数据(MetaData)的支持，也就是Annotation(注解)</p></blockquote><ol><li>Annotation 其实就是代码里的<strong>特殊标记</strong>, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。通过使用 Annotation, 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。</li><li>Annotation 可以像修饰符一样被使用, 可用于<strong>修饰包, 类, 构造器, 方法, 成员变量, 参数, 局部变量的声明</strong>, 这些信息被保存在 Annotation的 “name&#x3D;value” 对中。</li><li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE&#x2F;Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。</li><li>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：框架 &#x3D; 注解 + 反射 + 设计模式。</li></ol><h3 id="一、注解的使用示例"><a href="#一、注解的使用示例" class="headerlink" title="一、注解的使用示例"></a>一、注解的使用示例</h3><p>  使用 Annotation 时要在其前面增加 @ 符号, 并把该 Annotation 当成一个修饰符使用。用于修饰它支持的程序元素</p><h4 id="1、示例一：与文档生成相关的注解"><a href="#1、示例一：与文档生成相关的注解" class="headerlink" title="1、示例一：与文档生成相关的注解"></a>1、示例一：与文档生成相关的注解</h4><ol><li><strong>@author：</strong> 标明开发该类模块的作者，多个作者之间使用,分割</li><li><strong>@version：</strong>  标明该类模块的版本</li><li><strong>@see：</strong>  参考转向，也就是相关主题</li><li><strong>@since：</strong>  从哪个版本开始增加的</li><li><strong>@param：</strong>  对方法中某参数的说明，如果没有参数就不能写</li><li><strong>@return：</strong>  对方法返回值的说明，如果方法的返回值类型是void就不能写</li><li><strong>@exception：</strong>  对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写</li><li>注意点：<blockquote><ul><li>@param @return 和 @exception 这三个标记都是只用于方法的。</li><li>@param的格式要求：@param 形参名 形参类型 形参说明</li><li>@return 的格式要求：@return 返回值类型 返回值说明</li><li>@exception的格式要求：@exception 异常类型 异常说明</li><li>@param和@exception可以并列多个</li></ul></blockquote></li></ol><h4 id="2、示例二：在编译时进行格式检查（JDK内置的三个基本注解）"><a href="#2、示例二：在编译时进行格式检查（JDK内置的三个基本注解）" class="headerlink" title="2、示例二：在编译时进行格式检查（JDK内置的三个基本注解）"></a>2、示例二：在编译时进行格式检查（JDK内置的三个基本注解）</h4><ol><li><strong>@Override：</strong>限定重写父类方法, 该注解只能用于方法</li><li><strong>@Deprecated：</strong> 用于表示所修饰的元素(类, 方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</li><li><strong>@SuppressWarnings：</strong>抑制编译器警告</li></ol><h3 id="二、自定义注解"><a href="#二、自定义注解" class="headerlink" title="二、自定义注解"></a>二、自定义注解</h3><ol><li>定义新的 Annotation 类型<strong>使用 @interface 关键字</strong></li><li>自定义注解<strong>自动继承了java.lang.annotation.Annotation接口</strong></li><li>Annotation 的成员变量在 Annotation 定义中以<strong>无参数方法</strong>的形式来声明。其方法名和返回值定义了该<strong>成员的名字</strong>和<strong>类型</strong>。我们称为配置参数。类型只能是<strong>八种基本数据类型</strong>、<strong>String类型</strong>、<strong>Class类型</strong>、<strong>enum类型</strong>、<strong>Annotation类型</strong>、<strong>以上所有类型的数组</strong>。</li><li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始值可使用 <strong>default 关键字</strong></li><li>如果只有一个参数成员，建议使用<strong>参数名为value</strong></li><li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是“<strong>参数名 &#x3D; 参数值</strong>”，如果只有<strong>一个参数成员，且名称为value，可以省略“value&#x3D;”</strong></li><li>没有成员定义的 Annotation 称为<strong>标记</strong>; 包含成员变量的 Annotation 称为<strong>元数据 Annotation</strong></li><li><strong>注意：自定义注解必须配上注解的信息处理流程（使用反射）才有意义</strong>。</li><li>自定义注解通常都会指明两个元注解：Retention、Target</li><li><strong>总结：</strong><blockquote><p>① 注解声明为：@interface<br>② 内部定义成员，通常使用value表示<br>③ 可以指定成员的默认值，使用default定义<br>④ 如果自定义注解没有成员，表明是一个标识作用。</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre></li></ol><h3 id="三、元注解"><a href="#三、元注解" class="headerlink" title="三、元注解"></a>三、元注解</h3><p>  JDK 的元 Annotation 用于修饰其他 Annotation 定义。对现有的注解进行解释说明的注解。<br><strong>JDK 5.0 提供了4个标准的meta-annotation类型，分别是：</strong></p><ol><li><p><strong>@Retention：</strong>只能用于修饰一个 Annotation 定义，用于<strong>指定该 Annotation 的生命周期</strong>, @Rentention 包含一个 RetentionPolicy 类型的成员变量。使用@Rentention 时必须为该 value 成员变量指定值。只有声明为RUNTIME生命周期的注解，才能在运行时通过反射获取。</p><blockquote><ul><li><strong>RetentionPolicy.SOURCE：在源文件中有效（即源文件保留）</strong>，编译器直接丢弃这种策略的注解。</li><li><strong>RetentionPolicy.CLASS：在class文件中有效（即class保留）</strong>，当运行Java程序时，JVM不会保留注解。 这是<strong>默认值</strong>。</li><li><strong>RetentionPolicy.RUNTIME：在运行时有效（即运行时保留）</strong>，当运行Java程序时，JVM 会保留注解。程序可以通过反射获取该注释。</li></ul></blockquote></li><li><p><strong>@Target：</strong>用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于修饰哪些程序元素。@Target 也包含一个名为 value 的成员变量。</p><table><thead><tr><th>取值(ElementType)</th><th></th><th>取值(ElementType)</th><th></th></tr></thead><tbody><tr><td>CONSTRUCTOR</td><td>用于描述构造器</td><td>PACKAGE</td><td>用于描述包</td></tr><tr><td>FIELD</td><td>用于描述域</td><td>PARAMETER</td><td>用于描述参数</td></tr><tr><td>LOCAL_VARIABLE</td><td>用于描述局部变量</td><td>TYPE</td><td>用于描述类、接口(包括注解类型)或枚举类enum声明</td></tr><tr><td>METHOD</td><td>用于描述方法</td><td></td><td></td></tr><tr><td><img src="/posts/74852cbf/1.png" alt="ElementType"></td><td></td><td></td><td></td></tr></tbody></table></li><li><p><strong>@Documented：</strong>用于指定被该元 Annotation 修饰的 Annotation 类将被 javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。注：定义为Documented的注解必须设置Retention值为RUNTIME。</p></li><li><p><strong>@Inherited：</strong>被它修饰的 Annotation 将具有<strong>继承性</strong>。如果某个类使用了被@Inherited 修饰的 Annotation，则其子类将自动具有该注解。比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解。实际应用中，使用较少。</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">,</span> ANNOTATION_TYPE<span class="token punctuation">,</span> PACKAGE<span class="token punctuation">,</span> TYPE_PARAMETER<span class="token punctuation">,</span> TYPE_USE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="四、利用反射获取运行时有效的注解的信息"><a href="#四、利用反射获取运行时有效的注解的信息" class="headerlink" title="四、利用反射获取运行时有效的注解的信息"></a>四、利用反射获取运行时有效的注解的信息</h3><ol><li>JDK 5.0 在 java.lang.reflect 包下新增了 AnnotatedElement 接口, 该接口代表程序中<strong>可以接受注解的程序元素</strong></li><li>当一个 Annotation 类型被定义为运行时 Annotation 后, 该注解才是运行时可见, 当 class 文件被载入时保存在 class 文件中的 Annotation 才会被虚拟机读取</li><li>程序可以调用 AnnotatedElement对象的如下方法来访问 Annotation 信息：<blockquote><ul><li>getAnnotation(Class annotationClasss)</li><li>getAnnotations()</li><li>getDeclareAnnotations()</li><li>……</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>TYPE<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> METHOD<span class="token punctuation">,</span> PARAMETER<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> LOCAL_VARIABLE<span class="token punctuation">,</span> ANNOTATION_TYPE<span class="token punctuation">,</span> PACKAGE<span class="token punctuation">,</span> TYPE_PARAMETER<span class="token punctuation">,</span> TYPE_USE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@MyAnnotation</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@MyAnnotation</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Info</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Info</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生是祖国的花朵"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnotatonTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> cls <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> annotations<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="五、JDK-8-中的注解新特性：（可重复注解、类型注解）"><a href="#五、JDK-8-中的注解新特性：（可重复注解、类型注解）" class="headerlink" title="五、JDK 8 中的注解新特性：（可重复注解、类型注解）"></a>五、JDK 8 中的注解新特性：（可重复注解、类型注解）</h3><p>  Java 8对注解处理提供了两点改进：可重复的注解及可用于类型的注解。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。</p><ol><li>可重复注解<br><img src="/posts/74852cbf/2.png" alt="可重复注解"><br>① 在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class<br>② MyAnnotation的Target、Retention以及@Inherit等元注解与MyAnnotations相同。若Target和Retention没有保持一致，则编译报错；若@Inherit没有保持一致，则运行报错。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotations</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MyAnnotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//@MyAnnotations(&#123;@MyAnnotation("java"), @MyAnnotation("python")&#125;)//JDK 8 之前的写法</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>类型注解<br>  JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：<strong>TYPE_PARAMETER</strong>，<strong>TYPE_USE</strong>。<blockquote><ul><li>ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中（如：泛型声明）</li><li>ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>TYPE_USE<span class="token punctuation">,</span> TYPE_PARAMETER<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token comment">//TYPE_PARAMETER起作用</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span><span class="token comment">//TYPE_USE起作用</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token class-name">String</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//TYPE_USE起作用</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token annotation punctuation">@MyAnnotation</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">10L</span><span class="token punctuation">;</span><span class="token comment">//TYPE_USE起作用</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的枚举类</title>
      <link href="/posts/f2eec304.html"/>
      <url>/posts/f2eec304.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中枚举关于枚举类的使用说明</p></blockquote><h3 id="一、枚举类的使用"><a href="#一、枚举类的使用" class="headerlink" title="一、枚举类的使用"></a>一、枚举类的使用</h3><p>1.枚举类的理解：类的对象只有有限个，确定的。我们称此类为枚举类<br>2.当需要定义一组常量时，强烈建议使用枚举类<br>3.如果枚举类中只有一个对象，则可以作为单例模式的实现方式。<br>4.枚举类的属性：</p><blockquote><ul><li>枚举类对象的属性不应允许被改动, 所以应该使用 private final 修饰</li><li>private final 修饰的属性应该在构造器中为其赋值</li><li>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的传入参数</li></ul></blockquote><h3 id="二、如何定义枚举类"><a href="#二、如何定义枚举类" class="headerlink" title="二、如何定义枚举类"></a>二、如何定义枚举类</h3><p><strong>方式一：jdk5.0之前，自定义枚举类</strong></p><ol><li>私有化类的构造器，保证不能在类的外部创建其对象</li><li>在类的内部创建枚举类的实例。声明为：public static final</li><li>对象如果有实例变量，应该声明为private final，并在构造器中初始化</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*自定义枚举类*/</span><span class="token keyword">class</span> <span class="token class-name">Season</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 声明Season对象的属性：private final 修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonDesc<span class="token punctuation">;</span>    <span class="token comment">//2. 私有化构造器，给对象属性赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span> <span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//3. 提供当前枚举类的多个对象：public static final的</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SPRING <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> SUMMER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> AUTUMN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Season</span> WINTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4. 其他诉求1：获取枚举类对象的属性</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4. 其他诉求1：提供toString()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Season&#123;"</span> <span class="token operator">+</span>                <span class="token string">"seasonName='"</span> <span class="token operator">+</span> seasonName <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", seasonDesc='"</span> <span class="token operator">+</span> seasonDesc <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeasonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Season</span> spring <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SPRING<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">.</span><span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>spring<span class="token punctuation">.</span><span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>方式二：jdk5.0，可以使用enum关键字定义枚举类</p><ol><li>使用说明<blockquote><ul><li>使用 enum 定义的枚举类<strong>默认继承了 java.lang.Enum 类</strong>，因此不能再继承其他类。但是和普通Java类一样可以实现一个或多个接口。</li><li>枚举类的构造器只能使用 private 权限修饰符</li><li>枚举类的所有实例必须在枚举类中显式列出(, 分隔 ; 结尾)。列出的实例系统会自动添加 public static final 修饰</li><li><strong>必须在枚举类的第一行声明枚举类对象</strong></li><li>JDK 1.5 中可以在 switch 表达式中使用Enum定义的枚举类的对象作为表达式, case 子句可以直接使用枚举值的名字, 无需添加枚举类作为限定。</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*使用enum关键字定义枚举类*/</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1. 必须在枚举类的第一行声明枚举类对象（多个对象用“，”隔开，末尾用“；”）</span>    <span class="token comment">//所列出的实例，会自动被public static final 修饰</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 声明Season对象的属性：private final</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonDesc<span class="token punctuation">;</span>    <span class="token comment">//3. 构造器：枚举类的构造器只能使用 private 权限修饰符</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span> <span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4. 其他述求：获取枚举类对象的属性</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SeasonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Season</span> summer <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前枚举类常量的名称：SUMMER</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">.</span><span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//夏天</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class java.lang.Enum</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="三、Enum类中的常用方法："><a href="#三、Enum类中的常用方法：" class="headerlink" title="三、Enum类中的常用方法："></a>三、Enum类中的常用方法：</h3><table><thead><tr><th>方法名</th><th>详细描述</th></tr></thead><tbody><tr><td>valueOf</td><td>传递枚举类型的Class对象和枚举常量名称给静态方法valueOf，会得到与参数匹配的枚举常量</td></tr><tr><td>toString</td><td>得到当前枚举常量的名称。可以通过重写这个方法来使得得到的结果更易读</td></tr><tr><td>equals</td><td>在枚举类型中可以直接使用 “&#x3D;&#x3D;” 来比较两个枚举常量是否相等。Enum提供的这个equals()方法，也是直接使用 “&#x3D;&#x3D;” 实现的。它的存在是为了在Set、List、和 Map 中使用。<strong>注意：equals是不可变的</strong>。</td></tr><tr><td>hashCode</td><td>Enum实现了hashCode()来和equals()保持一致。 <strong>注意：hashCode也是不可变的</strong>。</td></tr><tr><td>getDeclaringClass</td><td>得到枚举常量所属枚举类型的Class对象。可以用它来判断两个枚举量是否属于同一个枚举类型。</td></tr><tr><td>name</td><td>得到当前枚举常量的名称。<strong>建议优先使用toString()方法</strong></td></tr><tr><td>ordinal</td><td>得到当前枚举常量的次序</td></tr><tr><td>compareTo</td><td><strong>枚举类型实现了Comparable接口</strong>，可以比较两个枚举常量的大小（按照声明的顺序排列）</td></tr><tr><td>clone</td><td>枚举类型不能被Clone。为了防止子类实现克隆，Enum类实现了一个仅抛出 CloneNotSupportException 异常的不变Clone()</td></tr></tbody></table><h3 id="四、使用enum关键字定义的枚举类实现接口的情况"><a href="#四、使用enum关键字定义的枚举类实现接口的情况" class="headerlink" title="四、使用enum关键字定义的枚举类实现接口的情况"></a>四、使用enum关键字定义的枚举类实现接口的情况</h3><ol><li>和普通 Java 类一样，枚举类可以实现一个或多个接口</li><li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。（实现接口，在enum类中实现抽象方法）</li><li>要每个枚举值在调用实现的接口方法呈现出不同的行为方式，则可以让每个枚举值分别来实现该方法。（让枚举类的对象分别实现接口中的抽象方法）</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeasonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Seanson</span> summer <span class="token operator">=</span> <span class="token class-name">Seanson</span><span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span>        <span class="token comment">//toString():返回枚举类对象的名称</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//values():返回所有的枚举类对象构成的数组</span>        <span class="token class-name">Seanson</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span> <span class="token class-name">Seanson</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Thread中的State是内部枚举类</span>        <span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values1 <span class="token operator">=</span> <span class="token class-name">Thread<span class="token punctuation">.</span>State</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> values1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>values1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//valueOf(String objName):返回枚举类中对象名是objName的对象。</span>        <span class="token class-name">Seanson</span> winter <span class="token operator">=</span> <span class="token class-name">Seanson</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"WINTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Seanson winter = Seanson.valueOf("WINTER1");如果没有objName的枚举类对象，则抛异常：IllegalArgumentException</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>winter<span class="token punctuation">)</span><span class="token punctuation">;</span>        winter<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Info</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略 public abstract</span><span class="token punctuation">&#125;</span><span class="token comment">/*使用enum关键字枚举类*/</span><span class="token keyword">enum</span> <span class="token class-name">Seanson</span> <span class="token keyword">implements</span> <span class="token class-name">Info</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"春天"</span><span class="token punctuation">,</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春天在哪里？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"夏天"</span><span class="token punctuation">,</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"宁夏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">"秋天"</span><span class="token punctuation">,</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋天不回来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">"冬天"</span><span class="token punctuation">,</span><span class="token string">"冰天雪地"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大约在冬季"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//2.声明Season对象的属性:private final修饰</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> seasonDesc<span class="token punctuation">;</span>    <span class="token comment">//2.私有化类的构造器,并给对象属性赋值</span>    <span class="token keyword">private</span> <span class="token class-name">Seanson</span><span class="token punctuation">(</span><span class="token class-name">String</span> seasonName<span class="token punctuation">,</span><span class="token class-name">String</span> seasonDesc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonName <span class="token operator">=</span> seasonName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>seasonDesc <span class="token operator">=</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//4.其他诉求1：获取枚举类对象的属性</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSeasonDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> seasonDesc<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*@Override    public void show() &#123;        System.out.println("这是一个季节");    &#125;*/</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的常用类System,Math,BigInteger与BigDecimal</title>
      <link href="/posts/d9fde16d.html"/>
      <url>/posts/d9fde16d.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中还有一些比较常用的类，比如System，Math，BigInteger，BigDecimal。</p></blockquote><h3 id="一、System"><a href="#一、System" class="headerlink" title="一、System"></a>一、System</h3><ol><li>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包中。</li><li>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。</li><li>成员变量：<blockquote><p>System类内部包含in、out和err三个成员变量，分别代表标准输入流(键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</p></blockquote></li><li>成员方法<blockquote><ul><li><strong>native long currentTimeMillis()：</strong>该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。</li><li><strong>void exit(int status)：</strong>该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。</li><li><strong>void gc()：</strong>该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。</li><li><strong>String getProperty(String key)：</strong>该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见的属性名以及属性的作用如下表所示：<table><thead><tr><th>属性名</th><th>属性说明</th></tr></thead><tbody><tr><td>java.version</td><td>Java运行时环境版本</td></tr><tr><td>java.home</td><td>Java安装目录</td></tr><tr><td>os.name</td><td>操作系统的名称</td></tr><tr><td>os.version</td><td>操作系统的版本</td></tr><tr><td>user.name</td><td>用户的账户名称</td></tr><tr><td>user.home</td><td>用户的主目录</td></tr><tr><td>user.dir</td><td>用户当前工作目录</td></tr></tbody></table></li></ul></blockquote></li></ol><h3 id="二、Math"><a href="#二、Math" class="headerlink" title="二、Math"></a>二、Math</h3><p>  java.lang.Math提供了一系列静态方法用于科学计算。其方法的参数和返回值类型一般为double型。</p><blockquote><ul><li>abs 绝对值</li><li>acos,asin,atan,cos,sin,tan 三角函数</li><li>sqrt 平方根</li><li>pow(double a,doble b) a的b次幂</li><li>log 自然对数</li><li>exp e为底指数</li><li>max(double a,double b)</li><li>min(double a,double b)</li><li>random() 返回0.0到1.0的随机数</li><li>long round(double a) double型数据a转换为long型（四舍五入）</li><li>toDegrees(double angrad) 弧度—&gt;角度</li><li>toRadians(double angdeg) 角度—&gt;弧度</li></ul></blockquote><h3 id="三、BigInteger"><a href="#三、BigInteger" class="headerlink" title="三、BigInteger"></a>三、BigInteger</h3><ol><li>Integer类作为int的包装类，能存储的最大整型值为2^31-1，Long类也是有限的，最大为2^63-1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。</li><li>java.math包的BigInteger可以表示<strong>不可变的任意精度的整数</strong>。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。</li><li>构造器：<blockquote><ul><li>BigInteger(String val)：根据字符串构建BigInteger对象</li></ul></blockquote></li><li>常用方法：<blockquote><ul><li>public BigInteger abs()：返回此 BigInteger 的绝对值的 BigInteger。</li><li>BigInteger add(BigInteger val) ：返回其值为 (this + val) 的 BigInteger</li><li>BigInteger subtract(BigInteger val) ：返回其值为 (this - val) 的 BigInteger</li><li>BigInteger multiply(BigInteger val) ：返回其值为 (this * val) 的 BigInteger</li><li>BigInteger divide(BigInteger val) ：返回其值为 (this &#x2F; val) 的 BigInteger。整数<br>相除只保留整数部分。</li><li>BigInteger remainder(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。</li><li>BigInteger[] divideAndRemainder(BigInteger val)：返回包含 (this &#x2F; val) 和 (this % val) 的两个 BigInteger 的数组。</li><li>BigInteger pow(int exponent) ：返回其值为 (this^exponent) 的 BigIntege</li></ul></blockquote></li></ol><h3 id="四、BigDecimal"><a href="#四、BigDecimal" class="headerlink" title="四、BigDecimal"></a>四、BigDecimal</h3><ol><li>一般的Float类和Double类可以用来做科学计算或工程计算，但在<strong>商业计算中，要求数字精度比较高，故用到java.math.BigDecimal类</strong>。</li><li>BigDecimal类支持<strong>不可变的</strong>、<strong>任意精度的</strong>有符号十进制<strong>定点数</strong>。</li><li>构造器：<blockquote><ul><li>public BigDecimal(double val)</li><li>public BigDecimal(String val)</li></ul></blockquote></li><li>常用方法：<br>常用方法<blockquote><ul><li>public BigDecimal add(BigDecimal augend)</li><li>public BigDecimal subtract(BigDecimal subtrahend)</li><li>public BigDecimal multiply(BigDecimal multiplicand)</li><li>public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的比较器</title>
      <link href="/posts/cb12c507.html"/>
      <url>/posts/cb12c507.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间的比较问题。Java实现对象排序的方式有两种：①自然排序：java.lang.Comparable ②定制排序：java.util.Comparator</p></blockquote><p>  Java中的对象，正常情况下，只能进行比较：&#x3D;&#x3D;  或  !&#x3D; 。不能使用 &gt; 或 &lt; 的。但是在开发场景中，我们需要对多个对象进行排序，言外之意，就需要比较对象的大小。如何实现？使用两个接口中的任何一个：<strong>Comparable</strong> 或 <strong>Comparator</strong></p><h3 id="一、自然排序-Comparable-接口"><a href="#一、自然排序-Comparable-接口" class="headerlink" title="一、自然排序 Comparable 接口"></a>一、自然排序 Comparable 接口</h3><ol><li>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。</li><li>实现 Comparable 的类必须<strong>实现 compareTo(Object obj) 方法</strong>，两个对象即通过compareTo(Object obj) 方法的返回值来比较大小。重写compareTo(obj)的规则：<blockquote><ul><li>如果当前对象this大于形参对象obj，则返回正整数，</li><li>如果当前对象this小于形参对象obj，则返回负整数，</li><li>如果当前对象this等于形参对象obj，则返回零。</li></ul></blockquote></li><li>对于自定义类来说，如果需要排序，我们可以让自定义类实现Comparable接口，重写compareTo(obj)方法。在compareTo(obj)方法中指明如何排序</li><li>实现Comparable接口的对象列表（和数组）可以通过 <strong>Collections.sort</strong> 或 <strong>Arrays.sort</strong>进行自动排序（默认从小到大排序）。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</li><li>对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) &#x3D;&#x3D; 0 与 e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals 一致。建议（虽然不是必需的）最好使自然排序与 equals 一致。</li><li>Comparable 的典型实现：(默认都是从小到大排列的)<blockquote><ul><li>String：按照字符串中字符的Unicode值进行比较</li><li>Character：按照字符的Unicode值来进行比较</li><li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>Date、Time等：后面的日期时间比前面的日期时间大</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Goods&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//指明商品比较大小的方式：按照价格从低到高排序，再按照产品名称从高到低排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token comment">//方式一：</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">></span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//居然还可以调用private属性</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&lt;</span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//方式二：调用包装类的静态方法。当然其实包装类对象本身也有compareTo()方法。</span>            <span class="token comment">//return Double.compare(this.price, goods.price);</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不一致！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"lenovoMouse"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"dellMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"xiaomiMouse"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"microsoftMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果Goods没有实现Comparable接口，则会报错“Goods cannot be cast to java.lang.Comparable”</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二、定制排序-Comparator-接口"><a href="#二、定制排序-Comparator-接口" class="headerlink" title="二、定制排序 Comparator 接口"></a>二、定制排序 Comparator 接口</h3><ol><li><p>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码，或者实现了java.lang.Comparable接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来排序，强行对多个对象进行整体排序的比较。</p></li><li><p><strong>重写compare(Object o1,Object o2)方法</strong>，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</p></li><li><p>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。</p></li><li><p>还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的顺序，或者为那些没有自然顺序的对象 collection 提供排序。</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparator1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"KK"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"GG"</span><span class="token punctuation">,</span><span class="token string">"JJ"</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//按照字符串从大到小的顺序排列</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span>  <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o1<span class="token punctuation">;</span>                    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o2<span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token operator">-</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的数据类型不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Goods&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//指明商品比较大小的方式：按照价格从低到高排序，再按照产品名称从高到低排序</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Goods</span> goods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token comment">//方式一：</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">></span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//居然还可以调用private属性</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">&lt;</span> goods<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//方式二：调用包装类的静态方法。当然其实包装类对象本身也有compareTo()方法。</span>            <span class="token comment">//return Double.compare(this.price, goods.price);</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"传入的数据类型不一致！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testComparator2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"lenovoMouse"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"dellMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"xiaomiMouse"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"huaweiMouse"</span><span class="token punctuation">,</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"microsoftMouse"</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//指明商品比较大小的方式：按照产品名称从低到高排序,再按照价格从高到低排序</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">Goods</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">Goods</span> g1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o1<span class="token punctuation">;</span>                    <span class="token class-name">Goods</span> g2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Goods</span><span class="token punctuation">)</span>o2<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>g1<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>g2<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> g1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>g2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入的数据类型不一致"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="三、Comparable接口-和-Comparator接口-的使用对比"><a href="#三、Comparable接口-和-Comparator接口-的使用对比" class="headerlink" title="三、Comparable接口 和 Comparator接口 的使用对比"></a>三、Comparable接口 和 Comparator接口 的使用对比</h3><ol><li>Comparable接口的方式，可以保证Comparable接口实现类的对象在任何位置都可以比较大小。</li><li>Comparator接口属于临时性的定制化的比较。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的String类常见算法题</title>
      <link href="/posts/809098e7.html"/>
      <url>/posts/809098e7.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中关于String类的常见笔试算法题</p></blockquote><ol><li>将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//方式一：转换为char[]</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> startIndex<span class="token punctuation">,</span>y <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">char</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//方式二：使用String的拼接</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//第1部分</span>            <span class="token class-name">String</span> reverseStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第2部分</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i <span class="token operator">>=</span> startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                reverseStr <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//第3部分</span>            reverseStr <span class="token operator">+=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> reverseStr<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//方式三：使用StringBuffer/StringBuilder替换String</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverse2</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> endIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第1部分</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第2部分</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> endIndex<span class="token punctuation">;</span>i <span class="token operator">>=</span> startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//第3部分</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> reverse <span class="token operator">=</span> <span class="token function">reverse2</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>获取一个字符串在另一个字符串中出现的次数。比如：获取“ab”在 “abkkcadkabkebfkaabkskab” 中出现的次数</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> mainStr<span class="token punctuation">,</span> <span class="token class-name">String</span> subStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mainLength <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> subLength <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mainLength <span class="token operator">>=</span> subLength<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//方式一：</span><span class="token comment">//            while((index = mainStr.indexOf(subStr)) != -1)&#123;</span><span class="token comment">//                count++;</span><span class="token comment">//                mainStr = mainStr.substring(index + subStr.length());</span><span class="token comment">//            &#125;</span>            <span class="token comment">//方式二：对方式一的改进</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>subStr<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                index <span class="token operator">+=</span> subLength<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> mainStr <span class="token operator">=</span> <span class="token string">"abkkcadkabkebfkaabkskab"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> subStr <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>mainStr<span class="token punctuation">,</span> subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>获取两个字符串中最大相同子串。比如：str1 &#x3D; “abcwerthelloyuiodefabcdef”;str2 &#x3D; “cvhellobnm” 提示：将短的那个串进行长度依次递减的子串与较长的串比较。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//前提：两个字符串中只有一个最大相同子串</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMaxSameString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span><span class="token class-name">String</span> str2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> str2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> maxStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            <span class="token class-name">String</span> minStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> minStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>y <span class="token operator">=</span> length <span class="token operator">-</span> i<span class="token punctuation">;</span>y <span class="token operator">&lt;=</span> length<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">,</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> subStr <span class="token operator">=</span> minStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>maxStr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> subStr<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果存在多个长度相同的最大相同子串</span>    <span class="token comment">// 此时先返回String[]，后面可以用集合中的ArrayList替换，较方便</span>    <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMaxSameString1</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> str2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">StringBuffer</span> sBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> maxString <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            <span class="token class-name">String</span> minString <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> str2 <span class="token operator">:</span> str1<span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> minString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> len <span class="token operator">-</span> i<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> subString <span class="token operator">=</span> minString<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxString<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        sBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>subString <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token comment">//                System.out.println(sBuffer);</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sBuffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> sBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">",$"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> split<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetMaxSameString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"abcwerthello1yuiodefabcdef"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"cvhello1bnmabcdef"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> maxSameStrings <span class="token operator">=</span> <span class="token function">getMaxSameString1</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>maxSameStrings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>注意以下情况</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDEADebug</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//StringBuilder与之类似</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"null"</span>        <span class="token class-name">StringBuffer</span> sb1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抛异常NullPointerException</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中JDK8新日期时间API</title>
      <link href="/posts/6117c966.html"/>
      <url>/posts/6117c966.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java的JDK8中新增了许多更加实用的时间API，之前的一些时间API逐渐被弃用。</p></blockquote><p>  JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：</p><blockquote><ul><li>可变性：像日期和时间这样的类应该是不可变的。</li><li>偏移性：Date中的年份是从1900开始的，而月份都从0开始。</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//偏移量，从1900年开始算，月份从0开始算</span>    <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Tue Feb 08 00:00:00 CST 3921</span><span class="token punctuation">&#125;</span></code></pre><blockquote><ul><li>格式化：SimpleDateFormat格式化只对Date有用，Calendar则不行。</li><li>此外，它们也不是线程安全的；不能处理<strong>闰秒</strong>等。</li></ul></blockquote><p>  Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的API。新的 java.time 中包含了所有关于<strong>本地日期（LocalDate）</strong>、<strong>本地时间（LocalTime）</strong>、<strong>本地日期时间（LocalDateTime）</strong>、<strong>时区（ZonedDateTime）</strong>和<strong>持续时间（Duration）</strong>的类。历史悠久的 <strong>Date 类新增了 toInstant() 方法</strong>，用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简化了日期时间和本地化的管理。<br><img src="/posts/6117c966/1.png" alt="新时间日期API"></p><h3 id="一、LocalDate、LocalTine、LocalDateTime"><a href="#一、LocalDate、LocalTine、LocalDateTime" class="headerlink" title="一、LocalDate、LocalTine、LocalDateTime"></a>一、LocalDate、LocalTine、LocalDateTime</h3><p>  <strong>LocalDate</strong>、<strong>LocalTime</strong>、<strong>LocalDateTime</strong> 类是其中较重要的几个类，它们的实例是不可变的对象，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</p><blockquote><ul><li>LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。</li><li>LocalTime表示一个时间，而不是日期。</li><li>LocalDateTime是用来表示日期和时间的，<strong>这是一个最常用的类之一</strong>。</li></ul></blockquote><p><strong>常用方法：</strong>(有点类似于Calendar)</p><blockquote><ul><li>now() &#x2F; now(ZoneId zone) 静态方法，根据当前时间创建对象&#x2F;指定时区的对象</li><li>of() 静态方法，根据指定日期&#x2F;时间创建对象</li><li>getDayOfMonth()&#x2F;getDayOfYear() 获得月份天数(1-31)&#x2F;获得年份天数(1-366)</li><li>getDayOfWeek() 获得星期几(返回一个 DayOfWeek 枚举值)</li><li>getMonth() 获得月份, 返回一个 Month 枚举值</li><li>getMonthValue() &#x2F; getYear() 获得月份(1-12) &#x2F; 获得年份</li><li>getHour()&#x2F;getMinute()&#x2F;getSecond() 获得当前对象对应的小时、分钟、秒</li><li>withDayOfMonth()&#x2F;withDayOfYear()&#x2F; withMonth()&#x2F;withYear() 将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</li><li>plusDays(), plusWeeks(), plusMonths(), plusYears(),plusHours() 向当前对象添加几天、几周、几个月、几年、几小时</li><li>minusMonths() &#x2F; minusWeeks()&#x2F; minusDays()&#x2F;minusYears()&#x2F;minusHours() 从当前对象减去几月、几周、几天、几年、几小时</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDK8DateTimeTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//now()：获取当前的日期、时间、日期+时间</span>        <span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalTime</span> localTime <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-01-08</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20:31:45.430</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-01-08T20:31:45.430</span>        <span class="token comment">//of()：设置指定的年、月、日、时、分、秒。没有偏移量</span>        <span class="token class-name">LocalDateTime</span> localDateTime1 <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2020-10-06T13:23:43</span>        <span class="token comment">//getXxx()：获取相关的属性</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//8</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//FRIDAY</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//JANUARY</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//31</span>        <span class="token comment">//体现不可变性</span>        <span class="token comment">//withXxx()：设置相关的属性</span>        <span class="token class-name">LocalDate</span> localDate1 <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-01-08</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-01-22</span>        <span class="token class-name">LocalDateTime</span> localDateTime2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-01-08T20:31:45.430</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-01-08T04:31:45.430</span>        <span class="token comment">//不可变性</span>        <span class="token comment">//plusXXX()：加</span>        <span class="token class-name">LocalDateTime</span> localDateTime3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-01-08T20:31:45.430</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-04-08T20:31:45.430</span>        <span class="token comment">//不可变性</span>        <span class="token comment">//minusXXX()：减</span>        <span class="token class-name">LocalDateTime</span> localDateTime4 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-01-08T20:31:45.430</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTime4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2021-01-02T20:31:45.430</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="二、瞬时-Instant"><a href="#二、瞬时-Instant" class="headerlink" title="二、瞬时 Instant"></a>二、瞬时 Instant</h3><p>  Instant 表示时间线上的一个瞬时点。 这可能被用来记录应用程序中的<strong>事件时间戳</strong>。<strong>Instant表示时间线上的一点，而不需要任何上下文信息</strong>，例如，时区。概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。因为java.time包是基于纳秒计算的，所以<strong>Instant的精度可以达到纳秒级</strong>。</p><p><strong>常用方法：</strong>(有点类似于Date)</p><blockquote><ul><li>now() 静态方法，返回默认UTC时区的Instant类的对象</li><li>ofEpochMilli(long epochMilli) 静态方法，返回在1970-01-01 00:00:00基础上加上指定毫秒数之后的Instant类的对象</li><li>atOffset(ZoneOffset offset) 结合即时的偏移来创建一个 OffsetDateTime</li><li>toEpochMilli() 返回1970-01-01 00:00:00到当前时间的毫秒数，即为时间戳</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDK8DateTimeTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//now():获取本初子午线对应的标准时间</span>        <span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18T07:29:41.719Z</span>        <span class="token comment">//添加时间的偏移量</span>        <span class="token class-name">OffsetDateTime</span> offsetDateTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atOffset</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>offsetDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18T15:32:50.611+08:00</span>        <span class="token comment">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---> Date类的getTime()</span>        <span class="token keyword">long</span> milli <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>milli<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  -->Date(long millis)</span>        <span class="token class-name">Instant</span> instant1 <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span><span class="token number">1550475314878L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instant1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="三、格式化与解析日期或时间"><a href="#三、格式化与解析日期或时间" class="headerlink" title="三、格式化与解析日期或时间"></a>三、格式化与解析日期或时间</h3><p>  java.time.format.DateTimeFormatter 类：该类提供了三种格式化方法：</p><blockquote><ul><li>预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</li><li>本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)</li><li>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</li></ul></blockquote><p><strong>常用方法：</strong>(类似于SimpleDateFormat)</p><blockquote><ul><li>ofPattern(String pattern) 静态方法，返回一个指定字符串格式的DateTimeFormatter</li><li>format(TemporalAccessor t) 格式化一个日期、时间，返回字符串</li><li>parse(CharSequence text) 将指定格式的字符序列解析为一个日期、时间</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDK8DateTimeTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span>        <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">;</span>        <span class="token comment">//格式化:日期-->字符串</span>        <span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18T15:42:18.797</span>        <span class="token comment">//解析：字符串 -->日期</span>        <span class="token class-name">TemporalAccessor</span> parse <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-02-18T15:42:18.797"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//方式二：</span>        <span class="token comment">//本地化相关的格式。如：ofLocalizedDateTime()</span>        <span class="token comment">//FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span>        <span class="token class-name">DateTimeFormatter</span> formatter1 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDateTime</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span>LONG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> formatter1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019年2月18日 下午03时47分16秒</span>        <span class="token comment">//本地化相关的格式。如：ofLocalizedDate()</span>        <span class="token comment">//FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span>        <span class="token class-name">DateTimeFormatter</span> formatter2 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofLocalizedDate</span><span class="token punctuation">(</span><span class="token class-name">FormatStyle</span><span class="token punctuation">.</span>MEDIUM<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> formatter2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-2-18</span>        <span class="token comment">//重点： 方式三：自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</span>        <span class="token class-name">DateTimeFormatter</span> formatter3 <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> str4 <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2019-02-18 03:52:09</span>        <span class="token comment">//解析</span>        <span class="token class-name">TemporalAccessor</span> accessor <span class="token operator">=</span> formatter3<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019-02-18 03:52:09"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="四、其他日期时间API"><a href="#四、其他日期时间API" class="headerlink" title="四、其他日期时间API"></a>四、其他日期时间API</h4><blockquote><ul><li>ZoneId：该类中包含了所有的时区信息，一个时区的ID，如 Europe&#x2F;Paris</li><li>ZonedDateTime：一个在ISO-8601日历系统时区的日期时间，如 2007-12-03T10:15:30+01:00 Europe&#x2F;Paris。其中每个时区都对应着ID，地区ID都为“{区域}&#x2F;{城市}”的格式，例如：Asia&#x2F;Shanghai等</li><li>Clock：使用时区提供对当前即时、日期和时间的访问的时钟。</li><li>持续时间：Duration，用于计算两个“时间”间隔</li><li>日期间隔：Period，用于计算两个“日期”间隔</li><li>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下一个工作日”等操作。</li><li>TemporalAdjusters : 该类通过静态方法(firstDayOfXxx()&#x2F;lastDayOfXxx()&#x2F;nextXxx())提供了大量的常用TemporalAdjuster 的实现。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中JDK8之前关于时间的API</title>
      <link href="/posts/67dfab4a.html"/>
      <url>/posts/67dfab4a.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java在JDK8之前就提供了一些较为常用的关于时间的API。</p></blockquote><h3 id="一、java-lang-System-类"><a href="#一、java-lang-System-类" class="headerlink" title="一、java.lang.System 类"></a>一、java.lang.System 类</h3><p>  System类提供的 public static long currentTimeMillis() 用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。此方法适于计算时间差。<br>  计算世界时间的主要标准有：</p><blockquote><p>UTC（Coordinated Universal Time）<br>GMT（Greenwich Mean Time）<br>CST（Central Standard Time）</p></blockquote><h3 id="二、java-util-Date-类"><a href="#二、java-util-Date-类" class="headerlink" title="二、java.util.Date 类"></a>二、java.util.Date 类</h3><p>  表示特定的瞬间，精确到毫秒</p><ol><li>构造器：<blockquote><ul><li>Date()：使用无参构造器创建的对象可以获取本地当前时间。即，创建一个对应当前时间的Date对象</li><li>Date(long date)：创建指定毫秒数的Date对象</li></ul></blockquote></li><li>常用方法<blockquote><ul><li>getTime():获取当前Date对象对应的毫秒数。（时间戳）</li><li>toString():把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准。即，显示当前的年、月、日、时、分、秒</li><li>其它很多方法都过时了。</li></ul></blockquote></li><li>java.sql.Date对应着数据库中的日期类型的变量。且java.sql.Date是java.util.Date的子类。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*Date类测试*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//构造器一：Date()创建一个对应当前时间的Date对象</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Fri Jan 08 15:52:29 CST 2021</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前Date对象对应的毫秒数。（时间戳）</span>        <span class="token comment">//构造器二：创建指定毫秒数的Date对象</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">155030620410L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Sat Nov 30 16:03:40 CST 1974</span>        <span class="token comment">//创建java.sql.Date对象</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token number">35235325345L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1971-02-13</span>        <span class="token comment">//java.util.Date对象 与 java.sql.Date对象 的互转</span>        <span class="token class-name">Date</span> date4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date4<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token number">73193271938712L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多态</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*System.currentTimeMillis()测试*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。常常称其为 时间戳</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="三、java-text-SimpleDateFormat-类"><a href="#三、java-text-SimpleDateFormat-类" class="headerlink" title="三、java.text.SimpleDateFormat 类"></a>三、java.text.SimpleDateFormat 类</h3><p>  Date类的API不易于国际化，大部分被废弃了，java.text.SimpleDateFormat 类是一个不与语言环境有关的方式来<strong>格式化和解析日期</strong>的具体类。SimpleDateFormat是对<strong>日期Date类的格式化和解析</strong></p><ol><li>它允许进行格式化：日期–&gt;字符串、解析：字符串–&gt;日期</li><li>格式化：<blockquote><ul><li>SimpleDateFormat() ：默认的模式和语言环境创建对象</li><li>public SimpleDateFormat(String pattern)：该构造方法可以用参数pattern指定的格式创建一个对象，该对象调用：public String format(Date date)：方法格式化时间对象date</li></ul></blockquote></li><li>解析：<blockquote><ul><li>public Date parse(String source)：从给定字符串的开始解析文本，以生成一个日期。</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//实例化SimpleDateFomat：使用默认构造器</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化：日期 --> 字符串</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解析：字符串 --> 日期</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"2021-1-8 下午19:16"</span><span class="token punctuation">;</span><span class="token comment">//要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现)，否则，抛异常</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//*************按照指定的方式格式化和解析：调用带参的构造器*****************</span>        <span class="token class-name">SimpleDateFormat</span> sdf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//格式化</span>        <span class="token class-name">String</span> format1 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//解析：要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现)，否则，抛异常</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> sdf1<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>format1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 练习一：字符串"2020-09-08"转换为java.sql.Date     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> birth <span class="token operator">=</span> <span class="token string">"2020-09-08"</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>birth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> birthDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>birthDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 练习二："三天打渔两天晒网"   1990-01-01  xxxx-xx-xx 打渔？晒网？     * 举例：2020-09-08 ？ 总天数     * 总天数 % 5 == 1,2,3 : 打渔     * 总天数 % 5 == 4,0 : 晒网     * 总天数的计算？     * 方式一：( date2.getTime() - date1.getTime()) / (1000 * 60 * 60 * 24) + 1     * 方式二：1990-01-01  --> 2019-12-31  +  2020-01-01 -->2020-09-08     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> startDay <span class="token operator">=</span> <span class="token string">"1990-01-01"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> endDay <span class="token operator">=</span> <span class="token string">"2020-01-08"</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>startDay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>endDay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> day <span class="token operator">=</span> <span class="token punctuation">(</span>date2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token punctuation">(</span>day <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"打渔"</span> <span class="token operator">:</span> <span class="token string">"嗮网"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="四、java-util-Calendar-日历-类"><a href="#四、java-util-Calendar-日历-类" class="headerlink" title="四、java.util.Calendar(日历)类"></a>四、java.util.Calendar(日历)类</h3><p>  Calendar是一个<strong>抽象基类</strong>，主用用于完成日期字段之间相互操作的功能。</p><ol><li>获取Calendar实例的方法<blockquote><ul><li>使用Calendar.getInstance()方法</li><li>调用它的子类GregorianCalendar的构造器。</li></ul></blockquote></li><li>一个Calendar的实例是系统时间的抽象表示，通过get(int field)方法来取得想要的时间信息。比如YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、MINUTE、SECOND<blockquote><ul><li>public void set(int field,int value)</li><li>public void add(int field,int amount)</li><li>public final Date getTime()</li><li>public final void setTime(Date date)</li></ul></blockquote></li><li>注意:<blockquote><ul><li>获取月份时：一月是0，二月是1，以此类推，12月是11</li><li>获取星期时：周日是1，周二是2 ， 。。。。周六是7</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 实例化</span>        <span class="token comment">//方式一：创建其子类 GregorianCalendar 的对象</span>        <span class="token comment">//方式二：调用其静态方法getInstance()</span>        <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class java.util.GregorianCalendar</span>        <span class="token comment">//2. 常用方法</span>        <span class="token comment">//get()</span>        <span class="token keyword">int</span> days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_YEAR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//set()</span>        <span class="token comment">//calendar可变性</span>        calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值为void，改变本身的值</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//add()</span>        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可为负数</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getTime():日历类---> Date</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//setTime():Date ---> 日历类</span>        <span class="token class-name">Date</span> date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的StringBuffer和StringBuilder介绍</title>
      <link href="/posts/d2a91333.html"/>
      <url>/posts/d2a91333.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中除了String类与字符串相关外，还有StringBuffer和StringBiulder也都要与字符串操作有关。String是<strong>不可变字符序列</strong>，StringBuffer是<strong>可变字符序列</strong>。</p></blockquote><h3 id="一、StringBuffer-类"><a href="#一、StringBuffer-类" class="headerlink" title="一、StringBuffer 类"></a>一、StringBuffer 类</h3><p>  java.lang.StringBuffer代表<strong>可变的字符序列</strong>，在JDK1.0中声明，可以对字符串内容进行增删，此时不会产生新的对象。StringBuffer其本身继承于AbstractStringBiulder抽象类，且是一个被声明为final的类，不可再被继承。其中的很多方法与String相同。<br><img src="/posts/d2a91333/1.png" alt="AbstractStringBiulder抽象类的声明"><br><img src="/posts/d2a91333/2.png" alt="StringBuffer类的声明"></p><h4 id="1、StringBuffer类不同于String，其对象必须使用构造器生成。有三个构造器："><a href="#1、StringBuffer类不同于String，其对象必须使用构造器生成。有三个构造器：" class="headerlink" title="1、StringBuffer类不同于String，其对象必须使用构造器生成。有三个构造器："></a>1、StringBuffer类不同于String，其对象必须使用构造器生成。有三个构造器：</h4><ol><li>StringBuffer()：初始容量为16的字符串缓冲区</li><li>StringBuffer(int size)：构造指定容量的字符串缓冲区</li><li>StringBuffer(String str)：将内容初始化为指定字符串内容</li></ol><h4 id="2、StringBuffer类中的常用方法"><a href="#2、StringBuffer类中的常用方法" class="headerlink" title="2、StringBuffer类中的常用方法"></a>2、StringBuffer类中的常用方法</h4><ol><li><p>StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</p></li><li><p>StringBuffer delete(int start, int end)：删除指定位置的内容</p></li><li><p>StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</p></li><li><p>StringBuffer insert(int offset, xxx)：在指定位置插入xxx</p></li><li><p>StringBuffer reverse()：把当前字符序列逆转<br><strong>说明：</strong></p><blockquote><ul><li>当append和insert时，如果原来value数组长度不够，可扩容。</li><li>StringBuffer中的大部分方法都是同步方法synchronized，所以StringBuffer是线程安全的。</li><li>如上这些方法支持方法链操作。</li><li>方法链的原理：<img src="/posts/d2a91333/3.png" alt="方法链"><br><img src="/posts/d2a91333/4.png"></li></ul></blockquote></li><li><p>此外，还定义了如下的方法：</p><blockquote><ul><li>public int indexOf(String str)</li><li>public String substring(int start,int end)</li><li>public int length()</li><li>public char charAt(int n )</li><li>public void setCharAt(int n ,char ch)</li></ul></blockquote></li></ol><p>7.** 总结：**</p><blockquote><p>增：append(xxx)<br>删：delete(int start,int end)<br>改：setCharAt(int n ,char ch) &#x2F; replace(int start, int end, String str)<br>查：charAt(int n )<br>插：insert(int offset, xxx)<br>长度：length();<br>遍历：for() + charAt() &#x2F; toString()</p></blockquote><h3 id="二、StringBiulder-类"><a href="#二、StringBiulder-类" class="headerlink" title="二、StringBiulder 类"></a>二、StringBiulder 类</h3><p>  StringBuilder 和 StringBuffer 非常类似，均代表<strong>可变的字符序列</strong>，而且提供相关功能的方法也一样。同样StringBuilder其本身继承于AbstractStringBiulder抽象类，且是一个被声明为final的类，不可再被继承。<br><img src="/posts/d2a91333/5.png" alt="方法链"></p><h3 id="三、String、StringBuffer、StringBiulder三者的异同"><a href="#三、String、StringBuffer、StringBiulder三者的异同" class="headerlink" title="三、String、StringBuffer、StringBiulder三者的异同"></a>三、String、StringBuffer、StringBiulder三者的异同</h3><ol><li><p>String：不可变的字符序列；底层使用final char[]存储</p></li><li><p>StringBuffer：可变的字符序列；<strong>线程安全的</strong>，效率低；底层使用char[]存储</p></li><li><p>StringBuilder：可变的字符序列；jdk5.0新增的，<strong>线程不安全的</strong>，效率高；底层使用char[]存储</p></li><li><p>源码分析：</p><blockquote><p>String str &#x3D; new String();&#x2F;&#x2F;char[] value &#x3D; new char[0];<br>String str1 &#x3D; new String(“abc”);&#x2F;&#x2F;char[] value &#x3D; new char[]{‘a’,’b’,’c’};</p><p>StringBuffer sb1 &#x3D; new StringBuffer();&#x2F;&#x2F;char[] value &#x3D; new char[16];底层创建了一个长度是16的数组。<br>System.out.println(sb1.length());&#x2F;&#x2F;0，return count;<br>sb1.append(‘a’);&#x2F;&#x2F;value[0] &#x3D; ‘a’;<br>sb1.append(‘b’);&#x2F;&#x2F;value[1] &#x3D; ‘b’;</p><p>StringBuffer sb2 &#x3D; new StringBuffer(“abc”);&#x2F;&#x2F;char[] value &#x3D; new char[“abc”.length() + 16];<br>System.out.println(sb2.length());&#x2F;&#x2F;3，return count;</p></blockquote></li><li><p><strong>说明：</strong></p><blockquote><ul><li>扩容问题:如果要添加的数据底层数组盛不下了，那就需要扩容底层的数组。默认情况下，扩容为原来容量的2倍+2，同时将原有数组中的元素复制到新的数组中。</li><li>指导意义：开发中建议大家使用：StringBuffer(int capacity) 或 StringBuilder(int capacity)</li></ul></blockquote></li></ol><h3 id="四、String、StringBuffer、StringBiulder三者的效率对比"><a href="#四、String、StringBuffer、StringBiulder三者的效率对比" class="headerlink" title="四、String、StringBuffer、StringBiulder三者的效率对比"></a>四、String、StringBuffer、StringBiulder三者的效率对比</h3><p><strong>从高到低排列：StringBuilder(非线程安全) &gt; StringBuffer(线程安全) &gt; String</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JUnitTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//初始设置</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//StringBuffer</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuffer的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">////StringBuilder</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StringBuilder的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//String</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            text <span class="token operator">=</span> text <span class="token operator">+</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String的执行时间："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*StringBuffer的执行时间：4StringBuilder的执行时间：2String的执行时间：724*/</span></code></pre><h3 id="五、String-与-StringBuffer和StringBuilder的转转"><a href="#五、String-与-StringBuffer和StringBuilder的转转" class="headerlink" title="五、String 与 StringBuffer和StringBuilder的转转"></a>五、String 与 StringBuffer和StringBuilder的转转</h3><ol><li>String –&gt; StringBuffer &#x2F; StringBuilder ：调用StringBuffer或StringBuilder的构造器</li><li>StringBuffer &#x2F; StringBuilder –&gt; String ：①调用String的构造器 ②调用StringBuffer或StringBuilder的toString()方法。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的String类介绍</title>
      <link href="/posts/ce2b6e8b.html"/>
      <url>/posts/ce2b6e8b.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中常用的与字符串相关的类有String，StringBuffer，StringBuilder。</p></blockquote><h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><p>  String是一个final类，不能再被继承。代表不可变字符序列。字符串是常量，用双引号引起来表示，它们的值在创建之后不能更改。String对象的字符内容是存储在一个**常量字符数组value[]**中的。<br><img src="/posts/ce2b6e8b/1.png" alt="java源码中String类的声明"></p><ol><li>String被声明为final的，不能被继承</li><li>String实现了Serializable接口：表示字符串是支持序列化的</li><li>String实现了Comparable接口：表示String可以比较大小</li><li>String内部定义了final char[] value 用于存储字符串数据。该数组不能被重新赋值。</li><li>String代表不可变的字符序列。简称：<strong>不可变性</strong><blockquote><p><strong>体现:</strong></p><ul><li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li><li>当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//字面量的定义方式</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true，比较s1和s2的地址值，地址竟然相同</span>    s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//当对字符串重新赋值时，需要重新指定内存区域赋值，不能使用原有的value进行赋值。</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    s3 <span class="token operator">+=</span> <span class="token string">"def"</span><span class="token punctuation">;</span><span class="token comment">//当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcdef</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token comment">//当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</span>    <span class="token class-name">String</span> s5 <span class="token operator">=</span> s4<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mbc</span><span class="token punctuation">&#125;</span></code></pre><ol start="6"><li>通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在JVM方法区的<strong>字符串常量池中</strong>。</li><li><strong>字符串常量池中是不会存储相同内容的字符串的</strong>。</li></ol><h4 id="2、关于字符串的不同拼接操作的对比"><a href="#2、关于字符串的不同拼接操作的对比" class="headerlink" title="2、关于字符串的不同拼接操作的对比"></a>2、关于字符串的不同拼接操作的对比</h4><ol><li>常量与常量的拼接结果在常量池中。且常量池中不会存在相同内容的常量。</li><li>只要其中有一个是变量，结果就在堆中。</li><li>如果拼接的结果调用intern()方法，返回值就在常量池中<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token class-name">String</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">String</span> s8 <span class="token operator">=</span> s6<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回值得到的s8使用的是常量池中已经存在的“javaEEhadoop”</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> s2 <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//s4:常量</span>    <span class="token class-name">String</span> s5 <span class="token operator">=</span> s4 <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span></code></pre><img src="/posts/ce2b6e8b/2.png" alt="内存解析"></li></ol><p><img src="/posts/ce2b6e8b/3.png" alt="内存解析"></p><h4 id="3、String的实例化方式"><a href="#3、String的实例化方式" class="headerlink" title="3、String的实例化方式"></a>3、String的实例化方式</h4><ol><li>方式一：通过字面量定义的方式</li><li>方式二：通过new + 构造器的方式<br>  面试题：String s &#x3D; new String(“abc”);方式创建对象，在内存中创建了几个对象？两个：一个是堆空间中new结构，另一个是char[]对应的常量池中的数据：”abc”<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//通过字面量定义的方式：此时的s1和s2的数据javaEE声明在方法区中的字符串常量池中。</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    <span class="token comment">//通过new + 构造器的方式：此时的s3和s4保存的地址值，是数据在堆空间中开辟空间以后对应的地址值。</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"javaEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"javaEE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//内部类</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name <span class="token operator">==</span> p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span></code></pre><img src="/posts/ce2b6e8b/4.png" alt="内存解析"></li></ol><h4 id="4、String中的常用方法总结"><a href="#4、String中的常用方法总结" class="headerlink" title="4、String中的常用方法总结"></a>4、String中的常用方法总结</h4><ol><li>int length()：返回字符串的长度：return value.length</li></ol><hr><ol start="2"><li>char charAt(int index)： 返回某索引处的字符return value[index]</li></ol><hr><ol start="3"><li>boolean isEmpty()：判断是否是空字符串：return value.length &#x3D;&#x3D; 0</li></ol><hr><ol start="4"><li>String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写</li><li>String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写<blockquote><p>转换后的值用新变量接受，调用者本身的值不变。（不可变性）</p></blockquote></li></ol><hr><ol start="6"><li>String trim()：返回字符串的副本，忽略前导空白和尾部空白，中间的空格不会忽略。</li></ol><hr><ol start="7"><li>boolean equals(Object obj)：比较字符串的内容是否相同</li><li>boolean equalsIgnoreCase(String anotherString)：与equals方法类似，但忽略大小写进行比较</li></ol><hr><ol start="9"><li>String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</li></ol><hr><ol start="10"><li>int compareTo(String anotherString)：比较两个字符串的大小</li></ol><hr><ol start="11"><li>String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</li><li>String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</li></ol><hr><ol start="13"><li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</li><li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</li><li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li></ol><hr><ol start="16"><li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</li></ol><hr><ol start="17"><li>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</li><li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引处开始向后寻找。但返回值还是相对于首字母开始，并不是从指定索引处开始</li><li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</li><li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索<blockquote><p><strong>注：</strong>indexOf和lastIndexOf方法如果未找到都是返回-1<br>什么情况下，indexOf(str)和lastIndexOf(str)返回值相同？①：存在唯一的一个str。②：不存在str</p></blockquote></li></ol><hr><ol start="21"><li>String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</li><li>String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</li><li>String replaceAll(String regex, String replacement)：使用给定replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</li><li>String replaceFirst(String regex, String replacement)：使用给定的replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</li></ol><hr><ol start="25"><li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</li></ol><hr><ol start="26"><li>String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</li><li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</li></ol><h4 id="5、String与基本数据类型、包装类之间的转换"><a href="#5、String与基本数据类型、包装类之间的转换" class="headerlink" title="5、String与基本数据类型、包装类之间的转换"></a>5、String与基本数据类型、包装类之间的转换</h4><ol><li><p>String –&gt; 基本数据类型、包装类：</p><blockquote><ul><li>调用包装类的静态方法：包装类.parseXxx(str)</li><li>Integer包装类的public static int parseInt(String s)：可以将由“数字”字符组成的字符串转换为整型。</li><li>类似地，使用java.lang包中的Byte、Short、Long、Float、Double类调相应的类方法可以将由“数字”字符组成的字符串，转化为相应的基本数据类型。</li></ul></blockquote></li><li><p>基本数据类型、包装类 –&gt; String：</p><blockquote><ul><li>调用String重载的valueOf(xxx)。或者直接 <code>xxx + &quot;&quot;</code></li><li>调用String类的public String valueOf(int n)可将int型转换为字符串</li><li>相应的valueOf(byte b)、valueOf(long l)、valueOf(float f)、valueOf(double)、valueOf(boolean b)可由参数的相应类型到字符串的转换</li></ul></blockquote></li></ol><h4 id="6、String-与-字符数组char-之间的转换"><a href="#6、String-与-字符数组char-之间的转换" class="headerlink" title="6、String 与 字符数组char[] 之间的转换"></a>6、String 与 字符数组char[] 之间的转换</h4><ol><li><p>String –&gt; char[]：调用String的toCharArray()</p><blockquote><ul><li>public char[] toCharArray()：将字符串中的全部字符存放在一个字符数组中的方法</li><li>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)：提供了将指定索引范围内的字符串存放到数组中</li></ul></blockquote></li><li><p>char[] –&gt; String：调用String的构造器</p><blockquote><p>String 类的构造器：String(char[]) 和 String(char[]，int offset，int length) 分别用字符数组中的全部字符和部分字符创建字符串对象。</p></blockquote></li></ol><h4 id="7、String-与-字节数组byte-之间的转换"><a href="#7、String-与-字节数组byte-之间的转换" class="headerlink" title="7、String 与 字节数组byte[] 之间的转换"></a>7、String 与 字节数组byte[] 之间的转换</h4><ol><li><p>编码：String –&gt; byte[]：字符串到字节，调用String的getBytes()</p><blockquote><ul><li>public byte[] getBytes() ：使用平台的默认字符集将此 String 编码为byte 序列，并将结果存储到一个新的 byte 数组中。</li><li>public byte[] getBytes(String charsetName) ：使用指定的字符集将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</li></ul></blockquote></li><li><p>解码：byte[] –&gt; String：字节到字符串，调用String的构造器</p><blockquote><ul><li>String(byte[])：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。</li><li>String(byte[]，int offset，int length) ：用指定的字节数组的一部分，即从数组起始位置offset开始取length个字节构造一个字符串对象。</li></ul></blockquote></li><li><p>说明：要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"abc123中国"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用默认的字符集，进行编码。</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> gbks <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用gbk字符集进行编码。</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用默认的字符集，进行解码。</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出现乱码。原因：编码集和解码集不一致！</span>    <span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>gbks<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没有出现乱码。原因：编码集和解码集一致！</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中线程的通信</title>
      <link href="/posts/bd80f5e6.html"/>
      <url>/posts/bd80f5e6.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>多线程应用中通常存在线程间的交流问题。java中线程的通信主要体现在几个方法的使用上。</p></blockquote><h3 id="一、涉及到三个方法"><a href="#一、涉及到三个方法" class="headerlink" title="一、涉及到三个方法:"></a>一、涉及到三个方法:</h3><ol><li><p>wait()</p><blockquote><ul><li>一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器**(注意：这点与sleep()不同，sleep()让线程进入阻塞状态但是不释放锁，并且sleep()是Thread类中的静态方法，而wait()是Object类中的final方法)**。令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有权后才能继续执行。</li><li>在当前线程中调用方法： 对象名.wait()</li><li>使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify(或notifyAll) 为止。</li><li><strong>调用方法的必要条件：</strong>当前线程必须具有对该对象的监控权（加锁）</li><li>调用此方法后，当前线程将释放对象监控权 ，然后进入等待</li><li>在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。</li></ul></blockquote></li><li><p>notify()</p><blockquote><ul><li>一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。即，唤醒正在排队等待同步资源的线程中优先级最高者结束等待。</li><li>在当前线程中调用方法： 对象名.notify()</li><li><strong>功能：</strong>唤醒等待该对象监控权的一个&#x2F;所有线程。</li><li><strong>调用方法的必要条件：</strong>当前线程必须具有对该对象的监控权（加锁）</li></ul></blockquote></li><li><p>notifyAll()</p><blockquote><ul><li>一旦执行此方法，就会唤醒所有被wait的线程。即，唤醒正在排队等待资源的所有线程结束等待</li><li>在当前线程中调用方法： 对象名.notify()</li><li><strong>功能：</strong>唤醒等待该对象监控权的一个&#x2F;所有线程。</li><li><strong>调用方法的必要条件：</strong>当前线程必须具有对该对象的监控权（加锁）</li></ul></blockquote></li></ol><hr><h3 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明:"></a>二、说明:</h3><ol><li>wait()，notify()，notifyAll()三个方法必须使用在cynchronized代码块或synchronized方法中。不能再Lock中使用，言外之意Lock中实现线程的通信不是同过wait()，notify()，notifyAll()来实现的。</li><li>wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。否则，会出现IllegalMonitorStateException异常</li><li>因为这三个方法必须由锁对象调用，而任意对象都可以作为synchronized的同步锁，因此这三个方法只能在Object类中声明。wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</li></ol><h3 id="三、sleep-和wait-的异同（经典面试题"><a href="#三、sleep-和wait-的异同（经典面试题" class="headerlink" title="三、sleep()和wait()的异同（经典面试题"></a>三、sleep()和wait()的异同（经典面试题</h3><ol><li>相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。</li><li>不同点：<blockquote><ul><li>1）两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li><li>2）调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中调用</li><li>3）<strong>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</strong></li></ul></blockquote></li></ol><h3 id="四、线程通信的举例："><a href="#四、线程通信的举例：" class="headerlink" title="四、线程通信的举例："></a>四、线程通信的举例：</h3><ol><li>使用两个线程打印 1-100。线程1，线程2，交替打印</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//唤醒被wait的一个优先级最高的线程结束等待</span>                <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this.notify()</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//使得调用如下wait()方法的线程进入阻塞状态，并且会释放同步监视器（同步锁），这一点与sleep()不同</span>                        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this.wait()</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommunicationTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Number</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>生产者&#x2F;消费者问题<br>  生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</li></ol><p><strong>分析：</strong></p><blockquote><ul><li>是否是多线程问题？是，生产者线程，消费者线程</li><li>是否有共享数据？是，店员（或产品）</li><li>如何解决线程的安全问题？同步机制，有三种方法。同步代码块，同步方法，Lock锁</li><li>是否涉及线程的通信？是</li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*店员*/</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> productCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//生产产品</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">produceProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>productCount <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            productCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：开始生产第"</span> <span class="token operator">+</span> productCount <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//生产者生产出了产品就可以通知等待的消费者购买</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this.notifyAll()</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//等待</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this.wait()</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//消费产品</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>productCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：开始消费第"</span> <span class="token operator">+</span> productCount <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            productCount<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment">//消费者消费了一个产品就能通知等待的生产者继续生产</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this.notifyAll()</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//等待</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this.wait()</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*生产者*/</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Clerk</span> clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">Clerk</span> clerk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：开始生产产品......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            clerk<span class="token punctuation">.</span><span class="token function">produceProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*消费者*/</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Clerk</span> clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">Clerk</span> clerk<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：开始消费产品......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            clerk<span class="token punctuation">.</span><span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Clerk</span> clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//店员，被生产者和消费者共用</span>        <span class="token class-name">Producer</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Consumer</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Consumer</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费者2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中使用Lock锁解决线程安全问题</title>
      <link href="/posts/3dace228.html"/>
      <url>/posts/3dace228.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中的同步机制除了“同步代码块”和“同步方法”外，还提供了更强大的线程同步机制。<strong>通过显式定义同步锁对象来实现同步，同步锁使用Lock对象充当。</strong></p></blockquote><h3 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock 锁"></a>Lock 锁</h3><ol><li>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</li><li>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</li><li>ReentrantLock 类实现了 Lock ，它拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">//1. 实例化ReentrantLock</span>    <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果是采用继承Thread类的方式，该变量需声明为static，保证所有对象使用同一把锁</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token comment">//2. 调用lock()加锁</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//强行休眠，提高出错概率，便于观看</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">String</span> threadName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">"：售票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//3. 调用unlock()解锁</span>                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="synchronized-与-Lock-的对比"><a href="#synchronized-与-Lock-的对比" class="headerlink" title="synchronized 与 Lock 的对比"></a>synchronized 与 Lock 的对比</h3><ol><li>相同：二者都是使用同步机制来解决线程安全问题</li><li>不同：<blockquote><ul><li>Lock 是显式锁（手动开启lock()和关闭unlock()，千万别忘关闭锁），synchronized是隐式锁，在执行完相应的同步代码以后，自动的释放同步监视器（锁）。</li><li>Lock 只有代码块锁，sychronized有代码块锁和方法锁。</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）。</li></ul></blockquote></li></ol><h3 id="优先使用顺序"><a href="#优先使用顺序" class="headerlink" title="优先使用顺序"></a>优先使用顺序</h3><p>  Lock -&gt; 同步代码块（已经进入了方法体，分配了相应资源） -&gt; 同步方法（在方法体之外）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中线程的死锁问题</title>
      <link href="/posts/ef3639a3.html"/>
      <url>/posts/ef3639a3.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java开发中当某些逻辑设计得不合理时，将会出现“线程死锁”的问题。</p></blockquote><h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><ol><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。当我们使用Java中的同步机制时要<strong>避免出现死锁</strong>。</li></ol><p><strong>线程死锁演示 1：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuffer</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//强行休眠，提高出现死锁的概率，达到演示效果</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//强行睡眠，提高出现死锁的概率，达到演示效果</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>  第一个线程握住<strong>s1</strong>锁，等待其他线程释放<strong>s2</strong>锁；第二个线程握住<strong>s2</strong>锁，等待其他线程释放<strong>s1</strong>锁。两个线程都在等待对方放弃自己需要的同步资源，出现死锁。</p><p><strong>线程死锁演示 2：</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//非静态方法同步监视器为this：A类的对象a</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 进入了A实例的foo()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//强行休眠，提高出现死锁的概率，达到演示效果</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 企图调用B实例的last()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//非静态方法同步监视器为this：A类的对象a</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了A类的last()方法内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//非静态方法同步监视器为this：B类的对象b</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 进入了B实例的bar()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//强行休眠，提高出现死锁的概率，达到演示效果</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 企图调用A实例的last()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//非静态方法同步监视器为this：B类的对象b</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了B类的last()方法内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用a对象的foo()方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"副线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用b对象的bar()方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"副线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DeadLock</span> dl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dl<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>减少死锁的出现，自己体会</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//非静态方法同步监视器为this：A类的对象a</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 进入了A实例的foo()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 企图调用B实例的last()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//非静态方法同步监视器为this：A类的对象a</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了A类的last()方法内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//非静态方法同步监视器为this：B类的对象b</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 进入了B实例的bar()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 企图调用A实例的last()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//非静态方法同步监视器为this：B类的对象b</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进入了B类的last()方法内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用a对象的foo()方法</span>        a<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"副线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用b对象的bar()方法</span>        b<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"副线程结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DeadLock</span> dl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//增加"不出现死锁"的概率</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主线程休眠</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        dl<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//可能的输出</span><span class="token comment">/**当前线程名：副线程 进入了B实例的bar()方法当前线程名：副线程 企图调用A实例的last()方法进入了A类的last()方法内部副线程结束当前线程名：主线程 进入了A实例的foo()方法当前线程名：主线程 企图调用B实例的last()方法进入了B类的last()方法内部主线程结束**/</span></code></pre><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>专门的算法、原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中实现线程安全的单例模式</title>
      <link href="/posts/41a9462d.html"/>
      <url>/posts/41a9462d.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>使用java中的同步机制可以将单例模式中的“懒汉式”改写为线程安全的。而“饿汉式”单例模型本身就是线程安全的。</p></blockquote><h3 id="本身就是线程安全的“饿汉式”单例模式"><a href="#本身就是线程安全的“饿汉式”单例模式" class="headerlink" title="本身就是线程安全的“饿汉式”单例模式"></a>本身就是线程安全的“饿汉式”单例模式</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.私有化类的构造器</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//2.内部创建该类的对象</span>    <span class="token comment">//4.要求此对象也必须声明为静态的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.提供公共的静态方法，返回类的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="非线程安全的“懒汉式”单例模式"><a href="#非线程安全的“懒汉式”单例模式" class="headerlink" title="非线程安全的“懒汉式”单例模式"></a>非线程安全的“懒汉式”单例模式</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.私有化类的构造器</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//2.声明当前类对象，没有初始化</span>    <span class="token comment">//4.此对象也必须声明为static的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//3.声明public、static的返回当前类对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="利用同步机制将“懒汉式”单例模式改写成线程安全的"><a href="#利用同步机制将“懒汉式”单例模式改写成线程安全的" class="headerlink" title="利用同步机制将“懒汉式”单例模式改写成线程安全的"></a>利用同步机制将“懒汉式”单例模式改写成线程安全的</h3><ol><li>同步代码块，显式给出同步监视器（同步锁）</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*方式一：效率稍差        synchronized (Bank.class) &#123;            if (instance == null) &#123;                instance = new Bank();            &#125;            return instance;        &#125;        */</span>        <span class="token comment">//方式二：效率更好</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>同步方法</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//此时该同步方法的同步监视器（锁）为该类本身</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的线程安全问题及解决方案</title>
      <link href="/posts/fa2df08c.html"/>
      <url>/posts/fa2df08c.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><ul><li>多个线程执行的不确定性可能会引起执行结果的不稳定。多个线程对共享数据的操作可能会破坏数据的完整性。</li></ul></blockquote><blockquote><ul><li>当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。</li></ul></blockquote><p>  三个窗口同时卖票，以下实现可能存在线程的安全问题</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//共享同一个Window</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//共享同一个Window</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//共享同一个Window</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>  卖票过程中，出现了重票、错票（出现了线程的安全问题）。<strong>原因：</strong>当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。<strong>解决办法：</strong>当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</p><h3 id="一、java中通过同步机制，来解决线程的安全问题"><a href="#一、java中通过同步机制，来解决线程的安全问题" class="headerlink" title="一、java中通过同步机制，来解决线程的安全问题"></a>一、java中通过同步机制，来解决线程的安全问题</h3><p>  Java对于多线程的安全问题提供了专业的解决方式，同步机制。具体分为以下两种方式：</p><h4 id="1、同步代码块"><a href="#1、同步代码块" class="headerlink" title="1、同步代码块"></a>1、同步代码块</h4><blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">></span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//需要被同步的代码</span><span class="token operator">></span><span class="token punctuation">&#125;</span></code></pre></blockquote><ol><li>操作共享数据的代码，即为需要被同步的代码。不能包含代码多了，也不能包含代码少了。</li><li><strong>共享数据：</strong>多个线程共同操作的变量。比如：ticket就是共享数据。多线程使用同一个对象的属性，多线程使用同类不同对象的静态属性，都属于共享数据。</li><li>同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。但是要求操作同一个共享数据的<strong>多个线程必须要共用同一把锁</strong>。</li><li><strong>补充：</strong>在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。（自己慢慢体会吧）</li><li><strong>补充：</strong>在继承Thread类创建多线程的方式中，慎用this充当同步监视器，可考虑使用当前类充当同步监视器。</li></ol><h4 id="2、同步方法"><a href="#2、同步方法" class="headerlink" title="2、同步方法"></a>2、同步方法</h4><p>  如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明为同步的。在方法的返回值类型前添加<strong>synchronized</strong>关键字。</p><ol><li>同步方法仍然涉及到同步监视器，只是不需要我们显式的声明。</li><li>非静态的同步方法，同步监视器是：this</li><li>静态的同步方法，同步监视器是：当前类本身</li></ol><h3 id="二、同步机制中的锁"><a href="#二、同步机制中的锁" class="headerlink" title="二、同步机制中的锁"></a>二、同步机制中的锁</h3><ol><li>任意对象都可以作为同步锁。所有对象都自动含有单一的锁（监视器）。</li><li><strong>同步方法的锁：</strong>静态方法（类名.class）、非静态方法（this）</li><li><strong>同步代码块的锁：</strong>自己指定，很多时候也是指定为this或类名.class</li><li>必须确保使用同一个资源的<strong>多个线程共用一把锁</strong>，这个非常重要，否则就无法保证共享资源的安全</li><li>一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方法共用同一把锁（this），同步代码块（指定需谨慎）</li></ol><h3 id="三、释放锁的操作"><a href="#三、释放锁的操作" class="headerlink" title="三、释放锁的操作"></a>三、释放锁的操作</h3><ol><li>当前线程的同步方法、同步代码块执行结束。</li><li>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法的继续执行。</li><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致异常结束。</li><li>当前线程在同步代码块、同步方法中执行了线程对象的<strong>wait()方法</strong>，当前线程暂停，并释放锁。</li></ol><h3 id="四、不会释放锁的操作"><a href="#四、不会释放锁的操作" class="headerlink" title="四、不会释放锁的操作"></a>四、不会释放锁的操作</h3><ol><li>线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行，但不会释放同步锁。</li><li>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。<strong>应尽量避免使用suspend()和resume()来控制线程</strong></li></ol><h3 id="五、同步机制的优缺点"><a href="#五、同步机制的优缺点" class="headerlink" title="五、同步机制的优缺点"></a>五、同步机制的优缺点</h3><ol><li><p>优点</p><blockquote><p>同步的方式，解决了线程的安全问题。</p></blockquote></li><li><p>缺点</p><blockquote><p>操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低。</p></blockquote></li></ol><h3 id="六、线程安全的多窗口卖票"><a href="#六、线程安全的多窗口卖票" class="headerlink" title="六、线程安全的多窗口卖票"></a>六、线程安全的多窗口卖票</h3><ol><li>使用<strong>“同步代码块”</strong>的方式解决<strong>“实现Runnable接口”</strong>的线程安全问题。同步代码块需要自己显式地指定同步监视器。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以用来充当同步监视器，即，锁。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//此时的this是唯一的Window1的对象   //方式二：synchronized (obj) &#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：买票,票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window1</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>使用<strong>“同步代码块”</strong>的方式解决<strong>“继承Thread类”</strong>的线程安全问题。同步代码块需要自己显式地指定同步监视器。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token class-name">Window2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//注意：java中类其实也是对象 Class cls = Window2.class;</span>            <span class="token comment">//synchronized(obj)&#123;//使用静态变量充当同步锁也是可以的</span>            <span class="token comment">//synchronized (this)&#123;//错误的方式：因为this代表着t1,t2,t3三个对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：买票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window2</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window2</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window2</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>使用<strong>“同步方法”</strong>的方式解决<strong>“实现Runnable接口”</strong>的线程安全问题。同步方法不需要自己显式地指定同步监视器。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window3</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//同步监视器：this</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ticket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window3</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>使用<strong>“同步方法”</strong>的方式解决<strong>“继承Thread类”</strong>的线程安全问题。同步方法不需要自己显式地指定同步监视器。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window4</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//静态方法同步监视器：Window4.class</span>    <span class="token comment">//synchronized int show()&#123;//非静态方法同步监视器：this，表示t1,t2,t3。此种解决方式是错误的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>            ticket<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ticket<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window4</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window4</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window4</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中线程的生命周期</title>
      <link href="/posts/a901324d.html"/>
      <url>/posts/a901324d.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>想要实现多线程，必须在主线程中创建新的线程对象。Java语言使用Thread类及其子类的对象来表示线程，在它的一个完整的声明周期中通常要经历不同的几种状态。</p></blockquote><h3 id="线程的不同状态"><a href="#线程的不同状态" class="headerlink" title="线程的不同状态"></a>线程的不同状态</h3><ol><li><p>新建</p><blockquote><p>当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</p></blockquote></li><li><p>就绪</p><blockquote><p>处于新建状态的线程被start()后，就将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源</p></blockquote></li><li><p>运行</p><blockquote><p>当就绪的线程被调度并获得CPU资源时，便进入运行状态，run()中定义了该线程的操作和功能</p></blockquote></li><li><p>阻塞</p><blockquote><p>在某种特殊情况下，被人为挂起或执行输入输出操作时，让出CPU并临时中止自己的执行，进入阻塞状态</p></blockquote></li><li><p>死亡</p><blockquote><p>线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束。线程的最终状态是死亡。</p></blockquote></li></ol><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p><img src="/posts/a901324d/1.png" alt="线程的生命周期"><br><img src="/posts/a901324d/2.png" alt="线程的状态转移图"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中Thread类和Runnable接口的使用举例</title>
      <link href="/posts/db148522.html"/>
      <url>/posts/db148522.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中用Thread类和实现Runnable接口的方式都可以创建线程，但实现Runnable接口的方式更适合用来处理多个线程有共享数据的情况。</p></blockquote><h3 id="创建三个窗口卖票，总票数为100张"><a href="#创建三个窗口卖票，总票数为100张" class="headerlink" title="创建三个窗口卖票，总票数为100张"></a>创建三个窗口卖票，总票数为100张</h3><h4 id="使用继承Thread类的方式"><a href="#使用继承Thread类的方式" class="headerlink" title="使用继承Thread类的方式"></a>使用继承Thread类的方式</h4><p>存在线程的安全问题，待解决。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//通过static关键字实现数据共享</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：买票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Window</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="使用实现Runnable接口的方式"><a href="#使用实现Runnable接口的方式" class="headerlink" title="使用实现Runnable接口的方式"></a>使用实现Runnable接口的方式</h4><p>存在线程的安全问题，待解决。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Window1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：卖票，票号为："</span> <span class="token operator">+</span> ticket<span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Window</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//共享同一个Window</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//共享同一个Window</span>        <span class="token class-name">Thread</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//共享同一个Window</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中Thread类的有关方法</title>
      <link href="/posts/cfc22a34.html"/>
      <url>/posts/cfc22a34.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中的Thread类的相关常用方法及构造器介绍</p></blockquote><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ol><li><p>Thread()</p><blockquote><p>创建新的Thread对象</p></blockquote></li><li><p>Thread(String threadname)</p><blockquote><p>创建线程并指定线程实例名</p></blockquote></li><li><p>Thread(Runnable target)</p><blockquote><p>指定创建线程的目标对象，它实现了Runnable接口中的run方法</p></blockquote></li><li><p>Thread(Runnable target, String name)</p><blockquote><p>指定创建线程的目标对象，它实现了Runnable接口中的run方法，并指定线程实例名</p></blockquote></li></ol><h3 id="有关方法"><a href="#有关方法" class="headerlink" title="有关方法"></a>有关方法</h3><ol><li><p>void start()</p><blockquote><p>启动线程，并执行对象的run()方法</p></blockquote></li><li><p>run()</p><blockquote><p>线程在被调度时执行的操作。通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</p></blockquote></li><li><p>void setName(String name)</p><blockquote><p>设置该线程的名称</p></blockquote></li><li><p>String getName()</p><blockquote><p>获取当前线程的名字</p></blockquote></li><li><p>static Thread currentThread()</p><blockquote><p>静态方法，返回执行当前代码的线程。在Thread子类中就是this，通常用于主线程和Runnable实现类。</p></blockquote></li><li><p>static void yield() 线程让步</p><blockquote><ul><li>释放当前cpu的执行权，但是还是有可能再次被分到执行权</li><li>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</li><li>若队列中没有同优先级的线程，忽略此方法</li></ul></blockquote></li><li><p>join()</p><blockquote><ul><li>当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止</li><li>在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态</li><li>join()抛出InterruptedException异常</li><li>低优先级的线程也可以获得执行</li></ul></blockquote></li><li><p>static void sleep(long millitime)(指定时间:毫秒)</p><blockquote><ul><li>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。</li><li>抛出InterruptedException异常</li><li>在指定的millitime毫秒时间内，当前线程是阻塞状态。</li></ul></blockquote></li><li><p>stop()</p><blockquote><p>强制线程生命期结束，不推荐使用，已过时</p></blockquote></li><li><p>boolean isAlive()</p><blockquote><p>返回boolean，判断线程是否还活着</p></blockquote></li></ol><h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><ol><li><p>Thread类中的静态整形常量 public final static int</p><blockquote><ul><li>MAX_PRIORITY：10</li><li>MIN _PRIORITY：1</li><li>NORM_PRIORITY：5  –&gt;默认优先级</li></ul></blockquote></li><li><p>如何获取和设置当前线程的优先级：</p><blockquote><ul><li>getPriority():获取线程的优先级</li><li>setPriority(int p):设置线程的优先级</li></ul></blockquote></li></ol><p>  说明：高优先级的线程要抢占低优先级线程cpu的执行权。但是只是从概率上讲，高优先级的线程高概率的情况下被执行。并不意味着只有当高优先级的线程执行完以后，低优先级的线程才执行。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">String</span> threadName <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Thread.currentThread().getName()</span>                <span class="token keyword">int</span> priority <span class="token operator">=</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Thread.currentThread().getPriority()</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> priority <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadMethodTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HelloThread</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloThread</span><span class="token punctuation">(</span><span class="token string">"thread-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置分线程优先级</span>        h1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        h1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//主线程命名</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> threadName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> priority <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> priority <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    h1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中多线程的创建</title>
      <link href="/posts/ffb418f0.html"/>
      <url>/posts/ffb418f0.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中可以通过继承Thread类或实现Runnable接口来创建所线程。</p></blockquote><h3 id="方式一：继承于Thread类"><a href="#方式一：继承于Thread类" class="headerlink" title="方式一：继承于Thread类"></a>方式一：继承于Thread类</h3><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中</li><li>创建Thread类的子类的对象</li><li>通过此对象调用start()</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 创建一个继承于Thread类的子类</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2. 重写Thread类的run()方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3. 创建Thread类的子类的对象</span>        <span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 通过此对象调用start(): ①启动当前线程 ② 调用当前线程的run()方法</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如下操作仍然是在main线程中执行的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"*******main()*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="方式二：实现Runnable接口"><a href="#方式二：实现Runnable接口" class="headerlink" title="方式二：实现Runnable接口"></a>方式二：实现Runnable接口</h3><ol><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法：run()</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//1. 创建一个实现了Runnable接口的类</span><span class="token keyword">class</span> <span class="token class-name">MThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2. 实现类去实现Runnable中的抽象方法：run()</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3. 创建实现类的对象</span>        <span class="token class-name">MThread</span> mThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用当前线程的run()-->Thread的run()源码中调用了Runnable类型的target的run()</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//再启动一个线程，遍历100以内的偶数</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="两种创建线程方式的比较："><a href="#两种创建线程方式的比较：" class="headerlink" title="两种创建线程方式的比较："></a>两种创建线程方式的比较：</h3><p><strong>开发中：优先选择：实现Runnable接口的方式</strong><br><strong>原因：</strong></p><blockquote><ul><li>实现的方式没有类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程有共享数据的情况。</li></ul></blockquote><p><strong>联系：</strong>Thread本身也是实现了Runnable方法。public class Thread implements Runnable<br><strong>相同点：</strong>两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。</p><h3 id="方式三：实现Callable接口（JDK5-0新增）"><a href="#方式三：实现Callable接口（JDK5-0新增）" class="headerlink" title="方式三：实现Callable接口（JDK5.0新增）"></a>方式三：实现Callable接口（JDK5.0新增）</h3><p>  实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式更强大</p><blockquote><ul><li>相比run()方法，call()方法可以有返回值</li><li>call()可以抛出异常，被外面的操作捕获，获取异常的信息</li><li>Callable是支持泛型的。call()支持泛型的返回值</li><li>实现Callable()方式可以需借助FutureTask类，获取返回结果<blockquote><p>Future接口</p><ul><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</li><li>FutrueTask是Futrue接口的唯一实现类</li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ul></blockquote></li></ul></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span></span><span class="token punctuation">;</span><span class="token comment">//1. 创建一个实现Callable的实现类</span><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//2. 实现call方法，将此线程需要执行的操作声明在call()中</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token comment">//自动装箱成Integer类</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadNew</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//3. 创建Callable接口实现类的对象</span>        <span class="token class-name">NumberThread</span> numberThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask的对象</span>        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>numberThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5. 将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为FutureTask也实现了Runnable接口，所以能丢到Thread中</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//6. 如果有必要，可以获取Callable中call()方法的返回值</span>            <span class="token comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span>            <span class="token class-name">Object</span> sum <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="方式四：使用线程池（JDK5-0新增）"><a href="#方式四：使用线程池（JDK5-0新增）" class="headerlink" title="方式四：使用线程池（JDK5.0新增）"></a>方式四：使用线程池（JDK5.0新增）</h3><p>  经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。可以提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><p><strong>好处：</strong></p><blockquote><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程统一管理<blockquote><ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li></ul></blockquote></li></ul></blockquote><p><strong>线程池相关API：</strong><br>  JDK 5.0起提供了线程池相关API：ExecutorService 和 Executors</p><ol><li><p>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor</p><blockquote><ul><li>void execute(Runnable command) ：执行任务&#x2F;命令，没有返回值，一般用来执行Runnable</li><li>Future submit(Callable task)：执行任务，有返回值，一般用来执行Callable</li><li>void shutdown()：关闭连接池</li></ul></blockquote></li><li><p>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p><blockquote><ul><li>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池</li><li>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池</li><li>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</li><li>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li></ul></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadPoolExecutor</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">NumberThread1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">NumberThread2</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 提供指定线程数量的线程池</span>        <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadPoolExecutor</span> service1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span>        <span class="token comment">//设置线程池的属性</span>        <span class="token comment">//System.out.println(service.getClass());</span>        <span class="token comment">//service1.setCorePoolSize(15);</span>        <span class="token comment">//service1.setKeepAliveTime();</span>        <span class="token comment">//2. 执行指定的线程的操作。需要提供实现Runnable接口或Callable接口的实现类的对象</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适合适用于Runnable</span>        service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适合适用于Runnable</span>        service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适合适用于Callable</span>        <span class="token comment">//3. 关闭连接池</span>        service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="总结：-java中创建多线程有几种方式？四种！四种！四种！"><a href="#总结：-java中创建多线程有几种方式？四种！四种！四种！" class="headerlink" title="总结： java中创建多线程有几种方式？四种！四种！四种！"></a>总结： <strong>java中创建多线程有几种方式？四种！四种！四种！</strong></h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的多线程相关概念理解</title>
      <link href="/posts/2243fd6c.html"/>
      <url>/posts/2243fd6c.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中多线程涉及到的相关概念理解。包括程序，进程，线程，单核，多核，并行，并发等概念。</p></blockquote><h4 id="程序（program）"><a href="#程序（program）" class="headerlink" title="程序（program）"></a>程序（program）</h4><p>  是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</p><h3 id="进程（process）"><a href="#进程（process）" class="headerlink" title="进程（process）"></a>进程（process）</h3><p>  是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期</p><blockquote><ul><li>如：运行中的QQ，运行中的MP3播放器</li><li>程序是静态的，进程是动态的</li><li>进程作为资源分配的单位，系统在运行时会为每个进程分配不同的内存区域</li></ul></blockquote><h3 id="线程（thread）"><a href="#线程（thread）" class="headerlink" title="线程（thread）"></a>线程（thread）</h3><p>  进程可进一步细化为线程，是一个程序内部的一条执行路径。</p><blockquote><ul><li>若一个进程同一时间<strong>并行</strong>执行多个线程，就是支持多线程的</li><li>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程切换的开销小</li><li>一个进程中的多个线程共享相同的内存单元&#x2F;内存地址空间。它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。</li><li>每个线程，拥有自己独立的：栈、程序计数器</li><li>多个线程，共享同一个进程中的结构：堆、方法区<br><img src="/posts/2243fd6c/1.png" alt="image"></li></ul></blockquote><h3 id="java中线程的分类"><a href="#java中线程的分类" class="headerlink" title="java中线程的分类"></a>java中线程的分类</h3><ol><li>守护线程</li><li>用户线程<blockquote><ul><li>它们在几乎每个方面都是相同的，唯一的区别是判断JVM核实离开。</li><li><strong>守护线程</strong>是用来服务用户线程的，通过在start()方法前调用thread.setDaemon(true)可以把一个用户线程变成一个守护线程。</li><li>Java垃圾回收就是一个典型的守护线程</li><li>若JVM中都是守护线程，当前JVM将退出</li></ul></blockquote></li></ol><h3 id="单核CPU和多核CPU的理解"><a href="#单核CPU和多核CPU的理解" class="headerlink" title="单核CPU和多核CPU的理解"></a>单核CPU和多核CPU的理解</h3><p>  单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费）。但是因为CPU时间单元特别短，因此感觉不出来。<br>  <strong>一个Java应用程序java.exe，其实至少有三个线程：main主线程，gc垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</strong></p><h3 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h3><p><strong>并行</strong></p><blockquote><p>多个CPU同时执行多个任务。比如：多个人同时做不同的事。</p></blockquote><p><strong>并发</strong></p><blockquote><p>一个CPU(采用时间片)同时执行多个任务。比如：秒杀、多个人做同一件事。</p></blockquote><h3 id="多线程程序的优点"><a href="#多线程程序的优点" class="headerlink" title="多线程程序的优点"></a>多线程程序的优点</h3><ol><li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</li><li>提高计算机系统CPU的利用率</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</li></ol><h3 id="何时需要多线程"><a href="#何时需要多线程" class="headerlink" title="何时需要多线程"></a>何时需要多线程</h3><ul><li>程序需要同时执行两个或多个任务。</li><li>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。</li><li>需要一些后台运行的程序时。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java练习开发团队调度软件</title>
      <link href="/posts/136ed130.html"/>
      <url>/posts/136ed130.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java练习项目。包含java中的封装，继承，多态，接口，异常，流程控制，包装类等多个知识点。适合用来熟悉java特性。</p></blockquote><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p><img src="/posts/136ed130/3.png"></p><h4 id="员工列表展示："><a href="#员工列表展示：" class="headerlink" title="员工列表展示："></a>员工列表展示：</h4><p><img src="/posts/136ed130/1.png"></p><h4 id="团队列表展示"><a href="#团队列表展示" class="headerlink" title="团队列表展示"></a>团队列表展示</h4><p><img src="/posts/136ed130/2.png"></p><p>源码<br><a href="project.rar">开发团队调度软件</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的异常体系结构</title>
      <link href="/posts/b6b38f70.html"/>
      <url>/posts/b6b38f70.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)</p></blockquote><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>  在Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常）即使程序员把代码写得尽善尽美，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅等等。</p><h3 id="一、Java程序在执行过程中所发生的异常事件可分为两类："><a href="#一、Java程序在执行过程中所发生的异常事件可分为两类：" class="headerlink" title="一、Java程序在执行过程中所发生的异常事件可分为两类："></a>一、Java程序在执行过程中所发生的异常事件可分为两类：</h3><ol><li><strong>Error：</strong>Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError（堆溢出）和OOM（OutOfMemoryError堆溢出）。一般不编写针对性的代码进行处理。</li><li><strong>Exception：</strong>其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如：空指针访问、试图读取不存在的文件、网络连接中断、数组角标越界。</li></ol><p>  对于这些错误，一般有两种解决方法：一是遇到错误就终止程序的运行。另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。捕获错误最理想的是在编译期间，但有的错误只有在运行时才会发生。比如：除数为0，数组下标越界等</p><h3 id="二、Java中的异常分类"><a href="#二、Java中的异常分类" class="headerlink" title="二、Java中的异常分类"></a>二、Java中的异常分类</h3><ol><li><p>编译时异常</p><blockquote><ul><li>是指编译器要求必须处置的异常。即程序在运行时由于外界因素造成的一般性异常。编译器要求Java程序必须捕获或声明所有编译时异常。</li><li>对于这类异常，如果程序不处理，可能会带来意想不到的结果。</li></ul></blockquote></li><li><p>运行时异常</p><blockquote><ul><li>运行时异常是指编译器不要求强制处理的异常。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。java.lang.RuntimeException类及它的子类都是运行时异常。</li><li>对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。</li></ul></blockquote></li></ol><h3 id="三、异常的体系结构"><a href="#三、异常的体系结构" class="headerlink" title="三、异常的体系结构"></a>三、异常的体系结构</h3><ul><li>java.lang.Throwable<ul><li>java.lang.Error : 一般不编写正对性的代码进行处理</li><li>java.lang.Exception : 可以进行异常的处理<ul><li>编译时异常（checked）<ul><li>IOException<ul><li>FileNotFoundException</li></ul></li><li>ClassNotFoundException</li></ul></li><li>运行时异常（unchecked, RuntimeException）<ul><li>NullPointerException</li><li>ArrayIndexOutOfBoundsException</li><li>ClassCastException</li><li>NumberFormatException</li><li>InputMismatchException</li><li>ArithmeticException</li></ul></li></ul></li></ul></li></ul><h3 id="四、常见异常"><a href="#四、常见异常" class="headerlink" title="四、常见异常"></a>四、常见异常</h3><p>java.lang.RuntimeException</p><blockquote><ol><li>ClassCastException</li><li>ArrayIndexOutOfBoundsException</li><li>NullPointerException</li><li>ArithmeticException</li><li>NumberFormatException</li><li>InputMismatchException</li></ol></blockquote><p>java.io.IOException</p><blockquote><ol><li>FileNotFoundException</li><li>EOFException</li></ol></blockquote><p>java.lang.ClassNotFoundException<br>java.lang.InterruptedException<br>java.io.FileNotFoundException<br>java.sql.SQLException</p><h3 id="五、java异常处理机制"><a href="#五、java异常处理机制" class="headerlink" title="五、java异常处理机制"></a>五、java异常处理机制</h3><ol><li><p>Java提供的是异常处理的<strong>抓抛模型</strong></p></li><li><p><strong>抓抛模型：</strong></p><blockquote><ul><li>过程一：**”抛”**：程序在正常执行的过程中，一旦出现异常，就会在异常代码处生成一个对应异常类的对象。并将此对象抛出。一旦抛出对象以后，其后的代码就不再执行。</li><li>过程二：**”抓”**：可以理解为异常的处理方式：① try-catch-finally  ② throws</li></ul></blockquote></li><li><p>异常对象的生成：</p><blockquote><ul><li><strong>由虚拟机自动生成：</strong>程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——<strong>自动抛出</strong></li><li><strong>由开发人员手动创建：</strong>Exception exception &#x3D; new ClassCastException();——创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样</li></ul></blockquote></li><li><p>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为<strong>捕获(catch)异常</strong>。</p></li><li><p>如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</p></li><li><p>程序员通常只能处理Exception，而对Error无能为力。</p></li></ol><h3 id="六、java异常处理的方式"><a href="#六、java异常处理的方式" class="headerlink" title="六、java异常处理的方式"></a>六、java异常处理的方式</h3><ol><li>try-catch-finally</li><li>throws + 异常类型</li></ol><h3 id="七、try-catch-finally的使用"><a href="#七、try-catch-finally的使用" class="headerlink" title="七、try-catch-finally的使用"></a>七、try-catch-finally的使用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token comment">//可能出现异常的代码</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理异常的方式1</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理异常的方式2</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">3</span> 变量名<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//处理异常的方式3</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span><span class="token comment">//一定会执行的代码</span><span class="token punctuation">&#125;</span></code></pre><p><strong>说明：</strong></p><blockquote><ul><li>finally是可选的。finally中声明的是一定会被执行的代码。即使catch中又出现异常了，try中有return语句，catch中有return语句等情况。</li><li>使用try将可能出现异常代码包装起来，在执行过程中，一旦出现异常，就会生成一个对应异常类的对象，根据此对象的类型，去catch中进行匹配</li><li>一旦try中的异常对象匹配到某一个catch时，就进入catch中进行异常的处理。一旦处理完成，就跳出当前的try-catch结构（在没有写finally的情况）。继续执行其后的代码</li><li>catch中的异常类型如果没有子父类关系，则谁声明在上，谁声明在下无所谓。catch中的异常类型如果满足子父类关系，则要求子类一定声明在父类的上面。否则，报错</li><li>常用的异常对象处理的方式： ① String  getMessage()    ② printStackTrace()</li><li>在try结构中声明的变量，再出了try结构以后，就不能再被调用</li><li>try-catch-finally结构可以嵌套</li></ul></blockquote><p><strong>体会：</strong></p><blockquote><ul><li>使用try-catch-finally处理编译时异常，使得程序在编译时就不再报错，但是运行时仍可能报错。相当于我们使用try-catch-finally将一个编译时可能出现的异常，延迟到运行时出现。</li><li>开发中，由于运行时异常比较常见，所以我们通常就不针对运行时异常编写try-catch-finally了。针对于编译时异常，我们说一定要考虑异常的处理。</li></ul></blockquote><h3 id="八、“throws-异常类型”的使用"><a href="#八、“throws-异常类型”的使用" class="headerlink" title="八、“throws + 异常类型”的使用"></a>八、“throws + 异常类型”的使用</h3><ol><li>“throws + 异常类型”写在方法的声明处。指明此方法执行时，可能会抛出的异常类型。一旦当方法体执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后的异常类型时，就会被抛出。异常代码后续的代码，就不再执行！</li><li>try-catch-finally:真正的将异常给处理掉了。throws的方式只是将异常抛给了方法的调用者。并没有真正将异常处理掉。</li><li>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</li></ol><h3 id="九、开发中如何选择使用try-catch-finally-还是使用throws"><a href="#九、开发中如何选择使用try-catch-finally-还是使用throws" class="headerlink" title="九、开发中如何选择使用try-catch-finally 还是使用throws"></a>九、开发中如何选择使用try-catch-finally 还是使用throws</h3><blockquote><ul><li>如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。</li><li>执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。我们建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。</li></ul></blockquote><h3 id="十、自定义异常类"><a href="#十、自定义异常类" class="headerlink" title="十、自定义异常类"></a>十、自定义异常类</h3><ol><li><p>继承于现有的异常结构：RuntimeException、Exception</p><blockquote><ul><li>RuntimeException：运行时异常，可处理，可不处理，编译时不会报错。</li><li>Exception：编译时异常，必须处理，不然编译不通过。</li></ul></blockquote></li><li><p>提供全局常量：serialVersionUID（static final long）</p></li><li><p>提供重载的构造器</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7034897193246939L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中抽象类和接口的异同</title>
      <link href="/posts/a81e8b88.html"/>
      <url>/posts/a81e8b88.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中抽象类和接口的比较。接口是和类同级的一种结构，抽象类本质上是类，但是不能直接实例化对象。</p></blockquote><ol><li><p>相同点</p><blockquote><ul><li>不能实例化</li><li>都可以被继承</li><li>都可以包含抽象方法</li></ul></blockquote></li><li><p>不同点</p><blockquote><ul><li>抽象类中有构造器，供子类显示或非显示的调用；而接口中不能声明构造器。</li><li>抽象类只能被单继承；而接口间可以多继承</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的内部类</title>
      <link href="/posts/eab6ab72.html"/>
      <url>/posts/eab6ab72.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中的内部类。当一个事物的内部，还有一个部分需要一个完整的结构进行描述，而这个内部完整的结构有只为外部事物提高服务，那么这个内部完整的结构最好使用内部类。</p></blockquote><p>  java 中允许一个类的定义位于另一个类的内部，前者称为<strong>内部类</strong>，后者称为<strong>外部类</strong>。Inner class一般在定义它的类或语句块之内使用，在外部引用它是必须给出完整的名称。Inner class的名称不能与包含它的外部类类名相同。</p><ol><li><p>Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类</p></li><li><p>分类</p><blockquote><ul><li>成员内部类（static成员内部类和非static成员内部类）</li><li>局部内部类（方法内、代码块内、构造器内）</li><li>匿名内部类</li></ul></blockquote></li><li><p>成员内部类:</p></li></ol><ul><li>一方面，作为外部类的成员：</li></ul><ul><li>调用外部类的结构</li><li>可以被static修饰</li><li>可以被4种不同的权限修饰</li></ul><ul><li>另一方面，作为一个类：</li></ul><ul><li>类内可以定义属性、方法、构造器等</li><li>可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承</li><li>可以被abstract修饰</li></ul><ol start="4"><li>内部类的结构</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//外部内</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人，吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//静态成员内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡拉是条狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//eat();//报错，静态结构中不能调用非静态的属性、方法</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//非静态成员内部类</span>    <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//属性</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token comment">//方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一只小小鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//内部类中调用外部内的属性和方法</span>            <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person.this.eat();</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//构造器</span>        <span class="token keyword">public</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">BB</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">CC</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//成员内部类</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">A1</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">A2</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">class</span> <span class="token class-name">A3</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A4</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A5</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">A6</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A7</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A8</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//内部接口</span>    <span class="token keyword">private</span> <span class="token keyword">interface</span> <span class="token class-name">B1</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> <span class="token class-name">B2</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">interface</span> <span class="token class-name">B3</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">B4</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//static interface B5&#123;&#125; //redundant for inner interfaces</span>    <span class="token comment">//abstract interface B6&#123;&#125; //redundant for inner interfaces</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>如何实例化成员内部类的对象</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建Dog实例（静态的成员内部类）</span>        <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建Bird实例（非静态的成员内部类）</span><span class="token comment">//      Person.Bird bird = new Person.Bird();//错误的</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person<span class="token punctuation">.</span>Bird</span> bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人，吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡拉是条狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一只小小鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="6"><li>如何在成员内部类中区分调用外部内的结构</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person<span class="token punctuation">.</span>Bird</span> bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string">"哈哈，哈哈哈哈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人，吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卡拉是条狗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"杜鹃"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟，吃虫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一只小小鸟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//与外部内未重名的属性、方法调用</span>            <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this.eat();</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//调用与外部内重名的属性、方法</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//形参</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内部类的属性</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//外部类的属性</span>            <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认省略this.</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="7"><li>在局部内部类的方法中，如果调用外部类中所声明的方法中的局部变量的话，要求此局部变量必须声明为final的。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//局部变量</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//省略了final关键字。JDK8及之后的版本可以省略，JDK7及之前的版本必须显式的将局部变量声明为final</span>        <span class="token keyword">class</span> <span class="token class-name">AA</span><span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//num = 20;//报错，final修饰的变量不能被重新赋值</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="8"><li>开发中局部内部类的使用</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//开发中很少见</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">AA</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回一个实现了Comparable接口的类的对象</span>    <span class="token keyword">public</span> <span class="token class-name">Comparable</span> <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个实现了Comparable接口的类：局部内部类</span>        <span class="token comment">/*方式一：        class MyComparable implements Comparable &#123;            @Override            public int compareTo(Object o) &#123;                return 0;            &#125;        &#125;        return new MyComparable();        */</span>        <span class="token comment">/*方式二：*/</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java在JDK8中接口的新特性</title>
      <link href="/posts/d0b4bf5b.html"/>
      <url>/posts/d0b4bf5b.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>JDK8中，在接口中除了定义全局静态常量和公共抽象方法之外，还可以定义静态方法和默认方法</p></blockquote><h3 id="JDK8以后，在接口中除了能定义全局常量和抽象方法之外，还可以定义静态方法和默认方法"><a href="#JDK8以后，在接口中除了能定义全局常量和抽象方法之外，还可以定义静态方法和默认方法" class="headerlink" title="JDK8以后，在接口中除了能定义全局常量和抽象方法之外，还可以定义静态方法和默认方法"></a>JDK8以后，在接口中除了能定义全局常量和抽象方法之外，还可以定义静态方法和默认方法</h3><ol><li><p>静态方法</p><blockquote><p>使用<strong>static</strong>关键字修饰。可以通过接口直接调用静态方法（并且接口中的静态方只能通过接口本身来调用），并执行其方法体。java通常在相互使用的类中使用静态方法，可以在java标准库中找到像Collection&#x2F;Collections或者Path&#x2F;Paths这样成对的接口和类。</p></blockquote></li><li><p>默认方法</p><blockquote><p>默认方法使用<strong>default</strong>关键字修饰。可以通过实现类对象来调用。我们在已有的接口中提供新方法的同时，还保留了与旧版本代码的兼容性。比如：java8 API中对Collection、List、Comparator等接口提供了丰富的默认类。</p></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">CompareA</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//全局常量，其中public static final可省</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//抽象方法，其中public abstract可省</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//静态方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//静态方法，省略public</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//默认方法</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//默认方法，省略public</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>接口中定义的静态方法，只能通过接口来调用。”接口.静态方法”，有点像工具类。</li><li>通过实现类的对象，可以调用接口中的默认方法。</li><li>如果实现类重写了接口中的默认方法，调用时，调用的是重写以后的方法。</li><li><strong>类优先原则：</strong>如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。如果子类重写过，那么调用的当然是子类重写后的方法</li><li><strong>接口冲突：</strong>如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，报错。这就需要我们必须在实现类中重写此方法</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SubClassTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SubClass1</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//s.method1();//报错</span>        <span class="token comment">//SubClass.method1();//报错</span>        <span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//知识点1：接口中定义的静态方法，只能通过接口来调用。</span>        <span class="token comment">//知识点2：通过实现类的对象，可以调用接口中的默认方法。</span>        <span class="token comment">//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</span>        s1<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该方法被子类重写过</span>        s1<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SubClass2</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s2<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//该方法被子类重写过</span>        <span class="token comment">//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，</span>        <span class="token comment">//那么子类在没有重写此方法的情况下，默认调用的是父类中的同名同参数的方法。-->类优先原则</span>        <span class="token comment">//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，</span>        <span class="token comment">//那么在实现类没有重写此方法的情况下，报错。-->接口冲突。</span>        <span class="token comment">//这就需要我们必须在实现类中重写此方法</span>        s2<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里默认调用的是父类中的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">CompareA</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//静态方法。静态方法不存在重写这一说法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//默认方法</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass:重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SubClass1</span> <span class="token keyword">implements</span> <span class="token class-name">CompareA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass1:上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SubClass2</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token keyword">implements</span> <span class="token class-name">CompareA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass2:上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>  如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，那么在实现类没有重写此方法的情况下，报错。–&gt;接口冲突。这就需要我们必须在实现类中重写此方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SubClassTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SubClass</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子类重写过</span>        s<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//其实是调用的父类中继承来的该方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">CompareA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">CompareB</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareB:重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass:重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token keyword">implements</span> <span class="token class-name">CompareA</span><span class="token punctuation">,</span> <span class="token class-name">CompareB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass:上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，</span>    <span class="token comment">//那么在实现类没有重写此方法的情况下，报错。-->接口冲突。</span>    <span class="token comment">//如果没有extends SuperClass，则报错。必须去重写method3()</span><span class="token punctuation">&#125;</span></code></pre><p>接口可以多继承，多继承遇到同名默认方法时必须重写，不然会报错。重写后还是一个默认方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface A method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface B method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interface C method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">A</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用接口中的被重写的默认方法</span>        <span class="token class-name">B</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如何在子类(或实现类)的方法中调用父类、接口中被重写的方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">CompareA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">CompareB</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareB:重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SuperClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SuperClass:重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span> <span class="token keyword">implements</span> <span class="token class-name">CompareA</span><span class="token punctuation">,</span> <span class="token class-name">CompareB</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass:上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SubClass:重庆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//子类中的普通方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用自定义的重写方法</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类中声明的方法</span>        <span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用接口中的被重写的默认方法，当然也只能在实现类中去这样调用</span>        <span class="token class-name">CompareB</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>一个有趣的例子</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Filial</span> <span class="token punctuation">&#123;</span><span class="token comment">// 孝顺的</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老妈，我来救你了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Spoony</span> <span class="token punctuation">&#123;</span><span class="token comment">// 痴情的</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"媳妇，别怕，我来了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"儿子，救我媳妇！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*在不继承Father的情况下，如果不重写接口冲突的同名默认方法，则会报错。在继承Father的情况下，如果父类中有该重名方法，则子类可以不重写，默认调用的是从父类中继承来的同名方法。*/</span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token keyword">implements</span> <span class="token class-name">Filial</span><span class="token punctuation">,</span> <span class="token class-name">Spoony</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我该就谁呢？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Filial</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Spoony</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的工厂模式</title>
      <link href="/posts/74d6fda5.html"/>
      <url>/posts/74d6fda5.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>工厂模式实现了创建者与调用者的分离，即将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。其实设计模式和面向对象设计原则都是为了使得开发项目更加容易扩展和维护，解决方式就是一个“分工”。</p></blockquote><h3 id="工厂模式分类"><a href="#工厂模式分类" class="headerlink" title="工厂模式分类"></a>工厂模式分类</h3><ol><li><p>简单工厂模式：</p><blockquote><p>用来生产同一等级结构中的任意产品。（对于增加新的产品，<br>需要修改已有代码）</p></blockquote></li><li><p>工厂方法模式：</p><blockquote><p>用来生产同一等级结构中的固定产品。（支持增加任意产品）</p></blockquote></li><li><p>抽象工厂模式：</p><blockquote><p>用来生产不同产品族的全部产品。（对于增加新的产品，无<br>能为力；支持增加产品族）</p></blockquote></li></ol><h3 id="工厂模式核心本质"><a href="#工厂模式核心本质" class="headerlink" title="工厂模式核心本质"></a>工厂模式核心本质</h3><p>  实例化对象，用工厂方法代替 new 操作。将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ol><li>无工厂模式</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Audi</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奥迪在跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">BYD</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比亚迪在跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Car</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BYD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>简单工厂模式<br>  简单工厂模式，从命名上就可以看出这个模式一定很简单。它存在的目的很简单：定义一个用于创建对象的工厂类。<br>  简单工厂模式也叫静态工厂模式，就是工厂类一般是使用静态方法，通过接收的参数的不同来返回不同的实例对象。<strong>缺点：</strong>对于增加新产品，不修改代码的话，是无法扩展的。违反了开闭原则（对<br>扩展开放；对修改封闭）。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Audi</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奥迪在跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">BYD</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比亚迪在跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//工厂类</span><span class="token keyword">class</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//方式一</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"奥迪"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"比亚迪"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BYD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//方式二</span>    <span class="token comment">/*    public static Car getAudi() &#123;        return new Audi();    &#125;    public static Car getByd() &#123;        return new BYD();    &#125;    */</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Car</span> a <span class="token operator">=</span> <span class="token class-name">CarFactory</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token string">"奥迪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> b <span class="token operator">=</span> <span class="token class-name">CarFactory</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token string">"比亚迪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>工厂方法模式<br>  为了避免简单工厂模式的缺点，不完全满足 OCP（对扩展开放，对修改关闭）。工厂方法模式和简单工厂模式最大的不同在于，简单工厂模式只有一个（对于一个项目或者一个独立的模块而言）工厂类，而工厂方法模式有一组实现了相同接口的工厂类。这样在简单工厂模式里集中在工厂方法上的压力可以由工厂方法模式里不同的工厂子类来分担。<br>  简单工厂模式与工厂方法模式真正的避免了代码的改动了？没有。在简单工厂模式中，新产品的加入要修改工厂角色中的判断语句；而在工厂方法模式中，要么将判断逻辑留在抽象工厂角色中，要么在客户程序中将具体工厂角色写死（就像上面的例子一样）。而且产品对象创建条件的改变必然会引起工厂角色的修改。面对这种情况，Java 的反射机制与配置文件的巧妙结合突破了限制——这在Spring 中完美的体现了出来。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//接口</span><span class="token keyword">interface</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//实现类</span><span class="token keyword">class</span> <span class="token class-name">Audi</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奥迪在跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//实现类</span><span class="token keyword">class</span> <span class="token class-name">BYD</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比亚迪在跑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//工厂接口</span><span class="token keyword">interface</span> <span class="token class-name">Factory</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//工厂实现类</span><span class="token keyword">class</span> <span class="token class-name">AudiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Audi</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//工厂实现类</span><span class="token keyword">class</span> <span class="token class-name">BydFactory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">BYD</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BYD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Car</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BydFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>抽象工厂模式<br>  <strong>抽象工厂模式和工厂方法模式的区别就在于需要创建对象的复杂程度上。</strong>而且抽象工厂模式是三个里面最为抽象、最具一般性的。抽象工厂模式的用意为：给客户端提供一个接口，可以创建多个产品族中的产品对象。<br>  而且使用抽象工厂模式还要满足以下条件：<blockquote><ul><li>系统中有多个产品族，而系统一次只可能消费其中一族产品。</li><li>同属于同一个产品族的产品以其使用。</li></ul></blockquote></li></ol><p>  看过了前两个模式，对这个模式各个角色之间的协调情况应该心里有个数了，这里就不举例子了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的代理模式</title>
      <link href="/posts/5bff7cc6.html"/>
      <url>/posts/5bff7cc6.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>代理模式是Java开发中使用较多的一种设计模式。代理设计就是为其他对象提供一种代理以控制对这个对象的访问。代理模式体现了java中接口的应用。</p></blockquote><h3 id="代理模式的应用场景"><a href="#代理模式的应用场景" class="headerlink" title="代理模式的应用场景"></a>代理模式的应用场景</h3><ol><li>安全代理：屏蔽对真实角色的直接访问</li><li>远程代理：通过代理类处理远程方法调用（RMI）</li><li>延迟加载：先加载轻量级的代理对象，真正需要时再加载真实对象</li></ol><h3 id="代理模型分类"><a href="#代理模型分类" class="headerlink" title="代理模型分类"></a>代理模型分类</h3><ol><li>静态代理：静态定义代理类</li><li>动态代理：动态生成代理类。（JDK自带的动态代理，需要反射等知识）</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NetWorkTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ProxyServer</span> proxyServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyServer</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyServer<span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">NetWork</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略public abstract</span><span class="token punctuation">&#125;</span><span class="token comment">//被代理类</span><span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token keyword">implements</span> <span class="token class-name">NetWork</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"真实的服务器访问网络"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代理类</span><span class="token keyword">class</span> <span class="token class-name">ProxyServer</span> <span class="token keyword">implements</span> <span class="token class-name">NetWork</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">NetWork</span> work<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyServer</span><span class="token punctuation">(</span><span class="token class-name">NetWork</span> work<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> work<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"联网之前的检查工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        work<span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticProxyTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Proxy</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">bookTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">collectMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Star</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span> <span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 面谈</span><span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 签合同</span><span class="token keyword">void</span> <span class="token function">bookTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 订票</span><span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 唱歌</span><span class="token keyword">void</span> <span class="token function">collectMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 收钱</span><span class="token punctuation">&#125;</span><span class="token comment">//被代理类</span><span class="token keyword">class</span> <span class="token class-name">RealStar</span> <span class="token keyword">implements</span> <span class="token class-name">Star</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bookTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"明星：歌唱~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collectMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代理类</span><span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Star</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Star</span> real<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name">Star</span> real<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>real <span class="token operator">=</span> real<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经纪人面谈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经纪人签合同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bookTicket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经纪人订票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>real<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collectMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经纪人收钱"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的接口(interface)</title>
      <link href="/posts/1ba5b468.html"/>
      <url>/posts/1ba5b468.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中的接口就是规范，定义的是一组规则，体现了现实世界中“如果你是&#x2F;要…则必须能…”的思想。继承是一个“是不是”的关系，二接口实现则是“能不能”的关系。接口的本质是契约，标准，规范。</p></blockquote><h3 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h3><ol><li><p>接口使用interface来定义</p></li><li><p>Java中，接口和类是并列的两个结构</p></li><li><p>如何定义接口：定义接口中的成员</p><blockquote><ul><li>JDK7及以前：只能定义全局常量和抽象方法<br>  全局常量：public static final的。但是书写时，可以省略不写。<strong>注意：</strong>就算是省略不写，其也是全局静态常量。<br>  抽象方法：public abstract的</li><li>JDK8: 除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法</li></ul></blockquote></li><li><p>接口中不能定义构造器的！意味着接口不可以实例化。接口只能用来被实现</p></li><li><p>Java开发中，接口通过让类去实现(implements)的方式来使用。</p><blockquote><ul><li>如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化</li><li>如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类</li></ul></blockquote></li><li><p>Java类可以实现多个接口。这弥补了Java单继承性的局限性</p></li><li><p>接口与接口之间可以继承，而且可以多继承</p></li><li><p>接口的具体使用，体现多态性</p></li><li><p>接口，实际上可以看做是一种规范</p></li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Flyable</span><span class="token punctuation">.</span>MAX_SPEED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Flyable</span><span class="token punctuation">.</span>MIN_SPEED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//Flyable.MIN_SPEED = 2;//报错，final属性不能修改</span>        <span class="token class-name">Plane</span> plane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Plane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        plane<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*定义Flyable接口*/</span><span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//全局静态常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_SPEED <span class="token operator">=</span> <span class="token number">7900</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> MIN_SPEED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//省略了public static final</span>    <span class="token comment">//抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略了public abstract</span><span class="token punctuation">&#125;</span><span class="token comment">/*实现Flyable接口中的所有方法*/</span><span class="token keyword">class</span> <span class="token class-name">Plane</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"飞机通过引擎起飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"驾驶员控制减速"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*实现Flyable接口中的所有方法*/</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Rocket</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"火箭通过点火起飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Flyable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_SPEED <span class="token operator">=</span> <span class="token number">7900</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> MIN_SPEED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Attackable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Plane</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"飞机通过引擎起飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"驾驶员控制减速"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//类单继承，接口多实现。先继承，再实现。</span><span class="token keyword">class</span> <span class="token class-name">Bullet</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">,</span> <span class="token class-name">Attackable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接口可以继承接口，并且可以多继承</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>接口使用上也满足多态性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">USBTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Computer</span> com <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1.创建了接口的非匿名实现类的非匿名对象</span>        <span class="token class-name">Flash</span> flash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span>flash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2. 创建了接口的非匿名实现类的匿名对象</span>        com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3. 创建了接口的匿名实现类的非匿名对象</span>        <span class="token class-name">USB</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机开始工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"手机结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4. 创建了接口的匿名实现类的匿名对象</span>        com<span class="token punctuation">.</span><span class="token function">transferData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mp3开始工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mp3结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferData</span><span class="token punctuation">(</span><span class="token class-name">USB</span> usb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//注意：此处体现多态</span>        usb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体传输数据的细节"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usb<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">USB</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//常量：定义了长、宽、最大最小的传输速度等</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Flash</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"U盘开启工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"U盘结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token keyword">implements</span> <span class="token class-name">USB</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印机开启工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印机结束工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>注意以下情况</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//省略public static final</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">px</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//System.out.println(x);//编译不通过，x指向不明确</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">px</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Playable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略public abstract</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Bounceable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略public abstract</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Rollable</span> <span class="token keyword">extends</span> <span class="token class-name">Playable</span><span class="token punctuation">,</span> <span class="token class-name">Bounceable</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Ball</span> ball <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ball</span><span class="token punctuation">(</span><span class="token string">"PingPang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//省略public static final</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Ball</span> <span class="token keyword">implements</span> <span class="token class-name">Rollable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Ball</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//ball = new Ball("Football");//final关键字修饰的变量不能修改</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ball<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的模板方法设计模式</title>
      <link href="/posts/a0e1e0a.html"/>
      <url>/posts/a0e1e0a.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java中关于多态的应用之一：模板方法设计模式（TemplateMethod）</p></blockquote><h3 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h3><p>  抽象类体现的就是一种模板模式的的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但是子类总体上会保留抽象类的行为方式。</p><h3 id="模板方法设计模式解决的问题"><a href="#模板方法设计模式解决的问题" class="headerlink" title="模板方法设计模式解决的问题"></a>模板方法设计模式解决的问题</h3><ol><li>当功能一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现</li><li>话句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同的子类去实现。这就算是一种模板模式。</li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SubTemplate</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">spendTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Template</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//计算某段代码执行所需要花费的时间</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spendTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不确定的部分、易变的部分</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SubTemplate</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//找质数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateMethodTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">BankTemplateMethod</span> btm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DrawMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btm<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BankTemplateMethod</span> btm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManageMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btm2<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">&#123;</span><span class="token comment">// 具体方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取号排队"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 办理具体的业务 //钩子方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反馈评分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 模板方法，把基本操作组合到一起，子类一般不能重写</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">takeNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类的实现代码</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DrawMoney</span> <span class="token keyword">extends</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要取款！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ManageMoney</span> <span class="token keyword">extends</span> <span class="token class-name">BankTemplateMethod</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transact</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我要理财！我这里有2000万美元!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中abstract关键字的使用</title>
      <link href="/posts/e47e75a7.html"/>
      <url>/posts/e47e75a7.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在Java中abstract表示抽象的，这里谈一谈关于abstract关键字的一些说明</p></blockquote><h3 id="abstract关键字的使用"><a href="#abstract关键字的使用" class="headerlink" title="abstract关键字的使用"></a>abstract关键字的使用</h3><ol><li><p>abstract：抽象的</p></li><li><p>abstract可以用来修饰的结构：</p><blockquote><p>类、方法</p></blockquote></li><li><p>abstract使用上的注意点：</p><blockquote><ul><li>不能用来修饰属性、构造器等其他结构</li><li>abstract关键字不能用来修饰私有方法、静态方法、final的方法、final的类</li></ul></blockquote></li><li><p>abstract修饰类：抽象类</p><blockquote><ul><li>此类不能被实例化</li><li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</li><li>开发中，一般都会提供抽象类的子类，让子类去实例化对象，完成相关操作</li></ul></blockquote></li><li><p>abstract修饰方法：抽象方法</p><blockquote><ul><li>抽象方法只有方法的声明。没有具体的方法体</li><li>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法，抽象类中可以有普通的方法。</li><li>只有子类重写了父类中的所有抽象方法后，此子类才能实例化</li><li>若子类没有重写父类中的所有抽象方法，则此子类也只能是一个抽象类，需要用abstract关键字修饰</li></ul></blockquote></li><li><p>抽象类的匿名子类（区别于匿名对象）</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名对象</span>        <span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method1</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非匿名类的非匿名对象(worker)</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非匿名类的匿名对象</span>        <span class="token comment">//匿名子类的非匿名对象(p)</span>        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好呼吸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">method1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//匿名子类的匿名对象</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃好吃东西"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好好呼吸新鲜空气"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Creature</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Creature</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//非抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">breath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java经典设计模式</title>
      <link href="/posts/3a006f3d.html"/>
      <url>/posts/3a006f3d.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>常用的经典设计模式</p></blockquote><h3 id="常用设计模式——23中经典的设计模式"><a href="#常用设计模式——23中经典的设计模式" class="headerlink" title="常用设计模式——23中经典的设计模式"></a>常用设计模式——23中经典的设计模式</h3><h4 id="创建模式（共5种）"><a href="#创建模式（共5种）" class="headerlink" title="创建模式（共5种）"></a>创建模式（共5种）</h4><ol><li>工厂方法模式</li><li>抽象工厂模式</li><li>单例模式</li><li>建造者模式</li><li>原型模式</li></ol><h4 id="结构模式（共7种）"><a href="#结构模式（共7种）" class="headerlink" title="结构模式（共7种）"></a>结构模式（共7种）</h4><ol><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ol><h4 id="行为模式（共11种）"><a href="#行为模式（共11种）" class="headerlink" title="行为模式（共11种）"></a>行为模式（共11种）</h4><ol><li>策略模式</li><li>模板方法模式</li><li>观察者模式</li><li>迭代器模式</li><li>责任链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介模式</li><li>解释器模式</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的final关键字</title>
      <link href="/posts/c63c445a.html"/>
      <url>/posts/c63c445a.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中的final关键字，final表示为最终的，通常用来修饰常量，不允许改变。</p></blockquote><p>final:最终的</p><ol><li><p>final可以用来修饰的结构：</p><blockquote><p>类、方法、变量</p></blockquote></li><li><p>final 用来修饰一个类:</p><blockquote><p>此类不能被其他类所继承。比如：String类、System类、StringBuffer类</p></blockquote></li><li><p>final 用来修饰方法：</p><blockquote><p>表明此方法不可以被重写(覆盖)。比如：Object类中getClass()</p></blockquote></li><li><p>final 用来修饰变量：此时的”变量”就称为是一个常量</p><blockquote><ul><li>final修饰属性：<br>  可以考虑赋值的位置有：显式初始化、代码块中初始化、构造器中初始化。也就是说在其他地方不能对被final修饰的属性进行赋值操作。</li><li>final修饰局部变量：<br>  尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</li></ul></blockquote></li><li><p>static final 用来修饰属性：</p><blockquote><p>全局常量</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中类的成员之代码块</title>
      <link href="/posts/aea6ed8e.html"/>
      <url>/posts/aea6ed8e.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中类的成员除了常用的属性、方法、构造器以外，还有代码块和内部类。其中代码块主要是用来做一些初始化的工作。</p></blockquote><ol><li><p>代码块的作用：用来初始化类、对象</p></li><li><p>代码块如果有修饰的话，只能使用static.</p></li><li><p>分类：<strong>静态代码块</strong> and <strong>非静态代码块</strong></p></li><li><p>静态代码块</p><blockquote><ul><li>内部可以有输出语句</li><li>随着类的加载而执行（注：静态方法随着类的加载而加载）,而且只执行一次</li><li>作用：初始化类的信息</li><li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行要优先于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li></ul></blockquote></li><li><p>非静态代码块</p><blockquote><ul><li>内部可以有输出语句</li><li>随着对象的创建而执行，且比构造器先执行</li><li>每创建一个对象，就执行一次非静态代码块</li><li>作用：可以在创建对象时，对对象的属性等进行初始化</li><li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li></ul></blockquote></li></ol><h3 id="java类中的常用结构："><a href="#java类中的常用结构：" class="headerlink" title="java类中的常用结构："></a>java类中的常用结构：</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>desc<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//非静态属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//静态属性</span><span class="token keyword">static</span> <span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token string">"我是一个人"</span><span class="token punctuation">;</span><span class="token comment">//空参构造器</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//带参构造器</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//非static的代码块</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, block - 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello, block - 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用非静态结构</span>age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用静态结构</span>desc <span class="token operator">=</span> <span class="token string">"我是一个爱学习的人1"</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//static的代码块</span><span class="token keyword">static</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,static block-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,static block-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用静态结构</span>desc <span class="token operator">=</span> <span class="token string">"我是一个爱学习的人"</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不可以调用非静态结构</span><span class="token comment">//eat();</span><span class="token comment">//name = "Tom";</span><span class="token punctuation">&#125;</span><span class="token comment">//非静态方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//方法的重写（覆盖）</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Person [name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个快乐的人！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="由父及子，静态先行："><a href="#由父及子，静态先行：" class="headerlink" title="由父及子，静态先行："></a>由父及子，静态先行：</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token comment">//step_1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//step_4</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认调用父类空参构造器</span>        <span class="token comment">//step_5</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root的无参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Mid</span> <span class="token keyword">extends</span> <span class="token class-name">Root</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token comment">//step_2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//step_6</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Mid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认调用父类空参构造器</span>        <span class="token comment">//step_7</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的无参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Mid</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过this调用同一类中重载的构造器</span>        <span class="token comment">//step_8</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mid的带参数构造器，其参数值："</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Mid</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token comment">//step_3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Leaf的静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//step_9</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Leaf的普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"大虫子，养虫子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过super调用父类中有一个字符串参数的构造器</span>        <span class="token comment">//step_10</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Leaf的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeafTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Root的静态初始化块        Mid的静态初始化块        Leaf的静态初始化块        Root的普通初始化块        Root的无参数的构造器        Mid的普通初始化块        Mid的无参数的构造器        Mid的带参数构造器，其参数值：大虫子，养虫子        Leaf的普通初始化块        Leaf的构造器        Root的普通初始化块        Root的无参数的构造器        Mid的普通初始化块        Mid的无参数的构造器        Mid的带参数构造器，其参数值：大虫子，养虫子        Leaf的普通初始化块        Leaf的构造器*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11111111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"22222222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"33333333333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"44444444444"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"55555555555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"66666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//main方法既是程序入口，也是静态方法。由父及子 静态先行。main方法的执行也需要先有类的结构</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"77777777777"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*        11111111111        44444444444        77777777777        ************************        22222222222        33333333333        55555555555        66666666666        ************************        22222222222        33333333333        55555555555        66666666666        ************************        22222222222        33333333333*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="对属性的显示赋值和在代码块中赋值的先后执行顺序："><a href="#对属性的显示赋值和在代码块中赋值的先后执行顺序：" class="headerlink" title="对属性的显示赋值和在代码块中赋值的先后执行顺序："></a>对属性的显示赋值和在代码块中赋值的先后执行顺序：</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Order1</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>        <span class="token class-name">Order2</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Order1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> orderId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        orderId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Order2</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        orderId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> orderId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的单例设计模式</title>
      <link href="/posts/1fbf584c.html"/>
      <url>/posts/1fbf584c.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>单例设计模式是在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式。</p></blockquote><h3 id="单例设计模式（Singleton）概念："><a href="#单例设计模式（Singleton）概念：" class="headerlink" title="单例设计模式（Singleton）概念："></a>单例设计模式（Singleton）概念：</h3><p>  所谓的单例设计模式，就是采取一定的方法保证在整个软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只能提供一个取得其对象实例的方法。如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的<strong>构造器的访问权限设置为private</strong>，这样，就不能用new操作符在类的外部产生该类的对象了，但是在类的内部任然可以产生该类的对象。因为在类的外部开始还无法得到该类的对象，只能<strong>调用该类的某个静态方法</strong>以返回在类内部创建的该类对象。有因为静态方法只能访问类中的静态成员变量，所以，在类内部产生的<strong>该类对象变量也必须定义成静态的</strong>。</p><h3 id="单例模式的优点："><a href="#单例模式的优点：" class="headerlink" title="单例模式的优点："></a>单例模式的优点：</h3><p>  由于单例模式只生成一个实例，<strong>减少了系统性能的开销</strong>，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p><h3 id="单例模式举例："><a href="#单例模式举例：" class="headerlink" title="单例模式举例："></a>单例模式举例：</h3><p>  java.lang.Runtime就是一个典型的单例模式。</p><h3 id="“饿汉式”单例模式：一上来就造好单例对象，等着被用。"><a href="#“饿汉式”单例模式：一上来就造好单例对象，等着被用。" class="headerlink" title="“饿汉式”单例模式：一上来就造好单例对象，等着被用。"></a>“饿汉式”单例模式：一上来就造好单例对象，等着被用。</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        Bank bank1 = new Bank();//报错'Bank()' has private access in 'Bank'</span><span class="token comment">//        Bank bank2 = new Bank();//报错'Bank()' has private access in 'Bank'</span>        <span class="token class-name">Bank</span> bank1 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bank</span> bank2 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank1 <span class="token operator">==</span> bank2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.私有化类的构造器</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.内部创建该类的对象</span>    <span class="token comment">//4.要求此对象也必须声明为静态的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.提供公共的静态方法，返回类的对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Bank</span> bank1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bank</span> bank2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank1 <span class="token operator">==</span> bank2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//Bank.instance = null;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Bank</span><span class="token punctuation">.</span>instance <span class="token operator">==</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span><span class="token comment">//加上final关键字，避免在外部重新赋值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="“懒汉式”单例模式：第一次被用的时候才造单例对象。"><a href="#“懒汉式”单例模式：第一次被用的时候才造单例对象。" class="headerlink" title="“懒汉式”单例模式：第一次被用的时候才造单例对象。"></a>“懒汉式”单例模式：第一次被用的时候才造单例对象。</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        Bank bank1 = new Bank();//报错'Bank()' has private access in 'Bank'</span><span class="token comment">//        Bank bank2 = new Bank();//报错'Bank()' has private access in 'Bank'</span>        <span class="token class-name">Bank</span> bank1 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bank</span> bank2 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank1 <span class="token operator">==</span> bank2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>bank2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bank</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.私有化类的构造器</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.声明当前类对象，没有初始化</span>    <span class="token comment">//4.此对象也必须声明为static的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//3.声明public、static的返回当前类对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="“饿汉式”单例模式-与-“懒汉式”单例模式区别"><a href="#“饿汉式”单例模式-与-“懒汉式”单例模式区别" class="headerlink" title="“饿汉式”单例模式 与 “懒汉式”单例模式区别"></a>“饿汉式”单例模式 与 “懒汉式”单例模式区别</h3><ol><li><p>饿汉式：</p><blockquote><p>坏处：对象加载时间过长。<br>好处：饿汉式是线程安全的</p></blockquote></li><li><p>懒汉式：</p><blockquote><p>好处：延迟对象的创建。<br>目前的写法坏处：线程不安全。但是可以修改为线程安全的。</p></blockquote></li></ol><h3 id="单例模式的一些应用场景："><a href="#单例模式的一些应用场景：" class="headerlink" title="单例模式的一些应用场景："></a>单例模式的一些应用场景：</h3><ol><li>网站的计数器：一般是单例模式实现，否则难以实现同步。</li><li>应用程序的日志应用：一般都使用单例模式实现，因为共享的日志文件一般一直处于打开状态，只能有一个实例去操作，否则内容不好追加。</li><li>数据库连接池：数据库连接池的设计一般也是采用单例模式来实现，因为数据库连接是一种数据库资源。</li><li>读取配置文件的类：项目中，读取配置文件的类一般也只有一个对象。没有必要每次使用配置文件数据，都生成一个对象去读取。</li><li>Application 也是单例的典型应用</li><li>Windows的Task Manager(任务管理器)也是很典型的单例模式</li><li>Windows的Recycle Bin(回收站)也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的静态变量(static)与实例变量</title>
      <link href="/posts/5d72899f.html"/>
      <url>/posts/5d72899f.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中的静态变量与实例变量的区别分析，主要是static关键字的使用</p></blockquote><ol><li><p>**static:**静态的</p></li><li><p>static可以用来修饰：<strong>属性、方法、代码块、内部类</strong>。注意：不能修饰构造器。修饰属性或方法时，static关键字放在权限修饰符前或后都行，但是修饰方法时，注意static关键字别不能放在返回值类型后面。</p></li><li><p>使用static修饰属性：静态变量（或类变量）</p><blockquote><ul><li>属性按是否使用static修饰分为：静态属性 和 非静态属性(实例变量)<br>  实例变量：我们创建了类的多个对象，每个对象都独立的拥有一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。<br>  静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</li><li>static修饰属性的其他说明：<blockquote><p>① 静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用<br>② <strong>静态变量的加载要早于对象的创建</strong><br>③ 由于类只会加载一次，则静态变量在内存中也只会存在一份：<strong>存在方法区的静态域中</strong>。<br>④ 变量的调用</p><table><thead><tr><th></th><th>类变量</th><th>实例变量</th></tr></thead><tbody><tr><td>类</td><td>yes</td><td>no</td></tr><tr><td>对象</td><td>yes</td><td>yes</td></tr></tbody></table></blockquote></li><li>静态属性举例：<strong>System.out;</strong> <strong>Math.PI;</strong></li></ul></blockquote></li><li><p>使用static修饰方法：静态方法</p><blockquote><ul><li>① 随着类的加载而加载，可以通过”类.静态方法”的方式进行调用</li><li>② 变量的调用<table><thead><tr><th></th><th>类变量</th><th>实例变量</th></tr></thead><tbody><tr><td>类</td><td>yes</td><td>no</td></tr><tr><td>对象</td><td>yes</td><td>yes</td></tr></tbody></table></li><li>③ 静态方法中，只能调用静态的方法或属性；非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</li></ul></blockquote></li><li><p>static注意点：</p><blockquote><p>① 在静态的方法内，不能使用this关键字、super关键字<br>② 关于静态属性和静态方法的使用，大家都从生命周期的角度去理解。</p></blockquote></li><li><p>开发中，如何确定一个属性是否要声明为static的？</p><blockquote><p>① 属性是可以被多个对象所共享的，不会随着对象的不同而不同的。<br>② 类中的常量也常常声明为static，并配以final关键字</p></blockquote></li><li><p>开发中，如何确定一个方法是否要声明为static的？</p><blockquote><p>① 操作静态属性的方法，通常设置为static的<br>② 工具类中的方法，习惯上声明为static的。 比如：Math、Arrays、Collections</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java包装类常见面试题</title>
      <link href="/posts/367aa3e5.html"/>
      <url>/posts/367aa3e5.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>关于java中包装类的常见易错考点</p></blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterviewTest</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> o1 <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1.0 三元运算符要求类型统一</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> o2<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token comment">//Integer内部定义了IntegerCache结构，IntegerCache中定义了Integer[],</span><span class="token comment">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span><span class="token comment">//-128~127范围内时，其实是直接使用数组中的元素，不用再去new了。目的：提高效率</span><span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">//相当于new了一个Integer对象</span><span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">//相当于new了一个Integer对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的JUnit单元测试</title>
      <link href="/posts/d7c32b25.html"/>
      <url>/posts/d7c32b25.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中的JUnit单元测试说明</p></blockquote><h3 id="一、步骤"><a href="#一、步骤" class="headerlink" title="一、步骤"></a>一、步骤</h3><ol><li><p>确认开发环境（如Eclipse或IDEA）能正常使用JUnit</p></li><li><p>创建Java类，进行单元测试。</p><blockquote><p>此时的Java类要求：<br>① 此类是public的<br>② 此类提供公共的无参的构造器</p></blockquote></li><li><p>此类中声明单元测试方法。</p><blockquote><p>此时的单元测试方法：方法的权限是public,没有返回值，没有形参</p></blockquote></li><li><p>此单元测试方法上需要声明注解：@Test,并在单元测试类中导入：import org.junit.Test;</p></li><li><p>声明好单元测试方法以后，就可以在方法体内测试相关的代码。</p></li><li><p>写完代码以后，左键双击单元测试方法名，右键：run as - JUnit Test</p></li></ol><h3 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明"></a>二、说明</h3><p>1.如果执行结果没有任何异常：绿条<br>2.如果执行结果出现异常：红条</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中equals和==的区别</title>
      <link href="/posts/62608298.html"/>
      <url>/posts/62608298.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>经典面试题：java中“&#x3D;&#x3D;”和“equals()”的区别。</p></blockquote><h3 id="一、比较运算符“-x3D-x3D-”的使用："><a href="#一、比较运算符“-x3D-x3D-”的使用：" class="headerlink" title="一、比较运算符“&#x3D;&#x3D;”的使用："></a>一、比较运算符“&#x3D;&#x3D;”的使用：</h3><ol><li><p>可以使用在基本数据类型变量和引用数据类型变量中</p></li><li><p>如果比较的是基本数据类型变量：</p><blockquote><p>比较两个变量保存的数据是否相等。（不一定类型要相同，如int和short比较）</p></blockquote></li><li><p>如果比较的是引用数据类型变量：</p><blockquote><p>比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p></blockquote></li><li><p>补充：”&#x3D;&#x3D;”符号使用时，必须保证符号左右两边的变量类型一致。</p></li></ol><h3 id="二、“equals-”方法的使用"><a href="#二、“equals-”方法的使用" class="headerlink" title="二、“equals()”方法的使用"></a>二、“equals()”方法的使用</h3><ol><li><p>是一个方法，而非运算符</p></li><li><p>只能适用于引用数据类型</p></li><li><p>Object类中equals()的定义：</p><blockquote><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>说明：</strong>Object类中定义的equals()和”&#x3D;&#x3D;”的作用是相同的：比较两个对象的地址值是否相同.即两个引用是否指向同一个对象实体</p></blockquote></li><li><p>像String、Date、File、包装类等都重写了Object类中的equals()方法。重写以后，比较的不是两个引用的地址是否相同，而是比较两个对象的”实体内容”是否相同。</p></li><li><p>通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的”实体内容”是否相同。那么，我们就需要对Object类中的equals()进行重写.重写的原则：比较两个对象的实体内容是否相同.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Object类</title>
      <link href="/posts/446a4b38.html"/>
      <url>/posts/446a4b38.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>java.lang.Object类相关知识点说明</p></blockquote><ol><li><p>Object类是所有Java类的根父类</p></li><li><p>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</p></li><li><p>Object类中的功能（属性、方法）具有通用性</p><blockquote><p>属性：无<br>方法：equals() &#x2F; toString() &#x2F; getClass() &#x2F;hashCode() &#x2F; clone() &#x2F; finalize()<br>wait() 、 notify()、notifyAll()</p></blockquote></li><li><p>Object类只声明了一个空参构造器</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java语言的多态性</title>
      <link href="/posts/a9cd74ba.html"/>
      <url>/posts/a9cd74ba.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java三大特性之一多态性。</p></blockquote><ol><li><p>理解多态性：可以理解为一个事物的多种形态。</p></li><li><p>何为多态性：</p><blockquote><p>对象的多态性：父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p></blockquote></li><li><p>多态的使用：虚拟方法调用</p><blockquote><p>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</p></blockquote></li><li><p>多态性的使用前提：  ① 类的继承关系  ② 方法的重写</p></li><li><p>对象的多态性，只适用于方法，不适用于属性（编译和运行都看左边）</p></li><li><p>虚拟方法调用（多态情况下）:<br>  子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用Student类的getInfo()方法</span></code></pre></li><li><p>编译时类型和运行时类型:<br>  编译时e为Person类型，而方法的调用是在运行时确定的，所以调用的是Student类的getInfo()方法。——动态绑定</p></li><li><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。</p></li><li><p>如何调用子类所特有的属性和方法：</p><blockquote><p>向下转型：使用强制数据类型转换（<strong>注：</strong>使用强转时，可能出现ClassCastException的异常），记得使用**”instanceof”**关键字。<code>a instanceof A:判断对象a是否是类A的实例</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Man</span> m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span> p<span class="token punctuation">;</span><span class="token class-name">Woman</span> w <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Woman</span><span class="token punctuation">)</span> p<span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">goShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译不报错，运行时可能会出现ClassCastException的异常</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">Woman</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Woman</span> w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Woman</span><span class="token punctuation">)</span>p<span class="token punctuation">;</span>   w1<span class="token punctuation">.</span><span class="token function">goShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></blockquote></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">AnimalTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimalTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>animal<span class="token punctuation">;</span>d<span class="token punctuation">.</span><span class="token function">watchDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//public void func(Dog dog)&#123;</span><span class="token comment">//dog.eat();</span><span class="token comment">//dog.shout();</span><span class="token comment">//&#125;</span><span class="token comment">//public void func(Cat cat)&#123;</span><span class="token comment">//cat.eat();</span><span class="token comment">//cat.shout();</span><span class="token comment">//&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物：进食"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物：叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗吃骨头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪！汪！汪！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watchDoor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"看门"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵！喵！喵！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token comment">//面试题：多态是编译时行为还是运行时行为？</span><span class="token comment">//证明如下：</span><span class="token keyword">class</span> <span class="token class-name">Animal</span>  <span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"animal eat food"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span>  <span class="token keyword">extends</span> <span class="token class-name">Animal</span>  <span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cat eat fish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span>  <span class="token keyword">extends</span> <span class="token class-name">Animal</span>  <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog eat bone"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sheep</span>  <span class="token keyword">extends</span> <span class="token class-name">Animal</span>  <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sheep eat grass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterviewTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Animal</span>  <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Sheep</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Animal</span>  animal <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java子类对象实例化的全过程</title>
      <link href="/posts/be783292.html"/>
      <url>/posts/be783292.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中子类对象的实例化全过程分析。</p></blockquote><ol><li><p>从结果上来看：（继承性）</p><blockquote><ul><li>子类继承父类以后，就获取了父类中声明的属性或方法。</li><li>创建子类的对象，在堆空间中，就会加载所有父类中声明的属性。</li></ul></blockquote></li><li><p>从过程上来看：</p><blockquote><p>  当我们通过子类的构造器创建子类对象时，我们一定会直接或间接的调用其父类的构造器，进而调用父类的父类的构造器，… 直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类的结构，所以才可以看到内存中有父类中的结构，子类对象才可以考虑进行调用。</p></blockquote></li></ol><p><strong>注：</strong> 虽然创建子类对象时，调用了父类的构造器，但是自始至终就创建过一个对象，即为new的子类对象。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中this和super关键字的使用</title>
      <link href="/posts/d94231b8.html"/>
      <url>/posts/d94231b8.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中this和super关键字的使用。this可用来调用本类中的属性、方法、构造器；super可以用来调用父类中的属性方法构造器。</p></blockquote><h3 id="一、this关键字的使用"><a href="#一、this关键字的使用" class="headerlink" title="一、this关键字的使用"></a>一、this关键字的使用</h3><ol><li><p>this可以用来修饰、调用：属性、方法、构造器</p></li><li><p>this修饰属性和方法：this理解为当前对象或当前正在创建的对象</p><blockquote><ul><li>在类的方法中，我们可以使用”this.属性”或”this.方法”的方式，调用当前对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</li><li>在类的构造器中，我们可以使用”this.属性”或”this.方法”的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都选择省略”this.”。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</li></ul></blockquote></li><li><p>this调用构造器:<br>  ① 我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器<br>  ② 构造器中不能通过”this(形参列表)”方式调用自己<br>  ③ 如果一个类中有n个构造器，则最多有n-1个构造器中使用了”this(形参列表)”<br>  ④ <strong>规定：</strong>“this(形参列表)”必须声明在当前构造器的首行<br>  ⑤ 构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</p></li></ol><h3 id="二、super关键字的使用"><a href="#二、super关键字的使用" class="headerlink" title="二、super关键字的使用"></a>二、super关键字的使用</h3><ol><li><p>super理解为父类的</p></li><li><p>super关键字可以用来调用：属性、方法、构造器</p></li><li><p>super调用属性和方法：</p><blockquote><ul><li>我们可以在子类的方法或构造器中。通过使用”super.属性”或”super.方法”的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”</li><li><strong>特殊情况：</strong>当子类和父类中定义了同名的属性时（<strong>注意：</strong>子类的属性不会像方法那样被重写覆盖），我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。</li><li><strong>特殊情况：</strong>当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法。</li></ul></blockquote></li><li><p>super调用构造器：<br>  ① 我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器<br>  ② “super(形参列表)”的使用，必须声明在子类构造器的首行！<br>  ③ 我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二选一，不能同时出现<br>  ④ 在构造器的首行，没有显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()<br>  ⑤ 在类的多个构造器中，至少有一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器</p></li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token comment">//身份证号</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person的空参构造器被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人：吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人：走路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> major<span class="token punctuation">;</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">;</span><span class="token comment">//学号（注：属性不会像方法那样被覆盖(重写)，内存中会用两个id，一个是来自父类，一个来自本身</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//该地方虽然没有显示的调用super()，但是会默认调用super()</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> major<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//这个地方没有显示的调用"this(形参列表)"或"super(形参列表)"，则实际上默认调用super()</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> major<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类的构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>major <span class="token operator">=</span> major<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生：吃有营养的食物"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生：学习知识"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this.eat() 调用的是子类重写的方法</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的是父类的方法</span>        <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等价于this.walk()，等价于super.walk()</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用this.name或者super.name差别不大</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用this.id和super.id差别很大</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"身份证号："</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用父类中的id属性</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学号："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用子类中的id属性</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学号："</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//默认是省略了this，实际上是使用的this.id</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"计算机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java权限修饰符</title>
      <link href="/posts/1bfc4bfc.html"/>
      <url>/posts/1bfc4bfc.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中的权限修饰符（private、缺省、protected、public）</p></blockquote><p>  Java权限修饰符public、protected、private置于<strong>类的成员</strong>定义前，用来限定对象对该类成员的访问权限。</p><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td>private</td><td>Yes</td><td></td><td></td><td></td></tr><tr><td>(缺省)</td><td>Yes</td><td>Yes</td><td></td><td></td></tr><tr><td>Protected</td><td>Yes</td><td>Yes</td><td>Yes</td><td></td></tr><tr><td>public</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table><blockquote><ul><li>对于class的权限修饰符只可以用public和default(缺省)。<strong>注：</strong>构造器的权限大小默认跟类的权限大小保持一致。</li><li>public类可以在任意地方被访问。</li><li>default类只可以被同一个包内部的类访问。</li></ul></blockquote><p><strong>包 com.yczlab.java1</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>java1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> orderPrivate<span class="token punctuation">;</span>    <span class="token keyword">int</span> orderDefault<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> orderProtected<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> orderpublic<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">methodPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//方法体，任何权限的属性在类的内部都是能直接使用的</span>        orderPrivate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        orderDefault <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        orderProtected <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        orderPublic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">methodDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//方法体，任何权限的属性在类的内部都是能直接使用的</span>        orderPrivate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        orderDefault <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        orderProtected <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        orderPublic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">methodProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//方法体，任何权限的属性在类的内部都是能直接使用的</span>        orderPrivate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        orderDefault <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        orderProtected <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        orderPublic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//方法体，任何权限的属性在类的内部都是能直接使用的</span>        orderPrivate <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        orderDefault <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        orderProtected <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        orderPublic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>同一个包(com.yczlab.java1)下，使用不同权限修饰符修饰的属性和方法</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>java1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span>orderDefault <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span>orderProtected <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span>orderPublic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">methodDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">methodProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">methodPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//同一个包中的其他类，不可调用Order类中私有的属性和方法</span><span class="token comment">//      order.orderPrivate = 1; // 会报错</span><span class="token comment">//      order.methodPrivate(); // 会报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>不同包(com.yczlab.java2)下，在子类中或非子类中使用不同权限修饰符修饰的属性和方法</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>java2</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>java1<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubOrder</span> <span class="token keyword">extends</span> <span class="token class-name">Order</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        order<span class="token punctuation">.</span>orderPublic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">methodPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在不同包的非子类中不能使用以下权限的属性或方法</span><span class="token comment">//      order.orderPrivate = 1; // 会报错</span><span class="token comment">//      order.orderDefault = 2; // 会报错</span><span class="token comment">//      order.orderProtected = 3; // 会报错</span><span class="token comment">//      order.methodPrivate(); // 会报错</span><span class="token comment">//      order.methodDefault(); // 会报错</span><span class="token comment">//      order.methodProtected(); // 会报错</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    orderProtected <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//protected修饰的属性在不同包的子类中是可见的</span>        orderPublic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token function">methodProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//protected修饰的方法在不同包的子类中也是可见的</span>        <span class="token function">methodPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//父类中被private 或 (缺省) 修饰的属性和方法在不同包的子类中不可见</span><span class="token comment">//      orderDefault = 1; // 会报错</span><span class="token comment">//      orderPrivate = 2; // 会报错</span><span class="token comment">//      methodDefault(); // 会报错</span><span class="token comment">//      methodPrivate(); // 会报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>不同包(com.yczlab.java3)下，普通类中使用不同权限修饰符修饰的属性和方法</strong></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>java3</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>java1<span class="token punctuation">.</span></span><span class="token class-name">Order</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestOrder</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        order<span class="token punctuation">.</span>orderPublic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">methodPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在不同包的普通类（非子类）中不能使用以下权限的属性或方法</span><span class="token comment">//      order.orderPrivate = 1; // 会报错</span><span class="token comment">//      order.orderDefault = 2; // 会报错</span><span class="token comment">//      order.orderProtected = 3; // 会报错</span><span class="token comment">//      order.methodPrivate(); // 会报错</span><span class="token comment">//      order.methodDefault(); // 会报错</span><span class="token comment">//      order.methodProtected(); // 会报错</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    order<span class="token punctuation">.</span>orderPublic <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">methodPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在不同包的普通类（非子类）中不能使用以下权限的属性或方法</span><span class="token comment">//      order.orderPrivate = 1; // 会报错</span><span class="token comment">//      order.orderDefault = 2; // 会报错</span><span class="token comment">//      order.orderProtected = 3; // 会报错</span><span class="token comment">//      order.methodPrivate(); // 会报错</span><span class="token comment">//      order.methodDefault(); // 会报错</span><span class="token comment">//      order.methodProtected(); // 会报错</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法的重载与重写</title>
      <link href="/posts/762528c0.html"/>
      <url>/posts/762528c0.html</url>
      
        <content type="html"><![CDATA[<p>  </p><h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Java中方法的重载（Overload）与方法的重写（Override、Overwrite）的相关区别。</p></blockquote><h3 id="一、方法的重载（overload）-loading…"><a href="#一、方法的重载（overload）-loading…" class="headerlink" title="一、方法的重载（overload） loading…"></a>一、方法的重载（overload） loading…</h3><ol><li>定义：<strong>在同一个类中</strong>，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。</li><li>举例：Arrays类中的sort() &#x2F; binarySearch()</li><li>判断同类中各方法是否构成重载：<br>  跟方法的权限修饰符、返回值类型、形参变量名、方法体都没有关系。只要是在同一个类中，同名方法间的参数个数或参数类型不同，那么这些方法相互之间构成方法的重载。</li><li>在通过对象调用方法时，是通过方法名和参数列表确定具体调用的是哪一个方法。</li></ol><h3 id="二、方法的重写（override、overwrite）"><a href="#二、方法的重写（override、overwrite）" class="headerlink" title="二、方法的重写（override、overwrite）"></a>二、方法的重写（override、overwrite）</h3><ol><li>定义：当子类继承父类以后，子类可以对父类中同名同参数的方法，进行覆盖操作。该操作称为“方法的重写”。</li><li>应用：父类方法被子类重写后，当创建子类对象后，通过子类对象调用子父类中的同名同参数的方法时，实际执行的是子类重写父类的方法。</li><li>重写的一些细节规定：</li></ol><ul><li><p>方法的声明：</p><blockquote><p><strong>权限修饰符 返回值类型 方法名(形参列表) throws 异常的类型{<br>  &#x2F;&#x2F;方法体<br> }</strong></p></blockquote></li><li><p>约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法</p></li><li><p>子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</p></li><li><p>子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</p><blockquote><p>特殊情况：子类不能重写父类中声明为private权限的方法</p></blockquote></li><li><p>返回值类型：</p><blockquote><ul><li>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void</li><li>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类</li><li>父类被重写的方法的返回值类型是基本数据类型（byte、short、int、long、float、double、char、boolean），则子类重写的方法的返回值类型必须是相同的基本数据类型</li><li>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</li></ul></blockquote></li><li><p>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的继承性</title>
      <link href="/posts/544335fd.html"/>
      <url>/posts/544335fd.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>关于Java三大特性（封装、继承、多态）中的继承性说明。<br>主要是为了自己方便理解。</p></blockquote><h3 id="一、继承性的好处："><a href="#一、继承性的好处：" class="headerlink" title="一、继承性的好处："></a>一、继承性的好处：</h3><p>  ① 减少了代码的冗余，提高了代码的复用性<br>  ② 便于功能的扩展<br>  ③ 为之后多态性的使用，提供了前提</p><h3 id="二、继承性的格式"><a href="#二、继承性的格式" class="headerlink" title="二、继承性的格式"></a>二、继承性的格式</h3><p>  <strong>class A extends B{}</strong><br>  <strong>A:子类、派生类、subclass</strong><br>  <strong>B:父类、超类、基类、superclass</strong><br>  一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。只有因为封装性的影响，使得子类不能直接调用父类的结构而已。<br>  子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。子类和父类的关系，不同于子集和集合的关系。extends：延展、扩展</p><h3 id="三、Java中关于继承性的规定："><a href="#三、Java中关于继承性的规定：" class="headerlink" title="三、Java中关于继承性的规定："></a>三、Java中关于继承性的规定：</h3><ul><li>一个类可以被多个子类继承。</li><li>Java中类的单继承性：一个类只能有一个父类</li><li>子父类是相对的概念。</li><li>子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类</li><li>子类继承父类以后，就获取了直接父类以及所有间接父类中声明的属性和方法</li></ul><h3 id="四、说明："><a href="#四、说明：" class="headerlink" title="四、说明："></a>四、说明：</h3><ul><li>如果我们没有显式的声明一个类的父类的话，则此类继承于java.lang.Object类。</li><li>所有的java类（除java.lang.Object类之外）都直接或间接的继承于java.lang.Object类。</li><li>意味着，所有的java类具有java.lang.Object类声明的功能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测评价标准mAP</title>
      <link href="/posts/9fc5d2ad.html"/>
      <url>/posts/9fc5d2ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>目标检测中的AP和mAP计算方法,看了几篇相关资料，知乎上一篇文章<br><a href="https://zhuanlan.zhihu.com/p/43068926">https://zhuanlan.zhihu.com/p/43068926</a> 写的容易理解，转载以学习，为了方便自己理解。</p></blockquote><h3 id="1、Recall-amp-Precision"><a href="#1、Recall-amp-Precision" class="headerlink" title="1、Recall &amp; Precision"></a>1、Recall &amp; Precision</h3><p>  mAP全称是mean Average Precision，这里的Average Precision，是在不同recall下计算得到的，所以要知道什么是mAP，要先了解recall（召回率）和precision（精确率）。<br>  recall和precision是二分类问题中常用的评价指标，通常以关注的类为正类，其他类为负类，分类器的结果在测试数据上有4种情况：</p><table><thead><tr><th></th><th>实际 1</th><th>实际 0</th></tr></thead><tbody><tr><td><strong>预测 1</strong></td><td>TP（True Positive）</td><td>FP（False Positive）</td></tr><tr><td><strong>预测 0</strong></td><td>FN（False Negative）</td><td>TN（True Negative）</td></tr></tbody></table><p>计算公式分别为：<br><img src="/posts/9fc5d2ad/1.png" alt="image"><br><strong>用一个具体的例子说明：</strong><br>  假设我们在数据集上训练了一个识别猫咪的模型，测试集包含100个样本，其中猫咪60张，另外40张为小狗。测试结果显示为猫咪的一共有52张图片，其中确实为猫咪的共50张，也就是有10张猫咪没有被模型检测出来，而且在检测结果中有2张为误检。因为猫咪更可爱，我们更关注猫咪的检测情况，所以这里将猫咪认为是正类：</p><p>所以TP&#x3D;50，TN&#x3D;38，FN&#x3D;10，FP&#x3D;2，P&#x3D;50&#x2F;52，R&#x3D;50&#x2F;60，acc&#x3D;(50+38)&#x2F;(50+38+10+2)</p><p><strong>为什么要引入recall和precision？</strong></p><p>recall和precision是模型性能两个不同维度的度量：</p><p>  在图像分类任务中，虽然很多时候考察的是accuracy，比如ImageNet的评价标准。但具体到单个类别，如果recall比较高，但precision较低，比如大部分的汽车都被识别出来了，但把很多卡车也误识别为了汽车，这时候对应一个原因。如果recall较低，precision较高，比如检测出的飞机结果很准确，但是有很多的飞机没有被识别出来，这时候又有一个原因。</p><p>  recall度量的是「查全率」，所有的正样本是不是都被检测出来了。比如在肿瘤预测场景中，要求模型有更高的recall，不能放过每一个肿瘤。</p><p>  precision度量的是「查准率」，在所有检测出的正样本中是不是实际都为正样本。比如在垃圾邮件判断等场景中，要求有更高的precision，确保放到回收站的都是垃圾邮件。</p><h3 id="2、mAP（mean-Average-Precision）"><a href="#2、mAP（mean-Average-Precision）" class="headerlink" title="2、mAP（mean Average Precision）"></a>2、mAP（mean Average Precision）</h3><p>在查找资料的过程中，发现从信息检索的角度出发更容易理解mAP的含义。</p><p>  在信息检索当中，比如我们搜索一个条目，相关的条目在数据库中一共有5条，但搜索的结果一共有10条（包含4条相关条目）。这个时候精确率precision&#x3D;返回结果中相关的条目数&#x2F;返回总条目数，在这里等于4&#x2F;10。召回率recall&#x3D;返回结果中相关条目数&#x2F;相关条目总数，在这里等于4&#x2F;5。但对于一个搜索系统，相关条目在结果中的顺序是非常影响用户体验的，我们希望相关的结果越靠前越好。比如在这个例子中，4个条目出现在位置查询一（1，2，4，7）就比在查询二（3，5，6，8）效果要好，但两者的precision是相等的。这时候单单一个precision不足以衡量系统的好坏，于是引入了AP（Average Precision）——不同召回率上的平均precision。对于上面两个例子。</p><p>查询一：</p><pre class="language-text" data-language="text"><code class="language-text">rank | correct |   P   |   R-----------------------------  1   | right  |  1/1  |  1/5-----------------------------  2  |  right  | 2/2  |  2/5-----------------------------  3  |  wrong  | 2/3  |  2/5-----------------------------  4  |   right | 3/4  |  3/5-----------------------------  5  |  wrong  | 3/5  |  3/5-----------------------------  6  |  wrong  | 3/6  |  3/5-----------------------------  7  |  right  | 4/7  |  4/5-----------------------------  8  |  wrong  | 4/8  |  4/5-----------------------------  9  |  wrong  | 4/9  |  4/5-----------------------------  10 |  wrong  | 4/10 |  4/5------------------------------</code></pre><p>查询一：</p><pre class="language-text" data-language="text"><code class="language-text">rank | correct |   P   |   R -----------------------------   1  |  wrong  |   0   |   0 -----------------------------   2  |  wrong  |   0   |   0 -----------------------------   3  |  right  | 1/3  |  1/5 -----------------------------   4  |  wrong  | 1/4  |  1/5 -----------------------------   5  |  right  | 2/5  |  2/5 -----------------------------   6  |  right  | 3/6  |  3/5 -----------------------------   7  |  wrong  | 3/7  |  3/5 -----------------------------   8  |  right  | 4/8  |  4/5 -----------------------------   9  |  wrong  | 4/9  |  4/5 -----------------------------  10  |  wrong  | 4/10 |  4/5 -----------------------------</code></pre><p>AP(查询一) &#x3D; (1+1+3&#x2F;4+4&#x2F;7+0)&#x2F;5 &#x3D; 0.664</p><p>AP(查询二) &#x3D; (1&#x2F;3+2&#x2F;5+3&#x2F;6+4&#x2F;8+0)&#x2F;5 &#x3D; 0.347</p><p>这个时候mAP &#x3D; (0.664+0.347)&#x2F;2 &#x3D; 0.51</p><p><strong>分析：</strong>对于上面的例子，最好的结果就是5个条目全部被检索到，并且分别排在rank&#x3D;1、2、3、4、5的位置，这时AP&#x3D;1。<strong>所以可以得出即使条目被全部检索到，但结果的先后顺序决定了一个系统的好坏。这个结论会用在目标检测当中。</strong></p><p><strong>注：</strong>precision在计算的时候取各个召回率下最大的那个，因为同一recall下最大的precision表示该条目最先出现的位置。</p><h3 id="3、目标检测中的mAP"><a href="#3、目标检测中的mAP" class="headerlink" title="3、目标检测中的mAP"></a>3、目标检测中的mAP</h3><p>  图像分类任务通常用accuracy来衡量模型的准确率，对于目标检测任务，比如测试集上的所有图片一共有1000个object（这里的object不是图片的数量，因为一张图片中可能包含若干个object），两个模型都正确检测出了900个object（IOU&gt;规定的阈值）。与图像分类任务不同的是，目标检测因为可能出现重复检测的情况，所以不是一个n to n的问题。在上面的例子中也就不能简单用分类任务的accuracy来衡量模型性能，因为模型A有可能是预测了2000个结果才中了900个，而模型B可能只预测了1200个结果。模型B的性能显然要好于A，因为模型A更像是广撒网，误检测的概率比较高。想象一下如果将模型A用在自动驾驶的汽车上，出现很多误检测的情况对汽车的安全性和舒适性都有很大影响。</p><p>  那在目标检测任务中，应该怎样衡量模型的性能？其中一个标准就是信息检索那样，不仅要衡量检测出正确目标的数量，还应该评价模型是否能以较高的precision检测出目标。也就是在某个类别下的检测，在检测出正确目标之前，是不是出现了很多判断失误。AP越高，说明检测失误越少。对于所有类别的AP求平均就得到mAP了。</p><h3 id="4、计算方法和相关代码"><a href="#4、计算方法和相关代码" class="headerlink" title="4、计算方法和相关代码"></a>4、计算方法和相关代码</h3><p><strong>voc2007的计算方法：</strong><br>在计算AP时，首先要把结果按照置信度排序，公式如下：<br><img src="/posts/9fc5d2ad/2.png" alt="image"></p><p><strong>voc2010的计算方法：</strong><br>  比起07年，10年以后的新方法是取所有真实的recall值，按照07年的方法得到所有recall&#x2F;precision数据点以后，计算recall&#x2F;precision曲线下的面积：</p><blockquote><p>Compute a version of the measured precision&#x2F;recall curve with precision monotonically decreasing, by setting the precision for recall r to the maximum precision obtained for any recall r′ ≥ r.<br>Compute the AP as the area under this curve by numerical integration. No approximation is involved since the curve is piecewise constant.</p></blockquote><p><strong>举一个例子具体说明：</strong><br>对于Aeroplane类别，我们有以下输出（BB表示Bounding Box序号，IOU&gt;0.5时GT&#x3D;1）：</p><pre class="language-text" data-language="text"><code class="language-text">BB  | confidence | GT----------------------BB1 |  0.9       | 1----------------------BB2 |  0.9       | 1----------------------BB1 |  0.8       | 1----------------------BB3 |  0.7       | 0----------------------BB4 |  0.7       | 0----------------------BB5 |  0.7       | 1----------------------BB6 |  0.7       | 0----------------------BB7 |  0.7       | 0----------------------BB8 |  0.7       | 1----------------------BB9 |  0.7       | 1----------------------</code></pre><p>因此，我们有 TP&#x3D;5 (BB1, BB2, BB5, BB8, BB9), FP&#x3D;5 (重复检测到的BB1也算FP)。除了表里检测到的5个GT以外，我们还有2个GT没被检测到，因此: FN &#x3D; 2. 这时我们就可以按照Confidence的顺序给出各处的PR值，如下：</p><pre class="language-text" data-language="text"><code class="language-text">rank=1  precision=1.00 and recall=0.14------------------------------rank=2  precision=1.00 and recall=0.29------------------------------rank=3  precision=0.66 and recall=0.29------------------------------rank=4  precision=0.50 and recall=0.29------------------------------rank=5  precision=0.40 and recall=0.29------------------------------rank=6  precision=0.50 and recall=0.43------------------------------rank=7  precision=0.43 and recall=0.43------------------------------rank=8  precision=0.38 and recall=0.43------------------------------rank=9  precision=0.44 and recall=0.57------------------------------rank=10 precision=0.50 and recall=0.71------------------------------</code></pre><p><strong>07年的方法：</strong><br>  我们选取Recall &gt;&#x3D;{ 0, 0.1, …, 1}的11处Percision的最大值：1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0, 0。AP &#x3D; 5.5 &#x2F; 11 &#x3D; 0.5</p><p><strong>VOC2010及以后的方法：</strong><br>  对于Recall &gt;&#x3D; {0, 0.14, 0.29, 0.43, 0.57, 0.71, 1}，我们选取此时Percision的最大值：1, 1, 1, 0.5, 0.5, 0.5, 0。计算recall&#x2F;precision下的面积：AP &#x3D; (0.14-0)x1 + (0.29-0.14)x1 + (0.43-0.29)x0.5 + (0.57-0.43)x0.5 + (0.71-0.57)x0.5 + (1-0.71)x0 &#x3D; 0.5</p><p>计算出每个类别的AP以后，对于所有类别的AP取均值就得到mAP了。</p><p>代码:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 计算recall, precision和AP</span>class_recs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    npos <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> imagename <span class="token keyword">in</span> imagenames<span class="token punctuation">:</span>        R <span class="token operator">=</span> <span class="token punctuation">[</span>obj <span class="token keyword">for</span> obj <span class="token keyword">in</span> recs<span class="token punctuation">[</span>imagename<span class="token punctuation">]</span> <span class="token keyword">if</span> obj<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> classname<span class="token punctuation">]</span>         bbox <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token string">'bbox'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> R<span class="token punctuation">]</span><span class="token punctuation">)</span>        difficult <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token string">'difficult'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> R<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">)</span>        det <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token comment">#这个值是用来判断是否重复检测的</span>        npos <span class="token operator">=</span> npos <span class="token operator">+</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token operator">~</span>difficult<span class="token punctuation">)</span>        class_recs<span class="token punctuation">[</span>imagename<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'bbox'</span><span class="token punctuation">:</span> bbox<span class="token punctuation">,</span>                                 <span class="token string">'difficult'</span><span class="token punctuation">:</span> difficult<span class="token punctuation">,</span>                                 <span class="token string">'det'</span><span class="token punctuation">:</span> det<span class="token punctuation">&#125;</span>    <span class="token comment"># read dets</span>    detfile <span class="token operator">=</span> detpath<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>detfile<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    splitlines <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> lines<span class="token punctuation">]</span>    image_ids <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> splitlines<span class="token punctuation">]</span>    confidence <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> splitlines<span class="token punctuation">]</span><span class="token punctuation">)</span>    BB <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token keyword">for</span> z <span class="token keyword">in</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> splitlines<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># sort by confidence</span>    sorted_ind <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token operator">-</span>confidence<span class="token punctuation">)</span>    BB <span class="token operator">=</span> BB<span class="token punctuation">[</span>sorted_ind<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>    image_ids <span class="token operator">=</span> <span class="token punctuation">[</span>image_ids<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> sorted_ind<span class="token punctuation">]</span>    <span class="token comment"># go down dets and mark TPs and FPs</span>    nd <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>image_ids<span class="token punctuation">)</span>    tp <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>nd<span class="token punctuation">)</span>    fp <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>nd<span class="token punctuation">)</span>    <span class="token keyword">for</span> d <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>nd<span class="token punctuation">)</span><span class="token punctuation">:</span>        R <span class="token operator">=</span> class_recs<span class="token punctuation">[</span>image_ids<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">]</span>        bb <span class="token operator">=</span> BB<span class="token punctuation">[</span>d<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>        ovmax <span class="token operator">=</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>inf        BBGT <span class="token operator">=</span> R<span class="token punctuation">[</span><span class="token string">'bbox'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> BBGT<span class="token punctuation">.</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># compute overlaps</span>            <span class="token comment"># intersection</span>            ixmin <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>BBGT<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            iymin <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>BBGT<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            ixmax <span class="token operator">=</span> np<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>BBGT<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bb<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            iymax <span class="token operator">=</span> np<span class="token punctuation">.</span>minimum<span class="token punctuation">(</span>BBGT<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bb<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            iw <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>ixmax <span class="token operator">-</span> ixmin <span class="token operator">+</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">)</span>            ih <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>iymax <span class="token operator">-</span> iymin <span class="token operator">+</span> <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">)</span>            inters <span class="token operator">=</span> iw <span class="token operator">*</span> ih            <span class="token comment"># union</span>            uni <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bb<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> bb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1.</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>bb<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> bb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1.</span><span class="token punctuation">)</span> <span class="token operator">+</span>                   <span class="token punctuation">(</span>BBGT<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> BBGT<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1.</span><span class="token punctuation">)</span> <span class="token operator">*</span>                   <span class="token punctuation">(</span>BBGT<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> BBGT<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1.</span><span class="token punctuation">)</span> <span class="token operator">-</span> inters<span class="token punctuation">)</span>            overlaps <span class="token operator">=</span> inters <span class="token operator">/</span> uni            ovmax <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>overlaps<span class="token punctuation">)</span>            jmax <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>overlaps<span class="token punctuation">)</span>        <span class="token keyword">if</span> ovmax <span class="token operator">></span> ovthresh<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> R<span class="token punctuation">[</span><span class="token string">'difficult'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>jmax<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> R<span class="token punctuation">[</span><span class="token string">'det'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>jmax<span class="token punctuation">]</span><span class="token punctuation">:</span>                    tp<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.</span>                    R<span class="token punctuation">[</span><span class="token string">'det'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>jmax<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">#判断是否重复检测，检测过一次以后，值就从False变为1了</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    fp<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            fp<span class="token punctuation">[</span>d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.</span>    <span class="token comment"># compute precision recall</span>    fp <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>    tp <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>tp<span class="token punctuation">)</span>    rec <span class="token operator">=</span> tp <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span>npos<span class="token punctuation">)</span>    <span class="token comment"># avoid divide by zero in case the first detection matches a difficult</span>    <span class="token comment"># ground truth</span>    prec <span class="token operator">=</span> tp <span class="token operator">/</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>tp <span class="token operator">+</span> fp<span class="token punctuation">,</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token punctuation">.</span>eps<span class="token punctuation">)</span>    ap <span class="token operator">=</span> voc_ap<span class="token punctuation">(</span>rec<span class="token punctuation">,</span> prec<span class="token punctuation">,</span> use_07_metric<span class="token punctuation">)</span>    <span class="token keyword">return</span> rec<span class="token punctuation">,</span> prec<span class="token punctuation">,</span> ap</code></pre><p>计算AP:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">voc_ap</span><span class="token punctuation">(</span>rec<span class="token punctuation">,</span> prec<span class="token punctuation">,</span> use_07_metric<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Compute VOC AP given precision and recall. If use_07_metric is true, uses    the VOC 07 11-point method (default:False).    """</span>    <span class="token keyword">if</span> use_07_metric<span class="token punctuation">:</span>        <span class="token comment"># 11 point metric</span>        ap <span class="token operator">=</span> <span class="token number">0.</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>rec <span class="token operator">>=</span> t<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                p <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                p <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>prec<span class="token punctuation">[</span>rec <span class="token operator">>=</span> t<span class="token punctuation">]</span><span class="token punctuation">)</span>            ap <span class="token operator">=</span> ap <span class="token operator">+</span> p <span class="token operator">/</span> <span class="token number">11.</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># correct AP calculation</span>        <span class="token comment"># first append sentinel values at the end</span>        mrec <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rec<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mpre <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prec<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># compute the precision envelope</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mpre<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mpre<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>mpre<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mpre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>mrec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">!=</span> mrec<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment"># and sum (\Delta recall) * prec</span>        ap <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mrec<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> mrec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> mpre<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#计算面积</span>    <span class="token keyword">return</span> ap</code></pre><p>计算mAP:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mAP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    detpath<span class="token punctuation">,</span>annopath<span class="token punctuation">,</span>imagesetfile<span class="token punctuation">,</span>cachedir<span class="token punctuation">,</span>class_path <span class="token operator">=</span> get_dir<span class="token punctuation">(</span><span class="token string">'kitti'</span><span class="token punctuation">)</span>    ovthresh<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>    use_07_metric<span class="token operator">=</span><span class="token boolean">False</span>    rec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> prec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> mAP <span class="token operator">=</span> <span class="token number">0</span>    class_list <span class="token operator">=</span> get_classlist<span class="token punctuation">(</span>class_path<span class="token punctuation">)</span>    <span class="token keyword">for</span> classname <span class="token keyword">in</span> class_list<span class="token punctuation">:</span>        rec<span class="token punctuation">,</span> prec<span class="token punctuation">,</span> ap <span class="token operator">=</span> voc_eval<span class="token punctuation">(</span>detpath<span class="token punctuation">,</span>                                 annopath<span class="token punctuation">,</span>                                 imagesetfile<span class="token punctuation">,</span>                                 classname<span class="token punctuation">,</span>                                 cachedir<span class="token punctuation">,</span>                                 ovthresh<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                                 use_07_metric<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                 kitti<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'on &#123;&#125;, the ap is &#123;&#125;, recall is &#123;&#125;, precision is &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>classname<span class="token punctuation">,</span> ap<span class="token punctuation">,</span> rec<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prec<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        mAP <span class="token operator">+=</span> ap    mAP <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>mAP<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>class_list<span class="token punctuation">)</span>    <span class="token keyword">return</span> mAP</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda设置镜像后安装较大的包还是很慢</title>
      <link href="/posts/d2055be1.html"/>
      <url>/posts/d2055be1.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>有时候使用conda安装环境时，遇到较大的包下载极其缓慢，并且在设置好镜像后还是安装缓慢，这里分享一个离线安装的办法。</p></blockquote><h3 id="通过其他方法下载所需要的包"><a href="#通过其他方法下载所需要的包" class="headerlink" title="通过其他方法下载所需要的包"></a>通过其他方法下载所需要的包</h3><h4 id="1-通过浏览器下载"><a href="#1-通过浏览器下载" class="headerlink" title="1. 通过浏览器下载"></a>1. 通过浏览器下载</h4><p>  在镜像网站中找到需要的安装包的下载地址（或者通过conda安装时，提示你下载出错的那个网址），比如这个pytorch包的镜像下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.3.1-py27_cuda8.0.61_cudnn7.1.2_3.tar.bz2">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.3.1-py27_cuda8.0.61_cudnn7.1.2_3.tar.bz2</a> 有几百兆，通常通过conda安装时会因为网络原因下载错误。那么就可以直接将该网址复制到浏览器中进行下载。下载速度应该是会有提升的，如果还是下载很慢（最近我就是遇到了这样情况），接着往下看。</p><h4 id="2-通过自己的服务器进行下载"><a href="#2-通过自己的服务器进行下载" class="headerlink" title="2. 通过自己的服务器进行下载"></a>2. 通过自己的服务器进行下载</h4><p>  如果通过浏览器下载需要的包，速度还是很慢，那就可以尝试采用通过自己的服务器来进行下载，当然前提是得有自己的服务器。在本地通过<code>ssh</code>命令，使用<code>用户名</code>和<code>密码</code>登录自己的服务器；然后使用<code>wget</code>命令将包下载到自己的服务器上，比如<code>wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.3.1-py27_cuda8.0.61_cudnn7.1.2_3.tar.bz2</code>，这个过程通常不是一般的快（反正我再阿里云服务器上这样操作还挺快的）。这个时候安装包已经下载到你的服务器上了，但是还没有下载到你的本地，接下来在本地通过<code>scp</code>命令将你服务器上的安装包传到你本地来。比如<code>scp username@serverName:/文件路径 本地路径</code>，注意此处的“本地路径”前有空格，具体可以百度一下scp命令，这样就可以将安装包传递到本地了。这两个过程所需要的时间可能比从浏览器直接下载还快，反正我测试的时候就是挺快的。浏览器下载需要大约2小时（我也不知道为啥这么慢，反正就是很不稳定），然而这两个操作（先下载到服务器，再从服务器传递到本地）只需要大于10分钟不到。</p><h3 id="将下载好的包放入指定文件目录下"><a href="#将下载好的包放入指定文件目录下" class="headerlink" title="将下载好的包放入指定文件目录下"></a>将下载好的包放入指定文件目录下</h3><p>  将下载来的安装包复制到Anaconda安装目录中的pkgs子目录中</p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>  将下载地址 <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.3.1-py27_cuda8.0.61_cudnn7.1.2_3.tar.bz2">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/pytorch-0.3.1-py27_cuda8.0.61_cudnn7.1.2_3.tar.bz2</a> 复制到pkgs目录中的urls.txt文件中，保存。</p><h3 id="再次运行conda命令进行安装"><a href="#再次运行conda命令进行安装" class="headerlink" title="再次运行conda命令进行安装"></a>再次运行conda命令进行安装</h3><p>  conda install pytorch&#x3D;0.3.1</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YOLOv1的Pytorch实现</title>
      <link href="/posts/d3bd5c5a.html"/>
      <url>/posts/d3bd5c5a.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>这里分享一下YOLOv1网络的Pytorch实现，关于YOLOv1的网络结构，建议还是看一下原论文，因为这里只是介绍代码实现。文中代码均使用了GPU，如果要用CPU尝试，可以将代码中的.cuda()都去掉，但是不建议这么做，因为这个网络还挺大的，CPU很可能跑不动。如有错误，请评论指出，共同进步，谢谢。<br>原文链接：<a href="https://blog.csdn.net/weixin_41424926/article/details/105383064">https://blog.csdn.net/weixin_41424926/article/details/105383064</a></p></blockquote><h3 id="1、数据处理"><a href="#1、数据处理" class="headerlink" title="1、数据处理"></a>1、数据处理</h3><h4 id="1-1-数据集介绍"><a href="#1-1-数据集介绍" class="headerlink" title="1.1 数据集介绍"></a>1.1 数据集介绍</h4><p>  搭建网络前首先要将原始数据集的数据格式转变为我们方便使用的格式。这里使用的是VOC2012数据集，下载下来有如下五个文件夹：<br><img src="/posts/d3bd5c5a/1.png" alt="image"><br>  Annotations文件夹是存放图片对应的xml文件，比如“2007_000027.xml”存放的是图片2007_000027.jpg对应的信息，用记事本打开可以看到，这是xml格式的数据，里面除了图片的基本信息以外，还有一项&lt; object &gt;类，里面分别存放了类别的名称(&lt; name &gt;)，识别的难易程度(&lt; difficult &gt;)，以及bounding box的坐标信息&lt; bndbox &gt;，这里存放的box信息是以两点式存放，也就是左上角点和右下角点。当然，VOC数据集不只是用于目标检测任务，所以还存放了一些其他信息，比如人体的具体部分(&lt; part &gt;)等，这些就不用关注了。<br><img src="/posts/d3bd5c5a/2.png" alt="image"><br>  ImageSets文件夹里存放了官方为我们划分好的训练集和验证集的txt文件。我们主要使用“ImageSets&#x2F;Main&#x2F;“文件夹下的train.txt和val.txt文件，train.txt文件存放了官方划分的训练集的图片名称，val.txt文件存放了验证集图片的名称。<br>  还有一个需要关注的文件夹就是JEPGImages，里面存放了对应图片名称的原始图片。剩下的两个文件夹我们就不需要特别关注了。</p><h4 id="1-2-数据的提取和转换"><a href="#1-2-数据的提取和转换" class="headerlink" title="1.2 数据的提取和转换"></a>1.2 数据的提取和转换</h4><p>  了解数据集后，很明显，我们需要将图片对应的xml文件中bounding box的信息提取出来，并转换为我们需要的(cls,xc,yc,w,h)格式，其中cls是根据物体类别的序号决定的，物体类别排序储存在全局变量CLASSES中。</p><pre class="language-python" data-language="python"><code class="language-python">CLASSES <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'person'</span><span class="token punctuation">,</span> <span class="token string">'bird'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'cow'</span><span class="token punctuation">,</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'horse'</span><span class="token punctuation">,</span> <span class="token string">'sheep'</span><span class="token punctuation">,</span>           <span class="token string">'aeroplane'</span><span class="token punctuation">,</span> <span class="token string">'bicycle'</span><span class="token punctuation">,</span> <span class="token string">'boat'</span><span class="token punctuation">,</span> <span class="token string">'bus'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span> <span class="token string">'motorbike'</span><span class="token punctuation">,</span> <span class="token string">'train'</span><span class="token punctuation">,</span>           <span class="token string">'bottle'</span><span class="token punctuation">,</span> <span class="token string">'chair'</span><span class="token punctuation">,</span> <span class="token string">'dining table'</span><span class="token punctuation">,</span> <span class="token string">'potted plant'</span><span class="token punctuation">,</span> <span class="token string">'sofa'</span><span class="token punctuation">,</span> <span class="token string">'tvmonitor'</span><span class="token punctuation">]</span></code></pre><p>  使用下面三个子函数，调用make_label_txt()函数，就可以在当前项目文件夹的labesl文件夹下创造出与图片对应的txt文件，比如图片2007_000027.jpg，就有对应的2007_000027.txt文件，里面储存着图片2007_000027.jpg的所有bbox信息，每行一个。注意，要从.xml中提取信息，需要有xml库。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>ElementTree <span class="token keyword">as</span> ET<span class="token keyword">import</span> os<span class="token keyword">import</span> cv2<span class="token keyword">def</span> <span class="token function">convert</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> box<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将bbox的左上角点、右下角点坐标的格式，转换为bbox中心点+bbox的w,h的格式    并进行归一化"""</span>    dw <span class="token operator">=</span> <span class="token number">1.</span> <span class="token operator">/</span> size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    dh <span class="token operator">=</span> <span class="token number">1.</span> <span class="token operator">/</span> size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span>    w <span class="token operator">=</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    h <span class="token operator">=</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> dw    w <span class="token operator">=</span> w <span class="token operator">*</span> dw    y <span class="token operator">=</span> y <span class="token operator">*</span> dh    h <span class="token operator">=</span> h <span class="token operator">*</span> dh    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">convert_annotation</span><span class="token punctuation">(</span>image_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""把图像image_id的xml文件转换为目标检测的label文件(txt)    其中包含物体的类别，bbox的左上角点坐标以及bbox的宽、高    并将四个物理量归一化"""</span>    in_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>DATASET_PATH <span class="token operator">+</span> <span class="token string">'Annotations/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>image_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    image_id <span class="token operator">=</span> image_id<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    out_file <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./labels/%s.txt'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>image_id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    tree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>in_file<span class="token punctuation">)</span>    root <span class="token operator">=</span> tree<span class="token punctuation">.</span>getroot<span class="token punctuation">(</span><span class="token punctuation">)</span>    size <span class="token operator">=</span> root<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">)</span>    w <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    h <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">for</span> obj <span class="token keyword">in</span> root<span class="token punctuation">.</span><span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        difficult <span class="token operator">=</span> obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'difficult'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        cls <span class="token operator">=</span> obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> cls <span class="token keyword">not</span> <span class="token keyword">in</span> CLASSES <span class="token keyword">or</span> <span class="token builtin">int</span><span class="token punctuation">(</span>difficult<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        cls_id <span class="token operator">=</span> CLASSES<span class="token punctuation">.</span>index<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        xmlbox <span class="token operator">=</span> obj<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'bndbox'</span><span class="token punctuation">)</span>        points <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>xmlbox<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'xmin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>xmlbox<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'xmax'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span>xmlbox<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ymin'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token builtin">float</span><span class="token punctuation">(</span>xmlbox<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ymax'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>        bb <span class="token operator">=</span> convert<span class="token punctuation">(</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> points<span class="token punctuation">)</span>        out_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>cls_id<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> bb<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_label_txt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""在labels文件夹下创建image_id.txt，对应每个image_id.xml提取出的bbox信息"""</span>    filenames <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>DATASET_PATH <span class="token operator">+</span> <span class="token string">'Annotations'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>        convert_annotation<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span></code></pre><p>  生成好图片对应的.txt文件后，要注意进行检查，自己写项目的时候要养成习惯，做完一部分工作后，最好写代码验证一下是否能正常完成自己想要的任务。比如我们将xml文件的bounding box提取出来，就需要检验一下提出的数据经过转换后是否保持原样，最简单的检验方式就是在原图中，利用.txt里的数据绘出bbox并输出对应框的类别信息，看看是否合理。可以用以下代码检验。以图片2008_000007.jpg为例，可以看到如下图结果，确认信息提取无误。<br><img src="/posts/d3bd5c5a/3.png" alt="image"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show_labels_img</span><span class="token punctuation">(</span>imgname<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token triple-quoted-string string">"""imgname是输入图像的名称，无下标"""</span>    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>DATASET_PATH <span class="token operator">+</span> <span class="token string">"JPEGImages/"</span> <span class="token operator">+</span> imgname <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span>    h<span class="token punctuation">,</span> w <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>h<span class="token punctuation">)</span>    label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./labels/"</span><span class="token operator">+</span>imgname<span class="token operator">+</span><span class="token string">".txt"</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> flabel<span class="token punctuation">:</span>        <span class="token keyword">for</span> label <span class="token keyword">in</span> flabel<span class="token punctuation">:</span>            label <span class="token operator">=</span> label<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> label<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>CLASSES<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            pt1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> w <span class="token operator">-</span> label<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> w <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> h <span class="token operator">-</span> label<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            pt2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> w <span class="token operator">+</span> label<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> w <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> h <span class="token operator">+</span> label<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img<span class="token punctuation">,</span>CLASSES<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>label<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pt1<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEX<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span>pt1<span class="token punctuation">,</span>pt2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><h5 id="1-3-pytorch的Dataset类构造"><a href="#1-3-pytorch的Dataset类构造" class="headerlink" title="1.3 pytorch的Dataset类构造"></a>1.3 pytorch的Dataset类构造</h5><p>  准备好数据后，就要按老套路开始准备训练了。首先要准备训练使用的Dataset类。具体代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VOC2012</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>is_train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>is_aug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param is_train: 调用的是训练集(True)，还是验证集(False)        :param is_aug:  是否进行数据增广        """</span>        self<span class="token punctuation">.</span>filenames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 储存数据集的文件名称</span>        <span class="token keyword">if</span> is_train<span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>DATASET_PATH <span class="token operator">+</span> <span class="token string">"ImageSets/Main/train.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token comment"># 调用包含训练集图像名称的txt文件</span>                self<span class="token punctuation">.</span>filenames <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> f<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>DATASET_PATH <span class="token operator">+</span> <span class="token string">"ImageSets/Main/val.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>filenames <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> f<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>imgpath <span class="token operator">=</span> DATASET_PATH <span class="token operator">+</span> <span class="token string">"JPEGImages/"</span>  <span class="token comment"># 原始图像所在的路径</span>        self<span class="token punctuation">.</span>labelpath <span class="token operator">=</span> <span class="token string">"./labels/"</span>  <span class="token comment"># 图像对应的label文件(.txt文件)的路径</span>        self<span class="token punctuation">.</span>is_aug <span class="token operator">=</span> is_aug    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filenames<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>self<span class="token punctuation">.</span>imgpath<span class="token operator">+</span>self<span class="token punctuation">.</span>filenames<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">".jpg"</span><span class="token punctuation">)</span>  <span class="token comment"># 读取原始图像</span>        h<span class="token punctuation">,</span>w <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        input_size <span class="token operator">=</span> <span class="token number">448</span>  <span class="token comment"># 输入YOLOv1网络的图像尺寸为448x448</span>        <span class="token comment"># 因为数据集内原始图像的尺寸是不定的，所以需要进行适当的padding，将原始图像padding成宽高一致的正方形</span>        <span class="token comment"># 然后再将Padding后的正方形图像缩放成448x448</span>        padw<span class="token punctuation">,</span> padh <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>  <span class="token comment"># 要记录宽高方向的padding具体数值，因为padding之后需要调整bbox的位置信息</span>        <span class="token keyword">if</span> h<span class="token operator">></span>w<span class="token punctuation">:</span>            padw <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">-</span> w<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            img <span class="token operator">=</span> np<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>padw<span class="token punctuation">,</span>padw<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'constant'</span><span class="token punctuation">,</span>constant_values<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> w<span class="token operator">></span>h<span class="token punctuation">:</span>            padh <span class="token operator">=</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> h<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            img <span class="token operator">=</span> np<span class="token punctuation">.</span>pad<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>padh<span class="token punctuation">,</span>padh<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'constant'</span><span class="token punctuation">,</span> constant_values<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span>input_size<span class="token punctuation">,</span>input_size<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 图像增广部分，这里不做过多处理，因为改变bbox信息还蛮麻烦的</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_aug<span class="token punctuation">:</span>            aug <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>                transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            img <span class="token operator">=</span> aug<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment"># 读取图像对应的bbox信息，按1维的方式储存，每5个元素表示一个bbox的(cls,xc,yc,w,h)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>labelpath<span class="token operator">+</span>self<span class="token punctuation">.</span>filenames<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">".txt"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            bbox <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        bbox <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> bbox<span class="token punctuation">]</span>        bbox <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> bbox <span class="token keyword">for</span> x <span class="token keyword">in</span> y<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>bbox<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"File:"</span><span class="token operator">+</span>self<span class="token punctuation">.</span>labelpath<span class="token operator">+</span>self<span class="token punctuation">.</span>filenames<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">".txt"</span><span class="token operator">+</span><span class="token string">"——bbox Extraction Error!"</span><span class="token punctuation">)</span>        <span class="token comment"># 根据padding、图像增广等操作，将原始的bbox数据转换为修改后图像的bbox数据</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>bbox<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> padw <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> w <span class="token operator">+</span> padw<span class="token punctuation">)</span> <span class="token operator">/</span> h                bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> w<span class="token punctuation">)</span> <span class="token operator">/</span> h            <span class="token keyword">elif</span> padh <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> h <span class="token operator">+</span> padh<span class="token punctuation">)</span> <span class="token operator">/</span> w                bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> h<span class="token punctuation">)</span> <span class="token operator">/</span> w            <span class="token comment"># 此处可以写代码验证一下，查看padding后修改的bbox数值是否正确，在原图中画出bbox检验</span>        labels <span class="token operator">=</span> convert_bbox2labels<span class="token punctuation">(</span>bbox<span class="token punctuation">)</span>  <span class="token comment"># 将所有bbox的(cls,x,y,w,h)数据转换为训练时方便计算Loss的数据形式(7,7,5*B+cls_num)</span>        <span class="token comment"># 此处可以写代码验证一下，经过convert_bbox2labels函数后得到的labels变量中储存的数据是否正确</span>        labels <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span>        <span class="token keyword">return</span> img<span class="token punctuation">,</span>labels</code></pre><p>其中，convert_bbox2labels()函数是将bbox信息转换为YOLOv1网络所需的标签格式，也就是7×7×30的数据格式，实现代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">convert_bbox2labels</span><span class="token punctuation">(</span>bbox<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将bbox的(cls,x,y,w,h)数据转换为训练时方便计算Loss的数据形式(7,7,5*B+cls_num)    注意，输入的bbox的信息是(xc,yc,w,h)格式的，转换为labels后，bbox的信息转换为了(px,py,w,h)格式"""</span>    gridsize <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">7</span>    labels <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">*</span>NUM_BBOX<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>CLASSES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 注意，此处需要根据不同数据集的类别个数进行修改</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>bbox<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        gridx <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> gridsize<span class="token punctuation">)</span>  <span class="token comment"># 当前bbox中心落在第gridx个网格,列</span>        gridy <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">//</span> gridsize<span class="token punctuation">)</span>  <span class="token comment"># 当前bbox中心落在第gridy个网格,行</span>        <span class="token comment"># (bbox中心坐标 - 网格左上角点的坐标)/网格大小  ==> bbox中心点的相对位置</span>        gridpx <span class="token operator">=</span> bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> gridsize <span class="token operator">-</span> gridx        gridpy <span class="token operator">=</span> bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> gridsize <span class="token operator">-</span> gridy        <span class="token comment"># 将第gridy行，gridx列的网格设置为负责当前ground truth的预测，置信度和对应类别概率均置为1</span>        labels<span class="token punctuation">[</span>gridy<span class="token punctuation">,</span> gridx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>gridpx<span class="token punctuation">,</span> gridpy<span class="token punctuation">,</span> bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        labels<span class="token punctuation">[</span>gridy<span class="token punctuation">,</span> gridx<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>gridpx<span class="token punctuation">,</span> gridpy<span class="token punctuation">,</span> bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bbox<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        labels<span class="token punctuation">[</span>gridy<span class="token punctuation">,</span> gridx<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">+</span><span class="token builtin">int</span><span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> labels</code></pre><h3 id="2、YOLOv1网络实现"><a href="#2、YOLOv1网络实现" class="headerlink" title="2、YOLOv1网络实现"></a>2、YOLOv1网络实现</h3><h4 id="2-1-Loss函数设计"><a href="#2-1-Loss函数设计" class="headerlink" title="2.1 Loss函数设计"></a>2.1 Loss函数设计</h4><p>  为了方便Loss计算，我们将网络输出的一维1470数据reshape成7×7×30的数据格式，并且，根据上文Dataset类的实现可知，提取出的label(样本标签)也是7×7×30。但是有一点要注意，label数据经过pytorch的toTensor()函数转换后，数据会变成batchsize×30×7×7，所以网络的输出也应当对应改成batchsize×30×7×7。损失函数的计算函数如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Loss_yolov1</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Loss_yolov1<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param pred: (batchsize,30,7,7)的网络输出数据        :param labels: (batchsize,30,7,7)的样本标签数据        :return: 当前批次样本的平均损失        """</span>        num_gridx<span class="token punctuation">,</span> num_gridy <span class="token operator">=</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 划分网格数量</span>        num_b <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 每个网格的bbox数量</span>        num_cls <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># 类别数量</span>        noobj_confi_loss <span class="token operator">=</span> <span class="token number">0.</span>  <span class="token comment"># 不含目标的网格损失(只有置信度损失)</span>        coor_loss <span class="token operator">=</span> <span class="token number">0.</span>  <span class="token comment"># 含有目标的bbox的坐标损失</span>        obj_confi_loss <span class="token operator">=</span> <span class="token number">0.</span>  <span class="token comment"># 含有目标的bbox的置信度损失</span>        class_loss <span class="token operator">=</span> <span class="token number">0.</span>  <span class="token comment"># 含有目标的网格的类别损失</span>        n_batch <span class="token operator">=</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># batchsize的大小</span>        <span class="token comment"># 可以考虑用矩阵运算进行优化，提高速度，为了准确起见，这里还是用循环</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_batch<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># batchsize循环</span>            <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># x方向网格循环</span>                <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># y方向网格循环</span>                    <span class="token keyword">if</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token comment"># 如果包含物体</span>                        <span class="token comment"># 将数据(px,py,w,h)转换为(x1,y1,x2,y2)</span>                        <span class="token comment"># 先将px,py转换为cx,cy，即相对网格的位置转换为标准化后实际的bbox中心位置cx,xy</span>                        <span class="token comment"># 然后再利用(cx-w/2,cy-h/2,cx+w/2,cy+h/2)转换为xyxy形式，用于计算iou</span>                        bbox1_pred_xyxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">/</span>num_gridx <span class="token operator">-</span> pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">/</span>num_gridy <span class="token operator">-</span> pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>                                           <span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">/</span>num_gridx <span class="token operator">+</span> pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">/</span>num_gridy <span class="token operator">+</span> pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>                        bbox2_pred_xyxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">/</span>num_gridx <span class="token operator">-</span> pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">/</span>num_gridy <span class="token operator">-</span> pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>                                           <span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">/</span>num_gridx <span class="token operator">+</span> pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">/</span>num_gridy <span class="token operator">+</span> pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>                        bbox_gt_xyxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">/</span>num_gridx <span class="token operator">-</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">/</span>num_gridy <span class="token operator">-</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>                                        <span class="token punctuation">(</span>labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token operator">/</span>num_gridx <span class="token operator">+</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">/</span>num_gridy <span class="token operator">+</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>                        iou1 <span class="token operator">=</span> calculate_iou<span class="token punctuation">(</span>bbox1_pred_xyxy<span class="token punctuation">,</span>bbox_gt_xyxy<span class="token punctuation">)</span>                        iou2 <span class="token operator">=</span> calculate_iou<span class="token punctuation">(</span>bbox2_pred_xyxy<span class="token punctuation">,</span>bbox_gt_xyxy<span class="token punctuation">)</span>                        <span class="token comment"># 选择iou大的bbox作为负责物体</span>                        <span class="token keyword">if</span> iou1 <span class="token operator">>=</span> iou2<span class="token punctuation">:</span>                            coor_loss <span class="token operator">=</span> coor_loss <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> \                                        <span class="token operator">+</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            obj_confi_loss <span class="token operator">=</span> obj_confi_loss <span class="token operator">+</span> <span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> iou1<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>                            <span class="token comment"># iou比较小的bbox不负责预测物体，因此confidence loss算在noobj中，注意，对于标签的置信度应该是iou2</span>                            noobj_confi_loss <span class="token operator">=</span> noobj_confi_loss <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">-</span>iou2<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            coor_loss <span class="token operator">=</span> coor_loss <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> \                                        <span class="token operator">+</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            obj_confi_loss <span class="token operator">=</span> obj_confi_loss <span class="token operator">+</span> <span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> iou2<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>                            <span class="token comment"># iou比较小的bbox不负责预测物体，因此confidence loss算在noobj中,注意，对于标签的置信度应该是iou1</span>                            noobj_confi_loss <span class="token operator">=</span> noobj_confi_loss <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">]</span><span class="token operator">-</span>iou1<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>                        class_loss <span class="token operator">=</span> class_loss <span class="token operator">+</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 如果不包含物体</span>                        noobj_confi_loss <span class="token operator">=</span> noobj_confi_loss <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>pred<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>        loss <span class="token operator">=</span> coor_loss <span class="token operator">+</span> obj_confi_loss <span class="token operator">+</span> noobj_confi_loss <span class="token operator">+</span> class_loss        <span class="token comment"># 此处可以写代码验证一下loss的大致计算是否正确，这个要验证起来比较麻烦，比较简洁的办法是，将输入的pred置为全1矩阵，再进行误差检查，会直观很多。</span>        <span class="token keyword">return</span> loss<span class="token operator">/</span>n_batch</code></pre><p>  计算iou的辅助函数如下，注意输入的bbox信息格式应该是两点式，即左上角点xy坐标和右下角点xy坐标(x1,y1,x2,y2)。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate_iou</span><span class="token punctuation">(</span>bbox1<span class="token punctuation">,</span>bbox2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算bbox1=(x1,y1,x2,y2)和bbox2=(x3,y3,x4,y4)两个bbox的iou"""</span>    intersect_bbox <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token number">0.</span><span class="token punctuation">]</span>  <span class="token comment"># bbox1和bbox2的交集</span>    <span class="token keyword">if</span> bbox1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>bbox2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">or</span> bbox1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>bbox2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">or</span> bbox1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>bbox2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">or</span> bbox1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>bbox2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        intersect_bbox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>bbox1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bbox2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        intersect_bbox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>bbox1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bbox2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        intersect_bbox<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>bbox1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bbox2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        intersect_bbox<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>bbox1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bbox2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    area1 <span class="token operator">=</span> <span class="token punctuation">(</span>bbox1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> bbox1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>bbox1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> bbox1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># bbox1面积</span>    area2 <span class="token operator">=</span> <span class="token punctuation">(</span>bbox2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> bbox2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>bbox2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> bbox2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># bbox2面积</span>    area_intersect <span class="token operator">=</span> <span class="token punctuation">(</span>intersect_bbox<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> intersect_bbox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>intersect_bbox<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> intersect_bbox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 交集面积</span>    <span class="token comment"># print(bbox1,bbox2)</span>    <span class="token comment"># print(intersect_bbox)</span>    <span class="token comment"># input()</span>    <span class="token keyword">if</span> area_intersect<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> area_intersect <span class="token operator">/</span> <span class="token punctuation">(</span>area1 <span class="token operator">+</span> area2 <span class="token operator">-</span> area_intersect<span class="token punctuation">)</span>  <span class="token comment"># 计算iou</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span></code></pre><h4 id="2-2-网络结构实现"><a href="#2-2-网络结构实现" class="headerlink" title="2.2 网络结构实现"></a>2.2 网络结构实现</h4><p>  这一部分需要说明一下，由于原论文是采用自己设计的20层卷积层先在ImageNet上训练了一周，完成特征提取部分的训练。我们作为学习者而非发明者来说，花一周时间训练实在是太长了。因此，在这里我打算对原论文的结构做一点改变。YOLOv1的前20层是用于特征提取的，也就是随便替换为一个分类网络(除去最后的全连接层)其实都行。因此，我打算使用ResNet34的网络作为特征提取部分。这样做的好处是，pytorch的torchvision中提供了ResNet34的预训练模型，训练集也是ImageNet，等于说有先成训练好的模型可以直接使用，从而免去了特征提取部分的训练时间。然后，除去ResNet34的最后两层，再连接上YOLOv1的最后4个卷积层和两个全连接层，作为我们训练的网络结构。<br>  此外，还进行了一些小调整，比如最后增加了一个Sigmoid层，以及在卷积层后增加了BN层等等。具体代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>models <span class="token keyword">as</span> tvmodel<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token keyword">class</span> <span class="token class-name">YOLOv1_resnet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>YOLOv1_resnet<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        resnet <span class="token operator">=</span> tvmodel<span class="token punctuation">.</span>resnet34<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 调用torchvision里的resnet34预训练模型</span>        resnet_out_channel <span class="token operator">=</span> resnet<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>in_features  <span class="token comment"># 记录resnet全连接层之前的网络输出通道数，方便连入后续卷积网络中</span>        self<span class="token punctuation">.</span>resnet <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">list</span><span class="token punctuation">(</span>resnet<span class="token punctuation">.</span>children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 去除resnet的最后两层</span>        <span class="token comment"># 以下是YOLOv1的最后四个卷积层</span>        self<span class="token punctuation">.</span>Conv_layers <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>resnet_out_channel<span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 为了加快训练，这里增加了BN层，原论文里YOLOv1是没有的</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token comment"># 以下是YOLOv1的最后2个全连接层</span>        self<span class="token punctuation">.</span>Conn_layers <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 增加sigmoid函数是为了将输出全部映射到(0,1)之间，因为如果出现负数或太大的数，后续计算loss会很麻烦</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">input</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>resnet<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        <span class="token builtin">input</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>Conv_layers<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin">input</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>Conn_layers<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">input</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span>NUM_BBOX<span class="token operator">+</span><span class="token builtin">len</span><span class="token punctuation">(</span>CLASSES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment"># 记住最后要reshape一下输出数据</span></code></pre><p>  这里分享一下调试网络结构代码的小技巧。可以直接用如下代码测试，如果程序报错，则在forward每一步之间print(input.size())，看一看每一个模块输出的尺寸是否是满足要求的，如果要调试nn.Sequential里的网络结构，可以直接将不需要的部分注释，然后一步步的反注释，从而验证每一层输出的数据的尺寸是否符合预期。通常，程序报错是因为图像尺寸出现了问题而不是通道数的问题，也就是某一些卷积层可能需要加padding保持图像尺寸，而漏加了padding。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">448</span><span class="token punctuation">,</span><span class="token number">448</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    net <span class="token operator">=</span> YOLOv1_resnet<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>net<span class="token punctuation">)</span>    y <span class="token operator">=</span> net<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3、开始训练"><a href="#3、开始训练" class="headerlink" title="3、开始训练"></a>3、开始训练</h3><p>  训练过程也是老套路了，这里要注意，因为特征提取部分以及用ImageNet训练过了，所以不需要再训练，需要将resnet34的网络参数冻结，不进行训练，也就是将参数的requires_grad属性设置为False。另外，在每10个epoch后，最好储存一下训练结果，防止中途发生意外而终止训练，这样可以保证有过程备份(学名叫checkpoint)，下次可以继续从断点开始训练。具体代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    epoch <span class="token operator">=</span> <span class="token number">50</span>    batchsize <span class="token operator">=</span> <span class="token number">5</span>    lr <span class="token operator">=</span> <span class="token number">0.01</span>    train_data <span class="token operator">=</span> VOC2012<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>VOC2012<span class="token punctuation">(</span>is_train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>batch_size<span class="token operator">=</span>batchsize<span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    model <span class="token operator">=</span> YOLOv1_resnet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># model.children()里是按模块(Sequential)提取的子模块，而不是具体到每个层，具体可以参见pytorch帮助文档</span>    <span class="token comment"># 冻结resnet34特征提取层，特征提取层不参与参数更新</span>    <span class="token keyword">for</span> layer <span class="token keyword">in</span> model<span class="token punctuation">.</span>children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        layer<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">break</span>    criterion <span class="token operator">=</span> Loss_yolov1<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr<span class="token operator">=</span>lr<span class="token punctuation">,</span>momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>weight_decay<span class="token operator">=</span><span class="token number">0.0005</span><span class="token punctuation">)</span>    is_vis <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 是否进行可视化，如果没有visdom可以将其设置为false</span>    <span class="token keyword">if</span> is_vis<span class="token punctuation">:</span>        vis <span class="token operator">=</span> visdom<span class="token punctuation">.</span>Visdom<span class="token punctuation">(</span><span class="token punctuation">)</span>        viswin1 <span class="token operator">=</span> vis<span class="token punctuation">.</span>line<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>opts<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">"Loss/Step"</span><span class="token punctuation">,</span>xlabel<span class="token operator">=</span><span class="token string">"100*step"</span><span class="token punctuation">,</span>ylabel<span class="token operator">=</span><span class="token string">"Loss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> e <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        yl <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token punctuation">(</span>inputs<span class="token punctuation">,</span>labels<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>            inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            labels <span class="token operator">=</span> labels<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>            pred <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>            loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>pred<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Epoch %d/%d| Step %d/%d| Loss: %.2f"</span><span class="token operator">%</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>epoch<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token operator">//</span>batchsize<span class="token punctuation">,</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            yl <span class="token operator">=</span> yl <span class="token operator">+</span> loss            <span class="token keyword">if</span> is_vis <span class="token keyword">and</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                vis<span class="token punctuation">.</span>line<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>yl<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token operator">+</span>e<span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_data<span class="token punctuation">)</span><span class="token operator">//</span>batchsize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>win<span class="token operator">=</span>viswin1<span class="token punctuation">,</span>update<span class="token operator">=</span><span class="token string">'append'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">,</span><span class="token string">"./models_pkl/YOLOv1_epoch"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".pkl"</span><span class="token punctuation">)</span>            <span class="token comment"># compute_val_map(model)</span></code></pre><p>  GTX1060的GPU，所以这个训练起来比较慢，batchsize也只能取5，大概要12个小时。loss函数里循环比较多，可以考虑怎么用矩阵计算优化一下，提高效率，但是要注意检查优化后的loss计算结果，否则进行错误的训练就得不偿失了(别问我为什么知道的,:( )。下图是训练过程的loss，最后大概下降到0.1左右。<br><img src="/posts/d3bd5c5a/4.png" alt="image"></p><h3 id="4、网络预测"><a href="#4、网络预测" class="headerlink" title="4、网络预测"></a>4、网络预测</h3><p>  网络预测的主代码和训练其实很像，麻烦的地方在于，网络预测得到pred数据后，如何将其转换为最终的bbox结果。因为pred会得到98个bbox信息，而其中大部分是没用的，但是由于是inference任务，所以没标签给你参照，所以只能用别的算法来去除无效的bbox。最常见的做法就是使用class-specific confidence scores的阈值和NMS(非极大值抑制)算法来去除没用的bbox。这种方法有两个超参数，一个是设置class-specific confidence scores的阈值，另一个是NMS算法中的IOU阈值。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    val_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>VOC2012<span class="token punctuation">(</span>is_train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    model <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"./models_pkl/YOLOv1_epoch40.pkl"</span><span class="token punctuation">)</span>  <span class="token comment"># 加载训练好的模型</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token punctuation">(</span>inputs<span class="token punctuation">,</span>labels<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>val_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 以下代码是测试labels2bbox函数的时候再用</span>        <span class="token comment"># labels = labels.float().cuda()</span>        <span class="token comment"># labels = labels.squeeze(dim=0)</span>        <span class="token comment"># labels = labels.permute((1,2,0))</span>        pred <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>  <span class="token comment"># pred的尺寸是(1,30,7,7)</span>        pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 压缩为(30,7,7)</span>        pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 转换为(7,7,30)</span>        <span class="token comment">## 测试labels2bbox时，使用 labels作为labels2bbox2函数的输入</span>        bbox <span class="token operator">=</span> labels2bbox<span class="token punctuation">(</span>pred<span class="token punctuation">)</span>  <span class="token comment"># 此处可以用labels代替pred，测试一下输出的bbox是否和标签一样，从而检查labels2bbox函数是否正确。当然，还要注意将数据集改成训练集而不是测试集，因为测试集没有labels。</span>        inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 输入图像的尺寸是(1,3,448,448),压缩为(3,448,448)</span>        inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 转换为(448,448,3)</span>        img <span class="token operator">=</span> inputs<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> <span class="token number">255</span><span class="token operator">*</span>img  <span class="token comment"># 将图像的数值从(0,1)映射到(0,255)并转为非负整形</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        draw_bbox<span class="token punctuation">(</span>img<span class="token punctuation">,</span>bbox<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将网络预测结果进行可视化，将bbox画在原图中，可以很直观的观察结果</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>bbox<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bbox<span class="token punctuation">)</span>        <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>  其中，labels2bbox()的函数如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 注意检查一下输入数据的格式，到底是xywh还是xyxy</span><span class="token keyword">def</span> <span class="token function">labels2bbox</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将网络输出的7*7*30的数据转换为bbox的(98,25)的格式，然后再将NMS处理后的结果返回    :param matrix: 注意，输入的数据中，bbox坐标的格式是(px,py,w,h)，需要转换为(x1,y1,x2,y2)的格式再输入NMS    :return: 返回NMS处理后的结果    """</span>    <span class="token keyword">if</span> matrix<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Error: Wrong labels size:"</span><span class="token punctuation">,</span>matrix<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    bbox <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 先把7*7*30的数据转变为bbox的(98,25)的格式，其中，bbox信息格式从(px,py,w,h)转换为(x1,y1,x2,y2),方便计算iou</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># i是网格的行方向(y方向)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># j是网格的列方向(x方向)</span>            bbox<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">-</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>                                                <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">-</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>                                                <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>                                                <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            bbox<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>            bbox<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            bbox<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">-</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>                                                <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">-</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>                                                <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>                                                <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">7</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            bbox<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>            bbox<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">7</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> NMS<span class="token punctuation">(</span>bbox<span class="token punctuation">)</span>  <span class="token comment"># 对所有98个bbox执行NMS算法，清理cls-specific confidence score较低以及iou重合度过高的bbox</span><span class="token keyword">def</span> <span class="token function">NMS</span><span class="token punctuation">(</span>bbox<span class="token punctuation">,</span> conf_thresh<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> iou_thresh<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""bbox数据格式是(n,25),前4个是(x1,y1,x2,y2)的坐标信息，第5个是置信度，后20个是类别概率    :param conf_thresh: cls-specific confidence score的阈值    :param iou_thresh: NMS算法中iou的阈值    """</span>    n <span class="token operator">=</span> bbox<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    bbox_prob <span class="token operator">=</span> bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 类别预测的条件概率</span>    bbox_confi <span class="token operator">=</span> bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>expand_as<span class="token punctuation">(</span>bbox_prob<span class="token punctuation">)</span>  <span class="token comment"># 预测置信度</span>    bbox_cls_spec_conf <span class="token operator">=</span> bbox_confi<span class="token operator">*</span>bbox_prob  <span class="token comment"># 置信度*类别条件概率=cls-specific confidence score整合了是否有物体及是什么物体的两种信息</span>    bbox_cls_spec_conf<span class="token punctuation">[</span>bbox_cls_spec_conf<span class="token operator">&lt;=</span>conf_thresh<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 将低于阈值的bbox忽略</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rank <span class="token operator">=</span> torch<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>bbox_cls_spec_conf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span>descending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>indices        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> bbox_cls_spec_conf<span class="token punctuation">[</span>rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> bbox_cls_spec_conf<span class="token punctuation">[</span>rank<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                        iou <span class="token operator">=</span> calculate_iou<span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bbox<span class="token punctuation">[</span>rank<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> iou <span class="token operator">></span> iou_thresh<span class="token punctuation">:</span>  <span class="token comment"># 根据iou进行非极大值抑制抑制</span>                            bbox_cls_spec_conf<span class="token punctuation">[</span>rank<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    bbox <span class="token operator">=</span> bbox<span class="token punctuation">[</span>torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>bbox_cls_spec_conf<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 将20个类别中最大的cls-specific confidence score为0的bbox都排除</span>    bbox_cls_spec_conf <span class="token operator">=</span> bbox_cls_spec_conf<span class="token punctuation">[</span>torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>bbox_cls_spec_conf<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>bbox<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment"># 储存最后的bbox坐标信息</span>    res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>bbox<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 储存bbox对应的类别信息</span>    res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>bbox_cls_spec_conf<span class="token punctuation">,</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values  <span class="token comment"># 储存bbox对应的class-specific confidence scores</span>    <span class="token keyword">return</span> res</code></pre><p>  最后，将筛选后的bbox进行可视化，绘制在原图上，就可以查看结果了。可视化的辅助代码如下：</p><pre class="language-python" data-language="python"><code class="language-python">COLOR <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span>  <span class="token comment"># 用来标识20个类别的bbox颜色，可自行设定</span><span class="token keyword">def</span> <span class="token function">draw_bbox</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>bbox<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    根据bbox的信息在图像上绘制bounding box    :param img: 绘制bbox的图像    :param bbox: 是(n,6)的尺寸，其中第0列代表bbox的分类序号，1~4为bbox坐标信息(xyxy)(均归一化了)，5是bbox的专属类别置信度    """</span>    h<span class="token punctuation">,</span>w <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    n <span class="token operator">=</span> bbox<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>bbox<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        p1 <span class="token operator">=</span> <span class="token punctuation">(</span>w<span class="token operator">*</span>bbox<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token operator">*</span>bbox<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        p2 <span class="token operator">=</span> <span class="token punctuation">(</span>w<span class="token operator">*</span>bbox<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token operator">*</span>bbox<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cls_name <span class="token operator">=</span> CLASSES<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        confidence <span class="token operator">=</span> bbox<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>        cv2<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>color<span class="token operator">=</span>COLOR<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>bbox<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cls_name<span class="token punctuation">,</span>p1<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEX<span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"bbox"</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>  最后，可以根据预测得到的bbox计算mAP，目前我还没有计算过，计算mAP是挺复杂的过程。等有时间再将这一部分补上吧。</p><h3 id="5、结果展示"><a href="#5、结果展示" class="headerlink" title="5、结果展示"></a>5、结果展示</h3><p>  稍微展示一下训练50个epoch后的结果，可以看到，其实在验证集上的效果不是那么完美，但是也还可以。毕竟我们训练的时候还没有进行调参，数据增广也没有做，效果应该还有很大的提升空间。</p><table><thead><tr><th>训练集图片</th><th>验证集图片</th></tr></thead><tbody><tr><td><img src="/posts/d3bd5c5a/5.png" alt="image"></td><td><img src="/posts/d3bd5c5a/7.png" alt="image"></td></tr><tr><td><img src="/posts/d3bd5c5a/6.png" alt="image"></td><td><img src="/posts/d3bd5c5a/8.png" alt="image"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区域卷积神经网络RCNN系列</title>
      <link href="/posts/4ab84d77.html"/>
      <url>/posts/4ab84d77.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>区域卷积神经网络（region-based CNN或regions with CNN features, R-CNN）是将深度模型应用于目标检测的开创性工作之一。这里将介绍R-CNN和它的一系列改进方法：Fast R-CNN、Faster R-CNN、Mask R-CNN，当然这里只是介绍这些模型的设计思路。</p></blockquote><h3 id="1、R-CNN"><a href="#1、R-CNN" class="headerlink" title="1、R-CNN"></a>1、R-CNN</h3><p>R-CNN首先是对图像选取若干提议区域（如锚框也是一种选取方法）并标注它们的类别和边界框（如偏移量）。然后，用卷积神经网络对每个提议区域做前向计算抽取特征。之后，我们用每个提议区域的特征预测类别和边界框。<br><img src="/posts/4ab84d77/1.png" alt="R-CNN模型"><br>具体来说，R-CNN主要由以下4步构成:</p><ol><li>对输入图像使用选择性搜索（selective search）来选取多个高质量的提议区域。这些提议区域通常是在多个尺度下选取的，并具有不同的形状和大小。每个提议区域将被标注类别和真实边界框。</li><li>选取一个预训练的卷积神经网络，并将其在输出层之前截断。将每个提议区域变形为网络需要的输入尺寸，并通过前向计算输出抽取的提议区域特征。</li><li>将每个提议区域的特征连同其标注的类别作为一个样本，训练多个支持向量机对目标分类。其中每个支持向量机用来判断样本是否属于某一个类别。</li><li>将每个提议区域的特征连同其标注的边界框作为一个样本，训练线性回归模型来预测真实边界框。</li></ol><p>R-CNN虽然通过预训练的卷积神经网络有效抽取了图像特征，但它的主要缺点是速度慢。想象一下，我们可能从一张图像中选出上千个提议区域，对该图像做目标检测将导致上千次的卷积神经网络的前向计算。这个巨大的计算量令R-CNN难以在实际应用中被广泛采用。</p><h3 id="2、Fast-R-CNN"><a href="#2、Fast-R-CNN" class="headerlink" title="2、Fast R-CNN"></a>2、Fast R-CNN</h3><p>Fast R-CNN是对R-CNN的改进，R-CNN的主要性能瓶颈在于需要对每个提议区域独立抽取特征。由于这些区域通常有大量重叠，独立的特征抽取会导致大量的重复计算。Fast R-CNN对R-CNN的一个主要改进在于只对整个图像做卷积神经网络的前向计算。<br><img src="/posts/4ab84d77/2.png" alt="Fast R-CNN模型"><br>具体来说，它的主要计算步骤如下：</p><ol><li>与R-CNN相比，Fast R-CNN用来提取特征的卷积神经网络的输入是整个图像，而不是各个提议区域。而且，这个网络通常会参与训练，即更新模型参数。设输入为一张图像，将卷积神经网络的输出的形状记为 1 × c × h1 × w1。</li><li>假设选择性搜索生成n个提议区域。这些形状各异的提议区域在卷积神经网络的输出上分别标出形状各异的兴趣区域。这些兴趣区域需要抽取出形状相同的特征（假设高和宽均分别指定为h2和w2）以便于连结后输出。Fast R-CNN引入兴趣区域池化（Region of Interest Pooling，RoI池化）层，将卷积神经网络的输出和提议区域作为输入，输出连结后的各个提议区域抽取的特征，形状为 n × c × h2 × w2。</li><li>通过全连接层将输出形状变换为n × d，其中超参数d取决于模型设计。</li><li>预测类别时，将全连接层的输出的形状再变换为n × q并使用softmax回归（q为类别个数）。预测边界框时，将全连接层的输出的形状变换为n × 4。也就是说，我们为每个提议区域预测类别和边界框。</li></ol><p>Fast R-CNN中提出的兴趣区域池化层于常规的池化层有所不同。在池化层中，我们通过设置池化窗口、填充和步幅来控制输出形状。而兴趣区域池化层对每个区域的输出形状是可以直接指定的，例如，指定每个区域输出的高和宽分别为h2和w2。假设某一兴趣区域窗口的高和宽分别为h和w，该窗口将被划分为形状为h2 × w2的子窗口网格，且每个子窗口的大小大约为(h&#x2F;h2) × (w&#x2F;w2)。任一子窗口的高和宽要取整，其中的最大元素作为该子窗口的输出。因此，兴趣区域池化层可从形状各异的兴趣区域中均抽取出形状相同的特征。</p><p>例子：在4 × 4的输入上选取了左上角的3 × 3区域作为兴趣区域。对于该兴趣区域，我们通过2 × 2兴趣区域池化层得到一个2 × 2的输出。4个划分后的子窗口分别含有元素0、1、4、5（5最大），2、6（6最大），8、9（9最大），10。<br><img src="/posts/4ab84d77/3.png" alt="2×2兴趣区域池化层"></p><h3 id="3、Faster-R-CNN"><a href="#3、Faster-R-CNN" class="headerlink" title="3、Faster R-CNN"></a>3、Faster R-CNN</h3><p>Faster R-CNN是对Fast R-CNN的进一步改进，Fast R-CNN通常需要在选择性搜索中生成较多的提议区域，以获得较精确的目标检测结果。Faster R-CNN提出将选择性搜索替换成区域提议网络（region proposal network），从而减少提议区域的生成数量，并保证目标检测的精度。<br><img src="/posts/4ab84d77/4.png" alt="Faster R-CNN模型"><br>与Fast R-CNN相比，只有生成提议区域的方法从选择性搜索变成了区域提议网络，而其他部分均保持不变。具体来说，区域提议网络的计算步骤如下:</p><ol><li>使用填充为1的3 × 3卷积层变换卷积神经网络的输出，并将输出通道数记为c。这样，卷积神经网络为图像抽取的特征图中的每个单元均得到一个长度为c的新特征。</li><li>以特征图每个单元为中心，生成多个不同大小和宽高比的锚框并标注它们。</li><li>用锚框中心单元长度为cc的特征分别预测该锚框的二元类别（含目标还是背景）和边界框。</li><li>使用非极大值抑制，从预测类别为目标的预测边界框中移除相似的结果。最终输出的预测边界框即兴趣区域池化层所需要的提议区域。</li></ol><p>值得一提的是，区域提议网络作为Faster R-CNN的一部分，是和整个模型一起训练得到的。也就是说，Faster R-CNN的目标函数既包括目标检测中的类别和边界框预测，又包括区域提议网络中锚框的二元类别和边界框预测。最终，区域提议网络能够学习到如何生成高质量的提议区域，从而在减少提议区域数量的情况下也能保证目标检测的精度。</p><h3 id="4、Mask-R-CNN"><a href="#4、Mask-R-CNN" class="headerlink" title="4、Mask R-CNN"></a>4、Mask R-CNN</h3><p>如果训练数据还标注了每个目标在图像上的像素级位置，那么Mask R-CNN能有效利用这些详尽的标注信息进一步提升目标检测的精度。<br><img src="/posts/4ab84d77/5.png" alt="Mask R-CNN模型"><br>Mask R-CNN在Faster R-CNN的基础上做了修改。Mask R-CNN将兴趣区域池化层替换成了兴趣区域对齐层，即通过双线性插值（bilinear interpolation）来保留特征图上的空间信息，从而更适于像素级预测。兴趣区域对齐层的输出包含了所有兴趣区域的形状相同的特征图。它们既用来预测兴趣区域的类别和边界框，又通过额外的全卷积网络预测目标的像素级位置。</p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS中安装配置最新版的Nodejs</title>
      <link href="/posts/291052c1.html"/>
      <url>/posts/291052c1.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>如何在CentOS中安装配置最新版的Nodejs。</p></blockquote><p>首先要明白，npm是随同NodeJS一起安装的包管理工具。</p><h2 id="1、先在CentOS中新建文件夹用来存放nodejs文件，并进入该目录中："><a href="#1、先在CentOS中新建文件夹用来存放nodejs文件，并进入该目录中：" class="headerlink" title="1、先在CentOS中新建文件夹用来存放nodejs文件，并进入该目录中："></a>1、先在CentOS中新建文件夹用来存放nodejs文件，并进入该目录中：</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/nodejs<span class="token builtin class-name">cd</span> /usr/nodejs</code></pre><h2 id="2、然后到官网下载支持的node最新版二进制文件："><a href="#2、然后到官网下载支持的node最新版二进制文件：" class="headerlink" title="2、然后到官网下载支持的node最新版二进制文件："></a>2、然后到官网下载支持的node最新版二进制文件：</h2><p>网址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a><br>利用Xftp工具将下载的文件上传到CentOS刚建好的nodejs文件目录中。或者直接在CentOS系统的该目录下利用以下命令将安装文件下载到本地：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://nodejs.org/dist/v12.16.0/node-v12.16.0-linux-x64.tar.xz</code></pre><p>这里我使用的版本是node-v12.16.0，可能已经不是最新的了。</p><h2 id="3、解压安装"><a href="#3、解压安装" class="headerlink" title="3、解压安装"></a>3、解压安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tatr -xJvf node-v12.16.0-linux-x64.tar.xz</code></pre><p>该命令会将以上下载的压缩文件解压到当前目录</p><h2 id="4、设置环境变量，在“-x2F-etc-x2F-profile”文件末尾添加nodejs环境"><a href="#4、设置环境变量，在“-x2F-etc-x2F-profile”文件末尾添加nodejs环境" class="headerlink" title="4、设置环境变量，在“&#x2F;etc&#x2F;profile”文件末尾添加nodejs环境"></a>4、设置环境变量，在“&#x2F;etc&#x2F;profile”文件末尾添加nodejs环境</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/nodejs/node-v12.16.0-linux-x64:<span class="token environment constant">$PATH</span></code></pre><h2 id="5、更新“profile”文件，使新添加的环境变量生效"><a href="#5、更新“profile”文件，使新添加的环境变量生效" class="headerlink" title="5、更新“profile”文件，使新添加的环境变量生效"></a>5、更新“profile”文件，使新添加的环境变量生效</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etx/profile</code></pre><h2 id="6、使用sudo-ln-s命令将node-npm-npx-软链接到-x2F-usr-x2F-bin-x2F-中"><a href="#6、使用sudo-ln-s命令将node-npm-npx-软链接到-x2F-usr-x2F-bin-x2F-中" class="headerlink" title="6、使用sudo ln -s命令将node, npm, npx 软链接到&#x2F;usr&#x2F;bin&#x2F;中:"></a>6、使用sudo ln -s命令将node, npm, npx 软链接到&#x2F;usr&#x2F;bin&#x2F;中:</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/nodejs/node-v12.16.0-linux-x64/bin/node /usr/bin/node<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/nodejs/node-v12.16.0-linux-x64/bin/npm /usr/bin/npm<span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/nodejs/node-v12.16.0-linux-x64/bin/npx /usr/bin/npx</code></pre><h2 id="7、测试是否安装成功"><a href="#7、测试是否安装成功" class="headerlink" title="7、测试是否安装成功"></a>7、测试是否安装成功</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> -v<span class="token function">npm</span> -versionnpx -v</code></pre><p><strong>如果能正确显示版本信息，那就恭喜你安装成功！</strong></p><p>如果npm可以正常使用，那么接下来的内容可以不用管。如果确实不能忍受npm安装其他包时速度太慢的问题，那我建议你继续往下看。</p><p>由于npm下载源在国外，严重影响速度。因此，乐于分享的淘宝团队，将npm下载源部署到了国内。</p><ul><li>来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”</li></ul><h2 id="8、换源方法"><a href="#8、换源方法" class="headerlink" title="8、换源方法"></a>8、换源方法</h2><h3 id="1-使用阿里定制的-cnpm-命令行工具代替默认的-npm，输入下面代码进行安装："><a href="#1-使用阿里定制的-cnpm-命令行工具代替默认的-npm，输入下面代码进行安装：" class="headerlink" title="1.使用阿里定制的 cnpm 命令行工具代替默认的 npm，输入下面代码进行安装："></a>1.使用阿里定制的 cnpm 命令行工具代替默认的 npm，输入下面代码进行安装：</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p>以后安装插件只需要使用cnpm intall即可。<br>但别忘了：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/nodejs/node-v12.16.0-linux-x64/bin/cnpm /usr/bin/cnpm</code></pre><h3 id="2-如果习惯了npm，又不想使用cnpm怎么办呢？也不是没有办法。"><a href="#2-如果习惯了npm，又不想使用cnpm怎么办呢？也不是没有办法。" class="headerlink" title="2.如果习惯了npm，又不想使用cnpm怎么办呢？也不是没有办法。"></a>2.如果习惯了npm，又不想使用cnpm怎么办呢？也不是没有办法。</h3><p>输入以下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org</code></pre><p>再输入，就可以看到是否换源成功：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config list</code></pre><p><strong>恭喜你，现在可以正常并快速的使用npm了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> EnvConfig </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS中安装配置最新版的Git</title>
      <link href="/posts/b3b8c47d.html"/>
      <url>/posts/b3b8c47d.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>如何在CentOS中安装配置最新版的Git。</p></blockquote><h2 id="一、查看并移除旧版本"><a href="#一、查看并移除旧版本" class="headerlink" title="一、查看并移除旧版本"></a>一、查看并移除旧版本</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --version    <span class="token comment"># 查看自带版本</span>yum remove <span class="token function">git</span>   <span class="token comment"># 移除低版本</span></code></pre><p>一般系统自带的git版本比较低，可以通过以上命令查看和移除自带的较低版本的git。如果系统中没有自带git，那就继续往下看吧。</p><h2 id="二、yum命令安装"><a href="#二、yum命令安装" class="headerlink" title="二、yum命令安装"></a>二、yum命令安装</h2><p>此方法简单，并且会自动安装依赖的包，就是傻瓜式安装，而且会从源里安装最新的版本，（注意是源里的最新版本）不过不一定是git官网的最新版本。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">git</span></code></pre><h2 id="三、源码安装"><a href="#三、源码安装" class="headerlink" title="三、源码安装"></a>三、源码安装</h2><p>这个就比较麻烦点，不过过程还是比较清晰的，毕竟源码安装也比较普遍了</p><h4 id="1、安装前要手动安装下依赖包，可以直接是用yum安装"><a href="#1、安装前要手动安装下依赖包，可以直接是用yum安装" class="headerlink" title="1、安装前要手动安装下依赖包，可以直接是用yum安装"></a>1、安装前要手动安装下依赖包，可以直接是用yum安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y <span class="token function">wget</span>yum <span class="token function">install</span> gccyum <span class="token function">install</span> gcc-c++yum <span class="token function">install</span> -y zlib-develyum <span class="token function">install</span> -y perl-ExtUtils-MakeMaker package</code></pre><h4 id="2、下载最新版本的git源码包"><a href="#2、下载最新版本的git源码包" class="headerlink" title="2、下载最新版本的git源码包"></a>2、下载最新版本的git源码包</h4><p>源码下载网址：<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/">https://mirrors.edge.kernel.org/pub/software/scm/git/</a><br>选择想要最新版本进行下载，比如：git-2.25.0.tar.gz</p><p>在CentOS中建立以下目录，用来存放git源码：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/git</code></pre><p>可以在Windows上下载后通过Xftp工具上传到CentOS系统上的“&#x2F;usr&#x2F;git”目录中；或者在CentOS中的该目录下使用命令直接下载并保存在当前目录：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/git<span class="token function">wget</span> https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.25.0.tar.gz</code></pre><h4 id="3、在保证依赖包安装正确的情况下，接下来就是解压，配置，安装，其实也并不复杂"><a href="#3、在保证依赖包安装正确的情况下，接下来就是解压，配置，安装，其实也并不复杂" class="headerlink" title="3、在保证依赖包安装正确的情况下，接下来就是解压，配置，安装，其实也并不复杂"></a>3、在保证依赖包安装正确的情况下，接下来就是解压，配置，安装，其实也并不复杂</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/git<span class="token function">tar</span> -zxvf git-2.25.0.tar.gz<span class="token builtin class-name">cd</span> git-2.25.0./configure --prefix<span class="token operator">=</span>/usr/git<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span></code></pre><h4 id="4、没有报错的话，那就要恭喜了，你已经完成了大部分了。如果出错一般是依赖包缺失，安装下就好，如果是其他的问题，请Google或其他搜索引擎查一下。然后就是设置下环境变量PATH，保证可以随处使用git。"><a href="#4、没有报错的话，那就要恭喜了，你已经完成了大部分了。如果出错一般是依赖包缺失，安装下就好，如果是其他的问题，请Google或其他搜索引擎查一下。然后就是设置下环境变量PATH，保证可以随处使用git。" class="headerlink" title="4、没有报错的话，那就要恭喜了，你已经完成了大部分了。如果出错一般是依赖包缺失，安装下就好，如果是其他的问题，请Google或其他搜索引擎查一下。然后就是设置下环境变量PATH，保证可以随处使用git。"></a>4、没有报错的话，那就要恭喜了，你已经完成了大部分了。如果出错一般是依赖包缺失，安装下就好，如果是其他的问题，请Google或其他搜索引擎查一下。然后就是设置下环境变量PATH，保证可以随处使用git。</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"export PATH=<span class="token environment constant">$PATH</span>:/usr/local/git/bin"</span><span class="token operator">>></span>/etc/profile<span class="token builtin class-name">source</span> /etc/profile             <span class="token comment">#使环境变量生效</span><span class="token function">git</span> --version                   <span class="token comment">#查看git版本</span></code></pre><h4 id="5、一般这个时候是会显示出来你刚刚安装好的版本"><a href="#5、一般这个时候是会显示出来你刚刚安装好的版本" class="headerlink" title="5、一般这个时候是会显示出来你刚刚安装好的版本"></a>5、一般这个时候是会显示出来你刚刚安装好的版本</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> version <span class="token number">2.25</span>.0</code></pre><p>到此安装完成了，然后就是使用了，后面学习好了再追加吧吧！</p>]]></content>
      
      
      <categories>
          
          <category> EnvConfig </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS中安装配置Java环境</title>
      <link href="/posts/d2690585.html"/>
      <url>/posts/d2690585.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>如何在CentOS中安装配置需要的Java版本环境。</p></blockquote><p>centos中安装java环境，在安装前先查看有无安装过java环境。直接运行java命令，会提示命令未找到，则是没有安装过java环境。</p><h2 id="1、到官网下载需要版本的-Java-JDK，这里我选择的版本是大家用得最多的版本Java-8。"><a href="#1、到官网下载需要版本的-Java-JDK，这里我选择的版本是大家用得最多的版本Java-8。" class="headerlink" title="1、到官网下载需要版本的 Java JDK，这里我选择的版本是大家用得最多的版本Java 8。"></a>1、到官网下载需要版本的 Java JDK，这里我选择的版本是大家用得最多的版本Java 8。</h2><p>到 Oracle 的官网，选择 Download：<br><img src="/posts/d2690585/1.png" alt="image"></p><p>选择 Java 下载：<br><img src="/posts/d2690585/2.png" alt="image"></p><p>选择 Java (JDK) for Developers<br><img src="/posts/d2690585/3.png" alt="image"></p><p>选择需要的版本进行下载（貌似这个官网的界面变了，但是不影响）<br><img src="/posts/d2690585/4.png" alt="image"></p><h2 id="2、在CentOS中利用终端新建java的安装目录，并进入该目录中："><a href="#2、在CentOS中利用终端新建java的安装目录，并进入该目录中：" class="headerlink" title="2、在CentOS中利用终端新建java的安装目录，并进入该目录中："></a>2、在CentOS中利用终端新建java的安装目录，并进入该目录中：</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/java           <span class="token comment">#新建java安装目录</span><span class="token builtin class-name">cd</span> /usr/java              <span class="token comment">#进入该目录</span></code></pre><p>或者直接利用Xftp工具连接到CentOS进行文件操作（这个工具特别好用，推荐使用）。把下载好的 jdk 压缩包上传到CentOS服务器的 &#x2F;usr&#x2F;java&#x2F; 目录下，这里也可以使用Xftp工具，使用也是非常的方便。</p><h2 id="3、解压"><a href="#3、解压" class="headerlink" title="3、解压"></a>3、解压</h2><p>进入 &#x2F;usr&#x2F;java&#x2F; 目录，对刚刚上传的压缩包进行解压。解压后会在该目录下得到一个名字为jdk1.8.0_241的目录（建议不要改动）</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf jdk-8u241-linux-x64.tar.gz</code></pre><h2 id="4、最重要的一步，设置环境变量"><a href="#4、最重要的一步，设置环境变量" class="headerlink" title="4、最重要的一步，设置环境变量"></a>4、最重要的一步，设置环境变量</h2><p>利用vim编辑环境变量。如果不会使用，建议使用上面提到的Xftp工具（这个工具真的很好用）来修改该环境变量文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile</code></pre><p>在该文件的最底下添加以下内容，并保存修改：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># java环境变量的配置</span><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/java/jdk1.8.0_241<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre/lib/ext:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span> JAVA_HOME CLASSPATH</code></pre><h2 id="5、执行以下命令，使新添加的环境变量生效"><a href="#5、执行以下命令，使新添加的环境变量生效" class="headerlink" title="5、执行以下命令，使新添加的环境变量生效"></a>5、执行以下命令，使新添加的环境变量生效</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile</code></pre><h2 id="6、检查是否安装成功"><a href="#6、检查是否安装成功" class="headerlink" title="6、检查是否安装成功"></a>6、检查是否安装成功</h2><p>在终端窗口执行</p><pre class="language-bash" data-language="bash"><code class="language-bash">java -versionjavac -version</code></pre><p>每个命令都会返回Java的版本信息，如果正确显示出版本信息，那么恭喜你安装成功了，可以正常使用Java了。</p>]]></content>
      
      
      <categories>
          
          <category> EnvConfig </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双系统中正确卸载Ubuntu以及删除EFI分区和启动项</title>
      <link href="/posts/bb75f575.html"/>
      <url>/posts/bb75f575.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>本文转自博客：<a href="https://blog.csdn.net/mtllyb/article/details/78635757">https://blog.csdn.net/mtllyb/article/details/78635757</a><br>本文主要针对UEFI和GPT双系统下Ubuntu EFI分区及启动项的删除。</p></blockquote><h2 id="1、查看电脑分区信息"><a href="#1、查看电脑分区信息" class="headerlink" title="1、查看电脑分区信息"></a>1、查看电脑分区信息</h2><p>打开win10磁盘管理器，可以看到相应分区信息，具体如下图(根据个人分区方式会不同)：<br><img src="/posts/bb75f575/1.png" alt="image"><br>这里说明下，磁盘1中标红色的为Ubuntu下各分区信息，分别为：swap分区，EFI分区，&#x2F;home分区，&#x2F;usr分区和&#x2F;分区。这里可以直接删除swap分区，&#x2F;home分区，&#x2F;usr分区和&#x2F;分区。接下来要做的就是删除EFI分区以及修改win10EFI分区(不修改的话还会有Ubuntu启动项)。</p><h2 id="2、删除EFI分区"><a href="#2、删除EFI分区" class="headerlink" title="2、删除EFI分区"></a>2、删除EFI分区</h2><p>要删除Ubuntu系统下的EFI分区，有各种软件和方法，这里推荐直接用windows下的diskpart来删除，省得安装第三方流氓软件。</p><p>首先用管理员权限打开cmd，输入【diskpart】，利用【list disk】查询磁盘信息。这里我们Ubuntu装在磁盘1中，所以选择磁盘1【select disk 1】，然后查看磁盘1下所有分区信息【list partition】，可以看到我们Ubuntu的EFI分区为488MB，根据分区大小这里选择分区4【select partition 4】。然后删除它【delete partition override】。如下图所示：<br><img src="/posts/bb75f575/2.png" alt="image"><br>删除之后就会发现磁盘1中多出了一块未分配空间。</p><h2 id="3、修改win10启动项"><a href="#3、修改win10启动项" class="headerlink" title="3、修改win10启动项"></a>3、修改win10启动项</h2><p>如果这样结束，开机按F9或F12会发现启动项里还会有Ubuntu启动项：<br><img src="/posts/bb75f575/3.png" alt="image"><br>这是因为在安装Ubuntu后，Ubuntu的引导信息也写在了win10的EFI启动分区里。如果不删除的话，以后再安装Ubuntu会出现很多个Ubuntu启动项。</p><p>在win10下我们无法访问EFI分区，因为没有盘符。如图所示：<br><img src="/posts/bb75f575/4.png" alt="image"></p><p>这里我们还是利用diskpart来操作，首先进入磁盘0为EFI分区分配盘符。操作如下：</p><ol><li>先选择磁盘0【select disk 0】即win10系统所在的磁盘。</li><li>查看分区列表以确定具体分区【list partition】。</li><li>根据容量(这里是260MB)选择分区【select partition 1】。</li><li>为win10的EFI分区分配盘符【assign letter&#x3D;p】这里p为盘符，字母A~Z应该都可以(大小写无关，自动转成大写)，不要和已有的盘符重复即可。</li></ol><p>效果如图，注意这里不要按照图里的把盘符删除，即【remove letter&#x3D;p】这一步先不做：<br><img src="/posts/bb75f575/5.png" alt="image"></p><p>这时再次查看win10磁盘会发现有个p盘，就是我们刚刚分配的EFI分区，如下图：<br><img src="/posts/bb75f575/6.png" alt="image"></p><p>直接打开我们会发现权限不够，打不开。这里我们要运用一个小技巧，先用管理员权限打开记事本，然后通过记事本菜单栏里的【打开】来访问P盘，会发现P盘里有个EFI文件夹，打开EFI文件夹，发现如下目录(电脑不一样可能会稍有不同)：<br><img src="/posts/bb75f575/7.png" alt="image"></p><p>这里直接删除ubuntu文件夹就可以了。</p><p>此时再回到diskpart删除EFI分区盘符P【remove letter&#x3D;p】。</p><p><strong>注：</strong> 这里利用记事本是借用能用管理员权限打开记事本，记事本就被赋予了管理员权限，相当于使用管理员权限访问p盘，其他能用管理员权限的软件应该也都可以，因为记事本方便且简单所以这里采用记事本。</p><p>原文链接：<a href="https://blog.csdn.net/mtllyb/article/details/78635757">https://blog.csdn.net/mtllyb/article/details/78635757</a></p>]]></content>
      
      
      <categories>
          
          <category> SystemIns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EnvConfig </tag>
            
            <tag> Windows </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> SystemIns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10中安装Ubuntu18.04双系统教程</title>
      <link href="/posts/849e44cf.html"/>
      <url>/posts/849e44cf.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>本文转自博客：<a href="https://www.cnblogs.com/masbay/p/11627727.html">https://www.cnblogs.com/masbay/p/11627727.html</a><br>本教程为在windows10中安装ubuntu18.04（64位）双系统教程，更多的是一些经验总结，避免大家采坑，安装方法同样适用于ubuntu16.04（64位）。为了直观和易于理解，我会尽量图文并茂，并用最通俗的语言完成这篇教程。</p></blockquote><h2 id="一、查看电脑的信息"><a href="#一、查看电脑的信息" class="headerlink" title="一、查看电脑的信息"></a>一、查看电脑的信息</h2><h3 id="1-查看BIOS模式"><a href="#1-查看BIOS模式" class="headerlink" title="1.查看BIOS模式"></a>1.查看BIOS模式</h3><p><strong>“win+r”快捷键进入”运行”，输入”msinfo32”回车，出现以下界面，可查看BIOS模式：</strong></p><p><strong>UEFI模式：</strong><br><img src="/posts/849e44cf/1.png" alt="image"></p><p><strong>传统MBR模式：</strong><br><img src="/posts/849e44cf/2.png" alt="image"></p><p>BIOS模式有传统的MBR模式和新式UEFI模式，这将对安装双系统的方法产生直接影响。目前来看，大部分电脑都属于新式UEFI模式，不过也存在一些老机子仍然属于传统MBR模式。本教程只介绍新式UEFI模式下的双系统安装方法，如果你的电脑属于传统MBR模式，强烈建议你重装windows系统来更新BIOS模式到UEFI。</p><h3 id="2-搞清楚电脑的硬盘数"><a href="#2-搞清楚电脑的硬盘数" class="headerlink" title="2.搞清楚电脑的硬盘数"></a>2.搞清楚电脑的硬盘数</h3><p><strong>电脑是单双硬盘希望你买电脑时就已经清楚，这也算是卖点之一，如果这个都不知道，也请不要自暴自弃，继续往下看。</strong></p><p><strong>“此电脑”点击右键，点击”管理”，点击”磁盘管理”：</strong><br><img src="/posts/849e44cf/3.png" alt="image"><br><img src="/posts/849e44cf/4.png" alt="image"></p><p>相信你已经清楚了自己电脑的信息，以下请注意有区分”单硬盘”和”双硬盘”操作的部分。</p><h2 id="二、制作系统盘"><a href="#二、制作系统盘" class="headerlink" title="二、制作系统盘"></a>二、制作系统盘</h2><p><strong>需要准备以下工具：</strong><br>① ubuntu系统镜像<br>② 刻录软件，推荐”软碟通”，会提示注册，选择继续试用就好<br>③ 一个大于 2G 的 U 盘</p><h3 id="1-安装并打开软碟通，插上-U-盘，并且最好备份你的-U-盘，因为之后需要格式化；"><a href="#1-安装并打开软碟通，插上-U-盘，并且最好备份你的-U-盘，因为之后需要格式化；" class="headerlink" title="1.安装并打开软碟通，插上 U 盘，并且最好备份你的 U 盘，因为之后需要格式化；"></a>1.安装并打开软碟通，插上 U 盘，并且最好备份你的 U 盘，因为之后需要格式化；</h3><h3 id="2-进入软碟通，选择文件，浏览到你的ubuntu镜像所在的目录，选择ubuntu镜像文件，双击打开，如图："><a href="#2-进入软碟通，选择文件，浏览到你的ubuntu镜像所在的目录，选择ubuntu镜像文件，双击打开，如图：" class="headerlink" title="2.进入软碟通，选择文件，浏览到你的ubuntu镜像所在的目录，选择ubuntu镜像文件，双击打开，如图："></a>2.进入软碟通，选择文件，浏览到你的ubuntu镜像所在的目录，选择ubuntu镜像文件，双击打开，如图：</h3><p><img src="/posts/849e44cf/5.png" alt="image"><br><img src="/posts/849e44cf/6.png" alt="image"></p><h3 id="3-在软碟通界面菜单栏选择”启动”，选择”写入硬盘映像”，如图所示："><a href="#3-在软碟通界面菜单栏选择”启动”，选择”写入硬盘映像”，如图所示：" class="headerlink" title="3.在软碟通界面菜单栏选择”启动”，选择”写入硬盘映像”，如图所示："></a>3.在软碟通界面菜单栏选择”启动”，选择”写入硬盘映像”，如图所示：</h3><p><img src="/posts/849e44cf/7.png" alt="image"><br><img src="/posts/849e44cf/8.png" alt="image"></p><p><strong>接下来很重要，注意次序：</strong></p><p>1）看你的硬盘驱动器是否对应的是你的 U 盘（必须是） ，一般默认是；<br>2）看映像文件是否对应你的 ubuntu 镜像；<br>3）如果上述均没有错误，选择格式化，之后就会格式化你的 U 盘；<br>4）在 U 盘格式化完毕之后，选择写入，之后就是慢慢等待了，等待写入完毕；<br>5）步骤二完毕。</p><h2 id="三、在windows下创建空白分区"><a href="#三、在windows下创建空白分区" class="headerlink" title="三、在windows下创建空白分区"></a>三、在windows下创建空白分区</h2><p><strong>说明：这一步是为ubuntu系统分配空间，单硬盘和双硬盘存在一点区别。</strong></p><h3 id="1-”此电脑”点击右键，点击”管理”，点击”磁盘管理”："><a href="#1-”此电脑”点击右键，点击”管理”，点击”磁盘管理”：" class="headerlink" title="1.”此电脑”点击右键，点击”管理”，点击”磁盘管理”："></a>1.”此电脑”点击右键，点击”管理”，点击”磁盘管理”：</h3><p><img src="/posts/849e44cf/9.png" alt="image"><br><img src="/posts/849e44cf/10.png" alt="image"></p><h3 id="2-为ubuntu分配空间"><a href="#2-为ubuntu分配空间" class="headerlink" title="2.为ubuntu分配空间"></a>2.为ubuntu分配空间</h3><p><strong>（1）</strong>如果是单硬盘，选择最后一个盘（比如 CD两个盘的最后一个是D盘，CDE盘的最后一个是E盘，CDEF盘的最后一个是F盘，以此类推），在该盘点击右键，选择压缩卷，如下，输入压缩空间量，单位为M,如果空间充足，建议分出80G或100G，空间不足也可以分60G（1G&#x3D;1024M）：<br><img src="/posts/849e44cf/11.png" alt="image"></p><p><strong>如果你的最后一个盘容量太小，还不够分出60G，那需要从其他盘匀一些过来，你需要用到DiskGenius这个工具，具体操作不在此介绍，希望你自行解决。</strong></p><p><strong>（2）</strong>如果是双硬盘，需要先在C盘（按理来说就是电脑的第一块硬盘，部分电脑系统装得比较奇怪，装到了第二块硬盘）分出200M的空白分区用来安装ubuntu的启动项，然后再在另一块硬盘选择最后一个盘（比如 CD两个盘的最后一个是D盘，CDE盘的最后一个是E盘，CDEF盘的最后一个是F盘，以此类推），在该盘点击右键，选择压缩卷，如下，输入压缩空间量，单位为M,如果空间充足，建议分出80G或100G，空间不足也可以分60G（1G&#x3D;1024M）：<br><img src="/posts/849e44cf/12.png" alt="image"></p><p><strong>这里解释两个问题：</strong><br><strong>（1）</strong>单双硬盘为什么分区存在区别：你可以看到分区的差别只是双硬盘的时候在C盘分出了200M用来安装启动项。电脑在开机的时候，会自动在C盘所在的那个硬盘搜索启动项以启动系统，我们当然希望安装的ubuntu启动项也能够被搜索到，所以需要将启动项安装在这里，这样开机时会搜索到windows和ubuntu两个启动项，我们可以手动选择进入哪个系统。当然这里的”启动项需要安装在C盘所在的硬盘”并不是绝对的，只是为了开机能够自动搜索到启动项，安装在其他硬盘也可以，只是每次开机都需要进boot manager才能找到ubuntu启动项，比较麻烦，所以建议按照我的方法来分区。<br><strong>（2）</strong>为什么要选择最后一个盘压缩卷：windows和ubuntu的文件存储格式是不一样的，我们分区的操作只是将磁盘分了一部分给ubuntu，事实上两个系统还是在共用一块磁盘，为了防止存储格式不同两个系统可能相互影响，我们通过从最后一个盘压缩将ubuntu的分区分到了磁盘最后一段，也就是一块磁盘的前部分是windows的分区，后部分是ubuntu的分区。</p><p><strong>我的电脑是双硬盘，下面是我的分区结果：</strong><br><img src="/posts/849e44cf/13.png" alt="image"></p><h2 id="四、用做好的系统盘安装系统"><a href="#四、用做好的系统盘安装系统" class="headerlink" title="四、用做好的系统盘安装系统"></a>四、用做好的系统盘安装系统</h2><p><strong>注：</strong> 因为各个厂商的计算机bios和boot manager启动的快捷键不相同，所以请自行百度如何进bios和boot manager。</p><h3 id="1-插好系统盘，重启电脑，开机进bios，在Security页面，关掉secure-boot（不同电脑secure-boot可能在不同位置），然后到Boot页面，如果有Fast-Boot这一项（部分联想电脑有），也把它关掉，没有忽略；然后保存更改，在Boot页面下方启动项选择-USB启动，回车，如果顺利进入安装页面，继续往下做；如果点击USB启动项无法进入，保存并退出，电脑会重启，根据自己电脑按相应的键进boot-manager，找到USB启动项，回车即可进入。"><a href="#1-插好系统盘，重启电脑，开机进bios，在Security页面，关掉secure-boot（不同电脑secure-boot可能在不同位置），然后到Boot页面，如果有Fast-Boot这一项（部分联想电脑有），也把它关掉，没有忽略；然后保存更改，在Boot页面下方启动项选择-USB启动，回车，如果顺利进入安装页面，继续往下做；如果点击USB启动项无法进入，保存并退出，电脑会重启，根据自己电脑按相应的键进boot-manager，找到USB启动项，回车即可进入。" class="headerlink" title="1.插好系统盘，重启电脑，开机进bios，在Security页面，关掉secure boot（不同电脑secure boot可能在不同位置），然后到Boot页面，如果有Fast Boot这一项（部分联想电脑有），也把它关掉，没有忽略；然后保存更改，在Boot页面下方启动项选择 USB启动，回车，如果顺利进入安装页面，继续往下做；如果点击USB启动项无法进入，保存并退出，电脑会重启，根据自己电脑按相应的键进boot manager，找到USB启动项，回车即可进入。"></a>1.插好系统盘，重启电脑，开机进bios，在Security页面，关掉secure boot（不同电脑secure boot可能在不同位置），然后到Boot页面，如果有Fast Boot这一项（部分联想电脑有），也把它关掉，没有忽略；然后保存更改，在Boot页面下方启动项选择 USB启动，回车，如果顺利进入安装页面，继续往下做；如果点击USB启动项无法进入，保存并退出，电脑会重启，根据自己电脑按相应的键进boot manager，找到USB启动项，回车即可进入。</h3><p><img src="/posts/849e44cf/14.png" alt="image"><br><img src="/posts/849e44cf/15.png" alt="image"></p><h3 id="2-然后会进入这个界面，选择Install-Ubuntu，回车确认"><a href="#2-然后会进入这个界面，选择Install-Ubuntu，回车确认" class="headerlink" title="2.然后会进入这个界面，选择Install Ubuntu，回车确认"></a>2.然后会进入这个界面，选择Install Ubuntu，回车确认</h3><p><img src="/posts/849e44cf/16.png" alt="image"></p><h3 id="3-或许没有上一个界面，但是下面的界面一定是有的，不同镜像会有些差异，但意思都一样，语言栏往下拉会有中文"><a href="#3-或许没有上一个界面，但是下面的界面一定是有的，不同镜像会有些差异，但意思都一样，语言栏往下拉会有中文" class="headerlink" title="3.或许没有上一个界面，但是下面的界面一定是有的，不同镜像会有些差异，但意思都一样，语言栏往下拉会有中文"></a>3.或许没有上一个界面，但是下面的界面一定是有的，不同镜像会有些差异，但意思都一样，语言栏往下拉会有中文</h3><p><img src="/posts/849e44cf/17.png" alt="image"><br><img src="/posts/849e44cf/18.png" alt="image"></p><h3 id="4-点击”安装Ubuntu”，出现以下或类似界面只选”为图形或无线硬件，以及MP3和其他媒体安装第三方软件”，不选第一个，边安装边下载更新很慢，点击”继续”"><a href="#4-点击”安装Ubuntu”，出现以下或类似界面只选”为图形或无线硬件，以及MP3和其他媒体安装第三方软件”，不选第一个，边安装边下载更新很慢，点击”继续”" class="headerlink" title="4.点击”安装Ubuntu”，出现以下或类似界面只选”为图形或无线硬件，以及MP3和其他媒体安装第三方软件”，不选第一个，边安装边下载更新很慢，点击”继续”"></a>4.点击”安装Ubuntu”，出现以下或类似界面只选”为图形或无线硬件，以及MP3和其他媒体安装第三方软件”，不选第一个，边安装边下载更新很慢，点击”继续”</h3><p><img src="/posts/849e44cf/19.png" alt="image"></p><h3 id="5-出现以下或类似界面，一定要选择”其他选项”，因为需要手动分区"><a href="#5-出现以下或类似界面，一定要选择”其他选项”，因为需要手动分区" class="headerlink" title="5.出现以下或类似界面，一定要选择”其他选项”，因为需要手动分区"></a>5.出现以下或类似界面，一定要选择”其他选项”，因为需要手动分区</h3><p><img src="/posts/849e44cf/20.png" alt="image"></p><h3 id="6-分区界面如下"><a href="#6-分区界面如下" class="headerlink" title="6.分区界面如下"></a>6.分区界面如下</h3><p><img src="/posts/849e44cf/21.png" alt="image"></p><p>在这里，你可以看到在第三步已经分好的空闲分区，上图是单硬盘的情况，只有一个空闲分区，大小是你分区时给定的；双硬盘的话还能看到另一个空闲分区，大小200M左右，所以下面的分区操作单双硬盘存在一点差别。</p><p><strong>在这里，我们进行手动分区，假设你留出的空闲分区为 80G，点击空闲盘符，点击”+”进行分区，如下：</strong></p><p>1）<strong>efi:</strong> 如果是单硬盘，在唯一的一个空闲分区上添加，大小200M，逻辑分区，空间起始位置，用于efi；如果是双硬盘，找到事先分好的200M空闲分区添加，逻辑分区，空间起始位置，用于efi。这个分区必不可少，用于安装ubuntu启动项。以下步骤单双硬盘就一样了，都在那个80G的空闲分区上添加</p><p>2）<strong>swap:</strong> 中文是”交换空间”，充当ubuntu的虚拟内存，一般的大小为电脑物理内存的2倍左右，可以将其分为 8G，逻辑分区，空间起始位置，用于”swap”或”交换空间”</p><p>3）**&#x2F;:** 这是ubuntu 的根目录,用于安装系统和软件，相当于windows的C盘，我们将其分为 20G，主分区，空间起始位置，用于”ext4日志文件系统”，挂载点为”&#x2F;“（根据你的磁盘空间调整，可以大一点，毕竟ubuntu装软件都是默认装在根目录的）</p><p>4）**&#x2F;home:** 相当于windows的其他盘，剩下的全分给它，逻辑分区，空间起始位置，用于”ext4日志文件系统”，挂载点为”&#x2F;home”</p><p>好了，分区完毕，你完全可以按照上面的描述进行分区，不会有任何问题，起码我一直都是这么做的（强烈建议）。当然，你也可以划分的更详细，具体划分可以百度。</p><p><strong>下面的这一步很重要：</strong> 在分区界面的下方，选择安装启动项的位置，我们刚刚不是创建了200M的efi分区吗，现在你看看这个区前面的编号是多少，比如是&#x2F;dev&#x2F;sda1,不同的机子会有不同的编号，下拉列表选择这个efi分区编号（<strong>这里一定要注意，windows的启动项也是efi文件，大小大概是500M，而我们创建的ubuntu的efi大小是200M，一定要选对</strong>），之后点击”Install Now”<br><img src="/posts/849e44cf/22.png" alt="image"></p><h3 id="7-设置地区不重要，按你需要设置，也可以直接继续，不影响"><a href="#7-设置地区不重要，按你需要设置，也可以直接继续，不影响" class="headerlink" title="7.设置地区不重要，按你需要设置，也可以直接继续，不影响"></a>7.设置地区不重要，按你需要设置，也可以直接继续，不影响</h3><p><img src="/posts/849e44cf/23.png" alt="image"></p><h3 id="8-键盘布局默认是英语的，建议不改（默认中文也行）"><a href="#8-键盘布局默认是英语的，建议不改（默认中文也行）" class="headerlink" title="8.键盘布局默认是英语的，建议不改（默认中文也行）"></a>8.键盘布局默认是英语的，建议不改（默认中文也行）</h3><p><img src="/posts/849e44cf/24.png" alt="image"></p><h3 id="9-这里设置用户，自己输入就可以了，例如英文字母，尽量简单点，密码也简单点"><a href="#9-这里设置用户，自己输入就可以了，例如英文字母，尽量简单点，密码也简单点" class="headerlink" title="9.这里设置用户，自己输入就可以了，例如英文字母，尽量简单点，密码也简单点"></a>9.这里设置用户，自己输入就可以了，例如英文字母，尽量简单点，密码也简单点</h3><p><img src="/posts/849e44cf/25.png" alt="image"></p><h3 id="10-系统开始安装，耐心等待安装完毕就可以了"><a href="#10-系统开始安装，耐心等待安装完毕就可以了" class="headerlink" title="10.系统开始安装，耐心等待安装完毕就可以了"></a>10.系统开始安装，耐心等待安装完毕就可以了</h3><p><img src="/posts/849e44cf/26.png" alt="image"></p><h3 id="11-全部完成之后，会提醒你重启，把U盘拔了，点”现在重启”，如果卡死就强制关机再重启就好"><a href="#11-全部完成之后，会提醒你重启，把U盘拔了，点”现在重启”，如果卡死就强制关机再重启就好" class="headerlink" title="11.全部完成之后，会提醒你重启，把U盘拔了，点”现在重启”，如果卡死就强制关机再重启就好"></a>11.全部完成之后，会提醒你重启，把U盘拔了，点”现在重启”，如果卡死就强制关机再重启就好</h3><p><img src="/posts/849e44cf/27.png" alt="image"></p><h3 id="12-重启后你会看到以下界面，第一项是ubuntu启动项，第二项是ubuntu高级设置，第三项是windows启动项，第四项不用管，默认选择的是第一个，回车进ubuntu系统"><a href="#12-重启后你会看到以下界面，第一项是ubuntu启动项，第二项是ubuntu高级设置，第三项是windows启动项，第四项不用管，默认选择的是第一个，回车进ubuntu系统" class="headerlink" title="12.重启后你会看到以下界面，第一项是ubuntu启动项，第二项是ubuntu高级设置，第三项是windows启动项，第四项不用管，默认选择的是第一个，回车进ubuntu系统"></a>12.重启后你会看到以下界面，第一项是ubuntu启动项，第二项是ubuntu高级设置，第三项是windows启动项，第四项不用管，默认选择的是第一个，回车进ubuntu系统</h3><p><img src="/posts/849e44cf/28.png" alt="image"></p><h3 id="13-也许你已经装好了系统并且成功进入了，那恭喜，你可以离开了；但是如果你装完之后重启，发现卡死在启动界面动不了了，这很大可能是你的电脑有特殊独立显卡，ubuntu系统下缺少驱动导致，可以参考该篇博客解决：https-www-cnblogs-com-masbay-p-10718514-html。"><a href="#13-也许你已经装好了系统并且成功进入了，那恭喜，你可以离开了；但是如果你装完之后重启，发现卡死在启动界面动不了了，这很大可能是你的电脑有特殊独立显卡，ubuntu系统下缺少驱动导致，可以参考该篇博客解决：https-www-cnblogs-com-masbay-p-10718514-html。" class="headerlink" title="13.也许你已经装好了系统并且成功进入了，那恭喜，你可以离开了；但是如果你装完之后重启，发现卡死在启动界面动不了了，这很大可能是你的电脑有特殊独立显卡，ubuntu系统下缺少驱动导致，可以参考该篇博客解决：https://www.cnblogs.com/masbay/p/10718514.html。"></a>13.也许你已经装好了系统并且成功进入了，那恭喜，你可以离开了；但是如果你装完之后重启，发现卡死在启动界面动不了了，这很大可能是你的电脑有特殊独立显卡，ubuntu系统下缺少驱动导致，可以参考该篇博客解决：<a href="https://www.cnblogs.com/masbay/p/10718514.html%E3%80%82">https://www.cnblogs.com/masbay/p/10718514.html。</a></h3>]]></content>
      
      
      <categories>
          
          <category> SystemIns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EnvConfig </tag>
            
            <tag> Windows </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> SystemIns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql8.0解决设置密码时Error</title>
      <link href="/posts/c2584909.html"/>
      <url>/posts/c2584909.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>解决 mysql8.0 设置密码error：Your password does not satisfy the current policy requirements</p></blockquote><p>本文转自博客<a href="https://blog.csdn.net/hello_world_qwp/article/details/79551789">https://blog.csdn.net/hello_world_qwp/article/details/79551789</a></p><p>密码策略问题异常信息：<br>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p><p>如下图：<br><img src="/posts/c2584909/1.png" alt="image"></p><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><p><strong>1、查看 mysql 初始的密码策略</strong><br>输入语句 “ SHOW VARIABLES LIKE ‘validate_password%’; ” 进行查看，如下图：<br><img src="/posts/c2584909/2.png" alt="image"></p><p><strong>2、首先需要设置密码的验证强度等级，设置 validate_password_policy 的全局参数为 LOW 即可</strong><br>输入设值语句 “ set global validate_password_policy&#x3D;LOW; ” 进行设值，如下图：<br><img src="/posts/c2584909/3.png" alt="image"></p><p><strong>3、当前密码长度为8，如果不介意的话就不用修改了，按照通用的来讲，如果要设置为6位的密码，设置 validate_password_length 的全局参数为6即可</strong><br>输入设值语句 “ set global validate_password_length&#x3D;6; ” 进行设值，如下图：<br><img src="/posts/c2584909/4.png" alt="image"></p><p><strong>4、现在可以为 mysql 设置简单密码了，只要满足六位的长度即可</strong><br>输入修改语句 “ ALTER USER ‘root‘@’localhost’ IDENTIFIED BY ‘123456’; ” 可以看到修改成功，表示密码策略修改成功了！！！如下图：<br><img src="/posts/c2584909/5.png" alt="image"></p><p><strong>注：</strong>默认密码的长度最小值为4，由 大&#x2F;小写字母各一个 + 阿拉伯数字一个 + 特殊字符一个，只要设置密码的长度小于4，都将自动设值为4，如下图：<br><img src="/posts/c2584909/6.png" alt="image"></p><p><strong>关于 mysql 密码策略相关参数：</strong><br><strong>1）</strong> validate_password_length  固定密码的总长度；<br><strong>2）</strong> validate_password_dictionary_file 指定密码验证的文件路径；<br><strong>3）</strong> validate_password_mixed_case_count  整个密码中至少要包含大&#x2F;小写字母的总个数；<br><strong>4）</strong> validate_password_number_count  整个密码中至少要包含阿拉伯数字的个数；<br><strong>5）</strong> validate_password_policy 指定密码的强度验证等级，默认为 MEDIUM，有三种取值：</p><ul><li>0&#x2F;LOW：只验证长度；</li><li>1&#x2F;MEDIUM：验证长度、数字、大小写、特殊字符；</li><li>2&#x2F;STRONG：验证长度、数字、大小写、特殊字符、字典文件；</li></ul><p><strong>6）</strong>  validate_password_special_char_count 整个密码中至少要包含特殊字符的个数；</p><p><strong>好了，关于 mysql 密码策略问题 就解决了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EnvConfig </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云Centos7中安装mysql教程</title>
      <link href="/posts/c2186e0.html"/>
      <url>/posts/c2186e0.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>如何在Centos中成功安装配置MySql</p></blockquote><h1 id="1-基本安装过程"><a href="#1-基本安装过程" class="headerlink" title="1 基本安装过程"></a>1 基本安装过程</h1><p><strong>1.查看系统是否安装了mysql软件</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># rpm -qa|grep -i mysql</span></code></pre><p><strong>2.将已经安装过的软件卸载掉。注意：这样的卸载是不彻底，不过这里够用了</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yum remove '软件名'</span></code></pre><p><strong>3.CentOS 7的yum源中默认是没有mysql的。所以，为了解决这个问题我们首先下载安装mysql的repo源。</strong>可以去该网站：<a href="http://repo.mysql.com/">http://repo.mysql.com/</a> 选择想要的版本。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># wget http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span></code></pre><p><strong>4.安装mysql的repo源</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># rpm -ivh mysql57-community-release-el7-7.noarch.rpm</span></code></pre><p>安装之后会获得&#x2F;etc&#x2F;yum.repos.d&#x2F;mysql-community.repo和&#x2F;etc&#x2F;yum.repos.d&#x2F;mysql-community-source.repo两个源，可以去相应的路径下查看一下。</p><p><strong>5.开始正式安装MySql，运行以下命令</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yum install mysql-server</span><span class="token comment"># yum install mysql-devel</span><span class="token comment"># yum install mysql</span><span class="token comment"># rpm -qa | grep -i mysql</span></code></pre><p><strong>6.MySql服务的相关操作</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#执行其中之一就可以</span><span class="token comment"># service mysqld status     查看mysql当前的状态</span><span class="token comment"># systemctl status mysqld</span><span class="token comment"># service mysqld stop       停止mysql</span><span class="token comment">#systemctl stop mysqld</span><span class="token comment"># service mysqld restart    重启mysql</span><span class="token comment">#systemctl restart mysqld</span><span class="token comment"># service mysqld start      启动mysql</span><span class="token comment"># systemctl start mysqld</span></code></pre><p><strong>7.设置MySQL开机启动</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> mysqld</code></pre><p><strong>8.启动MySQL服务进程，执行其中之一就行</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># systemctl start mysqld</span><span class="token comment"># service mysqld start</span></code></pre><h1 id="2-安装完成后，不知道登录密码无法登录的问题"><a href="#2-安装完成后，不知道登录密码无法登录的问题" class="headerlink" title="2.安装完成后，不知道登录密码无法登录的问题"></a>2.安装完成后，不知道登录密码无法登录的问题</h1><p>安装完成后用命令  mysql -u root -p 然后按回车键，弹出Enter password需要输入密码，由于不知道密码，无法登陆连接MySql。解决办法如下：</p><p><strong>1.在&#x2F;etc&#x2F;my.cnf文件中最后添加一行 skip-grant-tables 作用就是跳过了mysql的用户验证，然后重启mysql：<code>systemctl restart mysqld</code></strong></p><p><strong>然后直接输入mysql，不需要带任何登录参数直接回车就可以登陆上数据库;</strong></p><p><strong>进入数据库之后，依次执行下面的命令：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">></span> use mysql<span class="token punctuation">;</span>mysql<span class="token operator">></span> show tables<span class="token punctuation">;</span><span class="token keyword">select</span> user,authentication_string from user<span class="token punctuation">;</span>update mysql.user <span class="token builtin class-name">set</span> <span class="token assign-left variable">authentication_string</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'your password'</span><span class="token punctuation">)</span> where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span class="token builtin class-name">exit</span></code></pre><p><strong>2.恢复&#x2F;etc&#x2F;my.cnf文件，将skip-grant-tables删除或者注释掉，然后重启mysql：<code>systemctl restart mysqld</code></strong></p><p><strong>到此为止我们就解决了mysql安装之后登录不知道密码的问题。</strong></p><h1 id="3-登录错误"><a href="#3-登录错误" class="headerlink" title="3.登录错误"></a>3.登录错误</h1><p><strong>下面顺便讲解一下这个问题：安装完mysql 之后登陆，不管运行任何命令，总是提示这个错误：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">You must reset your password using ALTER <span class="token environment constant">USER</span> statement before executing this statement</code></pre><p><strong>处理步骤为：依次执行下面三条代码。</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">SET PASSWORD <span class="token operator">=</span> PASSWORD<span class="token punctuation">(</span><span class="token string">'your new password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span></code></pre><p>这里要注意的是your new password 必须包含数字，字母包含大小写，标点符号。不然好像是不能通过的。(还是有其他的解决方案，关注下一篇博文)</p><p><strong>完成以上三步退出再登，使用新设置的密码就行了，以上除了 your new password 需要修改成新密码外，其他原样输入即可。</strong></p><h1 id="4-远程客户端无法连接MySQL数据库"><a href="#4-远程客户端无法连接MySQL数据库" class="headerlink" title="4.远程客户端无法连接MySQL数据库"></a>4.远程客户端无法连接MySQL数据库</h1><h3 id="4-1-创建新的安全组规则，对外开放3306端口访问授权（阿里云的服务器，默认只需要在管理后端开启3306就可以了，下面操作防火墙的步骤可以免掉）"><a href="#4-1-创建新的安全组规则，对外开放3306端口访问授权（阿里云的服务器，默认只需要在管理后端开启3306就可以了，下面操作防火墙的步骤可以免掉）" class="headerlink" title="4.1 创建新的安全组规则，对外开放3306端口访问授权（阿里云的服务器，默认只需要在管理后端开启3306就可以了，下面操作防火墙的步骤可以免掉）"></a>4.1 创建新的安全组规则，对外开放3306端口访问授权（阿里云的服务器，默认只需要在管理后端开启3306就可以了，下面操作防火墙的步骤可以免掉）</h3><pre class="language-bash" data-language="bash"><code class="language-bash">firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">3306</span>/tcp            <span class="token comment">#添加端口，加完要重启防火墙</span>firewall-cmd --permanent --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">3306</span>/tcp        <span class="token comment">#删除端口，加完要重启防火墙</span></code></pre><p>说明:</p><ul><li>zone 作用域</li><li>add-port&#x3D;3306&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议</li><li>permanent 永久生效，没有此参数重启后失效</li></ul><p><strong>查看端口状态<code>netstat -an | grep 3306</code></strong><br><strong>查看已开启的端口,重启防火墙后有效</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash">firewall-cmd --list-portssystemctl restart firewalld        <span class="token comment">#重启防火墙</span>systemctl status firewalld         <span class="token comment">#查看防火墙状态</span>systemctl stop firewalld           <span class="token comment">#关闭防火墙</span></code></pre><h3 id="4-2-在本机登入mysql后-更改-“mysql”-数据库里的-“user”-表里的-“host”-项-从”localhost”改成’-’。"><a href="#4-2-在本机登入mysql后-更改-“mysql”-数据库里的-“user”-表里的-“host”-项-从”localhost”改成’-’。" class="headerlink" title="4.2 在本机登入mysql后,更改 “mysql” 数据库里的 “user” 表里的 “host” 项,从”localhost”改成’%’。"></a>4.2 在本机登入mysql后,更改 “mysql” 数据库里的 “user” 表里的 “host” 项,从”localhost”改成’%’。</h3><pre class="language-bash" data-language="bash"><code class="language-bash">mysql -u root -pmysql<span class="token operator">></span>use mysql<span class="token punctuation">;</span>mysql<span class="token operator">></span>select host,user from user<span class="token punctuation">;</span>mysql<span class="token operator">></span>update user <span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">'%'</span> where user <span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span>flush privileges<span class="token punctuation">;</span>mysql<span class="token operator">></span>select host,user from user<span class="token punctuation">;</span></code></pre><ul><li>第一句是以权限用户root登录</li><li>第二句:选择mysql库</li><li>第三句:查看mysql库中的user表的host值(即可进行连接访问的主机&#x2F;IP名称)</li><li>第四句:修改host值(以通配符%的内容增加主机&#x2F;IP地址),当然也可以直接增加IP地址</li><li>第五句:刷新MySQL的系统权限相关表</li><li>第六句:再重新查看user表时,有修改</li></ul><h3 id="4-3-重起mysql服务即可完成，service-mysqld-restart"><a href="#4-3-重起mysql服务即可完成，service-mysqld-restart" class="headerlink" title="4.3 重起mysql服务即可完成，service mysqld restart"></a>4.3 重起mysql服务即可完成，service mysqld restart</h3>]]></content>
      
      
      <categories>
          
          <category> EnvConfig </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> EnvConfig </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为2020软件精英挑战赛复赛赛后方案分享</title>
      <link href="/posts/4c44f972.html"/>
      <url>/posts/4c44f972.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>我是来自成渝赛区UESTC的选手，成渝赛区初赛成绩为0.5646s，当时以为不能晋级复赛，就忘了组队。这里分享我复赛时的方案和代码，复赛练习时成绩为12.1534s，正式复赛时成渝赛区排名21，成功拿到手环（我已经很满足了）。本篇博客对于前排大佬来说毫无用处，仅适用于后排同学一起学习进步。</p></blockquote><h3 id="1-复赛练习-赛题介绍"><a href="#1-复赛练习-赛题介绍" class="headerlink" title="1. 复赛练习-赛题介绍"></a>1. 复赛练习-赛题介绍</h3><h3 id="1-1-输入信息"><a href="#1-1-输入信息" class="headerlink" title="1.1 输入信息"></a>1.1 输入信息</h3><p>输入为包含资金流水的文本文件，每一行代表一次资金交易记录，包含本端账号ID, 对端账号ID, 转账金额，用逗号隔开。</p><ul><li>本端账号ID和对端账号ID为一个32为的无符号整数</li><li>转账金额为一个32位的正整数</li><li>账记录最多为200万条</li><li>账号A给账号B最多转账一次</li></ul><p>输入文件举例如下，其中第一行[1,2,100]表示ID为1的账户给ID为2的账户转账100元：<br>1,2,100<br>1,3,100<br>2,4,90<br>3,4,19<br>4,1,95<br>2,5,95<br>5,4,90<br>4,6,30<br>6,7,29<br>7,4,28</p><h3 id="1-2-输出要求"><a href="#1-2-输出要求" class="headerlink" title="1.2 输出要求"></a>1.2 输出要求</h3><p>输出信息为一个文件，包含如下信息:</p><ul><li>第一行输出：满足限制条件下的循环转账个数。线上数据集经过处理，会保证满足条件的循环转账个数小于2000万。</li><li>第二行开始：输出所有满足限制条件的循环转账路径详情。输出的循环转账路径要按照指定排序策略进行排序：每条循环转账中，ID（ID转为无符号整数后）最小的第一个输出；总体按照循环转账路径长度升序排序；同一级别的路径长度下循环转账账号ID序列，按照字典序（ID转为无符号整数后）升序排序。</li></ul><p>输出举例如下：<br>3<br>1,2,4<br>4,6,7<br>1,2,5,4</p><h3 id="1-3-限制条件"><a href="#1-3-限制条件" class="headerlink" title="1.3 限制条件"></a>1.3 限制条件</h3><ul><li>循环转账的路径长度最小为3（包含3）最大为7（包含7），例如：账户A给账户B转账，账户B给账户A转账。循环转账的路径长度为2，不满足循环转账条件。</li><li>转账金额浮动区间约束为[0.2, 3] ：循环转账的前后路径的转账金额浮动，不能小于0.2，不能大于3。如账户A转给账户B 转X元，账户B转给账户C转Y元， 那么进行循环检测时，要满足0.2 &lt;&#x3D; Y&#x2F;X &lt;&#x3D; 3的条件。</li></ul><h3 id="2-复赛练习-方案思路"><a href="#2-复赛练习-方案思路" class="headerlink" title="2. 复赛练习-方案思路"></a>2. 复赛练习-方案思路</h3><h4 id="2-1-算法整体框架"><a href="#2-1-算法整体框架" class="headerlink" title="2.1 算法整体框架"></a>2.1 算法整体框架</h4><ul><li>第一步：使用mmap读取文件并解析好数据，对账户ID做好<strong>id映射</strong></li><li>第二步：构建正向图和反向图，为以下算法打好基础</li><li>第三步：利用正向图和反向图双向dfs（双向深度搜索），外加多线程并行寻环，同时往结果char数组中写入结果</li><li>第四步：将char数组的结果写入文件</li></ul><h4 id="2-2-算法讲解"><a href="#2-2-算法讲解" class="headerlink" title="2.2 算法讲解"></a>2.2 算法讲解</h4><p>以上的步骤中第三步是重点，但是每一步都必不可少（感觉像是在说废话）。</p><h5 id="2-2-1-前菜"><a href="#2-2-1-前菜" class="headerlink" title="2.2.1 前菜"></a>2.2.1 前菜</h5><p>首先提出一些问题和解决方案，针对这些问题，估计大家都是这么解决的。</p><pre class="language-text" data-language="text"><code class="language-text">1、能不能在寻环的过程中，就能保证环的起点是最小ID值2、能不能在寻环结束之后，就能保证全部的环是按照长度为第一优先，字典序为第二优先级排好序</code></pre><p>这两个问题能节省很多多余的操作，并且大部分选手都能解决，所以我还是先从这两个问题开头吧！<br>这里先介绍一些约定的符号：</p><ul><li>N：表示不重复的账户个数，即节点数</li><li>i：表示账户ID值映射到 0~(N-1) 之间，i∈{0,1,2,…,N-1}，这里可以理解为每个账户ID存放在数组中的位置，从0开始</li><li>ID：表示账户(节点)原始的ID，来自于原始的文件数据</li></ul><p>针对第一个问题，如果dfs遍历到账户ID为5-&gt;4-&gt;6-&gt;3的环，那么按照赛题的限制要求，我们应该按照3-&gt;5-&gt;4-&gt;6的顺序输出，因为环中的最小ID要放在最前面。那么其实当我们以某个账户ID为起始节点开始dfs时，只要控制后续遍历的ID值是大于这个开始节点的，那么就能保证找到的环都是满足起点是最小ID值。比如：当我们开始寻找以ID为3作为起点的环时，只要控制后续遍历的ID值是大于3的，那么找到的环都是满足起点是最小ID值3。然后再继续寻找以账户ID为4作为起点的环……</p><p>针对第二个问题，可以在找完所有的环后，做一个排序。但是其实在dfs遍历寻环的过程中就可以保证其满足字典序。首先对账户ID值做一个排序，保证ID值的相对顺序和ID映射之后的相对顺序一致。比如说有4个账户ID：{5, 11, 8, 13}，如果说按照先后出现的顺序做映射，那么将会映射成 ID-&gt;i：{5-&gt;0, 11-&gt;1, 8-&gt;2, 13-&gt;3}。试想，寻找以i为起点的环，i从0~(N-1)变化，当i为0时，开始找以5为起点的环，然后是以11为起点的环，再然后是以8为起点的环。那这样，全部的环排列当然是无序的。但是如果先对所有的ID排个序，再做映射，ID-&gt;：{5-&gt;0, 8-&gt;1, 11-&gt;2, 13-&gt;3}，其中{5, 8, 11, 13}和{0, 1, 2, 3}的相对大小顺序是相同时。那么在挨个寻环的过程中，环的起点是按顺序排的，但是相同长度的环并非按照字典序排的，这里需要在建图时将每个节点的邻居节点排序，在dfs搜索每个节点的邻居节点时才能保证从小到大的顺序，从而保证找到的环按字典序排好序。这里需要注意的是，要为找到的长度为3，4，5，6，7的环分别建立容器去存储。例如检测到长度为3的环，那么就写到对应的容器中。这个容器可以是int数组，也可以是char数组。</p><h5 id="2-2-2-中菜"><a href="#2-2-2-中菜" class="headerlink" title="2.2.2 中菜"></a>2.2.2 中菜</h5><p>由于不知道线上数据集的大小，而且复赛规则中取消了每个节点的平均度为10的这个条件，所以图的数据结构，用<code>vector&lt;Node&gt;</code>作为邻接表，用<code>vecotr&lt;Node&gt; G[N]</code>作为整个图，用<code>vector&lt;Node&gt; RG[N]</code>作为反向图（具体请参照后面的代码）。</p><ul><li>反向图：如果i直接连接到j，那么记录下有哪些节点和j存在以j为终点的直接连接，同样是一个邻接表，只不过是反向记录的。反向图的好处是很大的，可以帮助dfs执行的更快。</li></ul><h5 id="2-2-3-压轴菜"><a href="#2-2-3-压轴菜" class="headerlink" title="2.2.3 压轴菜"></a>2.2.3 压轴菜</h5><h6 id="2-2-3-1-利用正向图和反向图双向dfs寻环"><a href="#2-2-3-1-利用正向图和反向图双向dfs寻环" class="headerlink" title="2.2.3.1 利用正向图和反向图双向dfs寻环"></a>2.2.3.1 利用正向图和反向图双向dfs寻环</h6><p>如果使用dfs寻找长度为7的环，最大递归深度为7，在面对线上如此大的数据集的时候，这个深度可以说非常深，因为层次越大，遍历的节点数目呈指数级上升。能不能不遍历这么多层就可以知道有没有环呢？数组7的最大平均拆分是4+3或者3+4，群里很多选手都说自己的方案是4+3或者几+几。这些数字的意义是啥。见下图：<br><img src="/posts/4c44f972/1.png" alt="image"><br>这里有一个环：1-&gt;5-&gt;3-&gt;4-&gt;2-&gt;6-&gt;7，起点为1。<br>对于一个环来说，从某个位置往后继节点的位置走，和往反方向走，一定会碰到一起。比如1往后继节点走4步到2，然后1反方向走3步也能到2。所以我们可以设置正向dfs递归深度为4，反向dfs递归深度为3。当开始寻找以i为起点的环时，可以先反向走3步，构建能到i能到达的反向路径，用ptp2存这样的路径，转账数额也一同存入；用ptp1存从i反向走2步能到达的反向路径，同样转账数额也一同存入。然后开始从i出发，正向开始遍历，假设第一层dfs遍历到节点k，那么目前的路径为i-&gt;k。假设i存在一个长度为3的环{i, k, n}，i反向走2步也是到k。而我们已经用ptp1记录了从i反向走两步的所有路径，如果这些路径中存在以k为起点的路段，那我们就找到了一个以i为起点，长度为3的环。接下来，再往后继节点走一步，我们可以通过ptp1获得长度为4的环，通过ptp2获得长度为5的环；再往后继节点走一步，通过ptp2获得长度为6的环；在往后继节点走一步，通过ptp2获得长度为7的环。在进行dfs遍历时，同时要判断转账金额是否满足关于赛题中转账金额的浮动约束。至于如何使用ptp1，ptp2，可以见开源代码部分。</p><p>所以整个寻环算法的过程看起来如下：<br><img src="/posts/4c44f972/2.png" alt="image"></p><h6 id="2-2-3-2-双线程并行寻环"><a href="#2-2-3-2-双线程并行寻环" class="headerlink" title="2.2.3.2 双线程并行寻环"></a>2.2.3.2 双线程并行寻环</h6><p>很多选手说并行执行是负优化或者提升不大，很可能是没考虑到线程的工作量是否均衡。还有选手说使用并行就result is incorrect，也有可能是每个线程的数组不够大，有些数组被撑爆了，从而导致丢了答案。</p><p>前排大佬很可能开了很多线程去同时工作，但是分配给每个线程的工作量必须要均衡，不然很可能工作量少的线程运行完退出后，工作量大的线程还在工作，导致最终算法的执行时间和取决于工作量大的线程的运行时间。</p><p>由于摸不透线上数据的分布，所以对于我这种小菜鸟只能勉强使用双线程去实现。一个线程从前往后寻环，另一个线程从后往前寻环，这样两个线程在中间某个节点会碰到一起，此时两个线程的运行时间会差不多，工作量也差别不大。相比于单线程，差不多能提高一倍的成绩。<br>双线程并行寻环的过程看起来如下：<br><img src="/posts/4c44f972/3.png" alt="image"><br><strong>说明1：</strong>这里要注意线程2是从大到小寻环，所以在存环的时候也要倒着走，并且在遍历邻居节点时也要倒着遍历。比如我们创建了10M的字符数组<code>char buf3[10*1024*1024]</code>来存放长度为3的环。线程1找到长度为3的环时从buf3的头向尾写入结果，线程2找到长度为3的环时从buf3的尾向头写入结果。其他长度的环同理，为什么这么做，是为了在之后写文件时更快且保证结果排序的正确性。具体请参照代码。</p><p><strong>说明2：</strong>这里的结束位置肯定是偏左的，因为线程2寻环的首节点id比较大，所以在dfs遍历过程中比这个首节点id大的节点比较少，所寻找的满足条件的环也比较少，可能递归深度没有达到最大就结束了，然后向左移动寻找以id-1为首节点的环。比如，线程2刚开始寻找以最后一个节点为首的环，其实根本找不到满足赛题条件的环，因为其id最大，所以就不可能出现在环首，很快就跳过了最后一个节点。然而线程1是以一个较小的id开始，有较多的节点都比这个id大，所以在遍历过程中比较慢。线程1向右移动的速度比线程2向左移动的速度慢，导致结束位置偏左。正因为以每个节点为首的寻环过程时间开销很难确定，所以想要手动给每个线程提前分配任务就很难做到均分。比如手动将节点数对半分给两个线程，必然是不科学的，并不能达到很好的效果。只有用以上的方法让两个线程自己去把握这个结束位置才能达到较好的效果。当然前排大佬可能使用了更多的线程，任务的分配就更加的复杂，可能使用了自己的调度算法，我这种菜鸟是学不来的，只能做到双线程。</p><h3 id="3-各种细节"><a href="#3-各种细节" class="headerlink" title="3. 各种细节"></a>3. 各种细节</h3><h4 id="3-1-IO篇"><a href="#3-1-IO篇" class="headerlink" title="3.1 IO篇"></a>3.1 IO篇</h4><ul><li>读数据的时候，顺便把i对应的ID值的字符形式表示出来。有两种办法，第一种，直接从mmap映射到的字符串中截取出来。第二种，自己写个to_char函数，把整型转换为char*，方便写入。我使用的是后者。</li><li>写入数据直接往字符数组中写，还利用了多线程，那就相当于同时并行处理了写入数据。</li><li>fwrite和mmap到底谁快，有的人说fwrite快，有的人说mmap快。我用的是mmap。对于IO的优化反正对于线上结果影响还挺大的。</li></ul><h5 id="3-2-DFS篇"><a href="#3-2-DFS篇" class="headerlink" title="3.2 DFS篇"></a>3.2 DFS篇</h5><ul><li>前向dfs只要走4步，用5层for循环嵌套的效率远远低于递归写法</li><li>调整if else if的顺序，把经常发生的情况写在前面，另外switch case的效率高于if else if</li><li>函数中尽量不要带形参，需要带形参的可以设置为全局变量。</li><li>根据官方微信推送的优化思路，用一些临时变量有助于减少寻址。</li></ul><h3 id="4-正式复赛-赛题介绍"><a href="#4-正式复赛-赛题介绍" class="headerlink" title="4. 正式复赛-赛题介绍"></a>4. 正式复赛-赛题介绍</h3><p>变更一：</p><ul><li>循环转账的路径长度最小为3（包含3）最大为8（包含8）</li></ul><p>变更二：</p><ul><li>转账金额变更为浮点数：整数部分大于0，小于2的31次方；小数部分用小于等于2位数的数字表示。如下方式都是正确的表示</li><li>整数部分.YY 如 1000.53  1000.50 1000.00</li><li>整数部分.Y  如 1000.5  1000.0</li><li>整数部分 如 1000</li></ul><p>正式复赛要求在两个半小时之内提交结果，有五次提交机会，我太菜了提交了3次都是0%result is incorrect</p><p>整体算法思路都以上的思路，采用单线程实现的，由于没有成绩，不知道代码哪个地方有问题，经供参考学习。</p><h3 id="5-赛后感受"><a href="#5-赛后感受" class="headerlink" title="5. 赛后感受"></a>5. 赛后感受</h3><ul><li>细节决定排名</li><li>算法虽好，也要看实现方式（数据结构尽量用数组，new和vector是真的慢）</li><li>C++强无敌，前排没有一个使用python和java的</li></ul><h3 id="6-代码开源"><a href="#6-代码开源" class="headerlink" title="6. 代码开源"></a>6. 代码开源</h3><ul><li><a href="4c44f972/main.rar">复赛练习 main.cpp</a></li><li><a href="4c44f972/test.rar">正式复赛 test.cpp</a></li><li><a href="4c44f972/%E5%A4%8D%E8%B5%9B%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE.rar">测试数据</a></li><li><a href="4c44f972/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.pptx">算法分析.pptx</a></li></ul><h3 id="7-复赛练习-main-cpp"><a href="#7-复赛练习-main-cpp" class="headerlink" title="7. 复赛练习 main.cpp"></a>7. 复赛练习 main.cpp</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string testFile <span class="token operator">=</span> <span class="token string">"test_data.txt"</span><span class="token punctuation">;</span>string resultFile <span class="token operator">=</span> <span class="token string">"rslt.txt"</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> id<span class="token punctuation">;</span>uint money<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span>other<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> id<span class="token operator">&lt;</span>other<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Node <span class="token operator">&amp;</span>other<span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> id<span class="token operator">==</span>other<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Node<span class="token punctuation">;</span><span class="token comment">/*构建图需要的变量*/</span><span class="token keyword">int</span> account_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>uint inputs<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>uint accts<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> G<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> RG<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/**********************/</span><span class="token comment">/*存放每个账户ID的字符串*/</span><span class="token keyword">char</span> account_chars<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">short</span> length<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/**********************/</span><span class="token comment">/*存放结果*/</span><span class="token keyword">char</span> buf3<span class="token punctuation">[</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>hf3<span class="token punctuation">,</span> <span class="token operator">*</span>tf3<span class="token punctuation">;</span>   <span class="token comment">// 64M //线程1通过hf3(head of buf3)从前往后写，线程2通过tf3(tail of buf3)从后往前写</span><span class="token keyword">char</span> buf4<span class="token punctuation">[</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>hf4<span class="token punctuation">,</span> <span class="token operator">*</span>tf4<span class="token punctuation">;</span>   <span class="token comment">// 64M</span><span class="token keyword">char</span> buf5<span class="token punctuation">[</span><span class="token number">64</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>hf5<span class="token punctuation">,</span> <span class="token operator">*</span>tf5<span class="token punctuation">;</span>   <span class="token comment">// 64M</span><span class="token keyword">char</span> buf6<span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>hf6<span class="token punctuation">,</span> <span class="token operator">*</span>tf6<span class="token punctuation">;</span> <span class="token comment">// 1024M</span><span class="token keyword">char</span> buf7<span class="token punctuation">[</span><span class="token number">1468</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>hf7<span class="token punctuation">,</span> <span class="token operator">*</span>tf7<span class="token punctuation">;</span> <span class="token comment">// 1468M</span><span class="token keyword">int</span> r3_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r4_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r5_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r6_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r7_1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> r3_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r4_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r5_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r6_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r7_2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/**********************/</span><span class="token comment">/*线程锁*/</span>pthread_mutex_t g_mutex <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span><span class="token comment">/**********************/</span><span class="token comment">/*线程1变量*/</span><span class="token keyword">int</span> head_1<span class="token punctuation">;</span><span class="token keyword">int</span> canReach1_1<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> canReach2_1<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Node layer_1<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> ptp1_1<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> ptp2_1<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis_1<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> path_1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pay_1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/**********************/</span><span class="token comment">/*线程2变量*/</span><span class="token keyword">int</span> head_2<span class="token punctuation">;</span><span class="token keyword">int</span> canReach1_2<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> canReach2_2<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Node layer_2<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> ptp1_2<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> ptp2_2<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> vis_2<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> path_2<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pay_2<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/**********************/</span>uint <span class="token function">parse_1</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>uint val <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">','</span><span class="token punctuation">)</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>val <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token operator">*</span>s <span class="token operator">=</span> p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>uint <span class="token function">parse_2</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>uint val <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\r'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> val <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span>val <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token operator">*</span>s <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token operator">==</span><span class="token char">'\r'</span> <span class="token operator">?</span> p<span class="token operator">+</span><span class="token number">2</span><span class="token operator">:</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">parse_to_char</span><span class="token punctuation">(</span>uint a<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>dest<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token operator">%</span><span class="token number">10</span><span class="token operator">+</span><span class="token char">'0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> dest<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>dest<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">','</span><span class="token punctuation">;</span>length<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">loadData_and_createGrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>testFile<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">SEEK_END</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> p_map <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> PROT_READ<span class="token punctuation">,</span> MAP_PRIVATE<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> p_map<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>uint money<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>inputs<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">parse_1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>inputs<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">parse_1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>money<span class="token punctuation">[</span>n<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">parse_2</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>accts<span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>accts<span class="token operator">+</span>n<span class="token punctuation">,</span> inputs<span class="token operator">+</span><span class="token number">2000000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sort</span><span class="token punctuation">(</span>accts<span class="token punctuation">,</span> accts<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>account_num <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>accts<span class="token punctuation">,</span> accts<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token operator">-</span> accts<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span>uint<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> idHash<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>account_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> idHash<span class="token punctuation">[</span>accts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>Node node<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span><span class="token operator">++</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a<span class="token operator">=</span>idHash<span class="token punctuation">[</span>inputs<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token operator">=</span>idHash<span class="token punctuation">[</span>inputs<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>G<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Node<span class="token punctuation">&#123;</span>b<span class="token punctuation">,</span>money<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>RG<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Node<span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span>money<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>account_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">sort</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>RG<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RG<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">parse_to_char</span><span class="token punctuation">(</span>accts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">munmap</span><span class="token punctuation">(</span>p_map<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">const</span> uint <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> uint <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> x<span class="token operator">&lt;=</span><span class="token number">5ll</span><span class="token operator">*</span>y <span class="token operator">&amp;&amp;</span> y<span class="token operator">&lt;=</span><span class="token number">3ll</span><span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*线程1，从前往后寻环*/</span><span class="token keyword">void</span> <span class="token function">adpth3_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py3<span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> canReach1_1<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node<span class="token operator">:</span>ptp1_1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py1<span class="token punctuation">,</span>node<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>money<span class="token punctuation">,</span>py3<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py3<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf3<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf3<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf3<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf3<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf3<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf3<span class="token operator">+=</span>length<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>hf3<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>r3_1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">adpth4_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py2<span class="token operator">=</span>pay_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py4<span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> canReach1_1<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node<span class="token operator">:</span>ptp1_1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py2<span class="token punctuation">,</span>node<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1<span class="token operator">=</span>node<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_1<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>money<span class="token punctuation">,</span>py4<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py4<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf4<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf4<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf4<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf4<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf4<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf4<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf4<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf4<span class="token operator">+=</span>length<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>hf4<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>r4_1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">adpth5_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py2<span class="token operator">=</span>pay_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py5<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>pos2 <span class="token operator">=</span> canReach2_1<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node2<span class="token operator">:</span>ptp2_1<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py2<span class="token punctuation">,</span>node2<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n2<span class="token operator">=</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>pos1 <span class="token operator">=</span> canReach1_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node1<span class="token operator">:</span>ptp1_1<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>node2<span class="token punctuation">.</span>money<span class="token punctuation">,</span>node1<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1<span class="token operator">=</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_1<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>money<span class="token punctuation">,</span>py5<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py5<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf5<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf5<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf5<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf5<span class="token operator">+=</span>length<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf5<span class="token operator">+=</span>length<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>hf5<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>r5_1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">adpth6_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py3<span class="token operator">=</span>pay_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py6<span class="token punctuation">;</span><span class="token keyword">int</span> pos2 <span class="token operator">=</span> canReach2_1<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node2<span class="token operator">:</span>ptp2_1<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py3<span class="token punctuation">,</span>node2<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n2<span class="token operator">=</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos1 <span class="token operator">=</span> canReach1_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node1<span class="token operator">:</span>ptp1_1<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>node2<span class="token punctuation">.</span>money<span class="token punctuation">,</span>node1<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1<span class="token operator">=</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_1<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>money<span class="token punctuation">,</span>py6<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py6<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf6<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf6<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf6<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf6<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf6<span class="token operator">+=</span>length<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf6<span class="token operator">+=</span>length<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>hf6<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>r6_1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">adpth7_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py4<span class="token operator">=</span>pay_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py7<span class="token punctuation">;</span><span class="token keyword">int</span> pos2 <span class="token operator">=</span> canReach2_1<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node2<span class="token operator">:</span>ptp2_1<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py4<span class="token punctuation">,</span>node2<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n2<span class="token operator">=</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos1 <span class="token operator">=</span> canReach1_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node1<span class="token operator">:</span>ptp1_1<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>node2<span class="token punctuation">.</span>money<span class="token punctuation">,</span>node1<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1<span class="token operator">=</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_1<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>node1<span class="token punctuation">.</span>money<span class="token punctuation">,</span>py7<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py7<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>hf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf7<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf7<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf7<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf7<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf7<span class="token operator">+=</span>length<span class="token punctuation">[</span>path_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf7<span class="token operator">+=</span>length<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>hf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hf7<span class="token operator">+=</span>length<span class="token punctuation">[</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>hf7<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>r7_1<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dep4_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node<span class="token operator">:</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> vis_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>pay_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>path_1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>node<span class="token punctuation">.</span>id<span class="token punctuation">;</span>pay_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>node<span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach2_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">adpth7_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vis_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dep3_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node<span class="token operator">:</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> vis_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>pay_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>path_1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>node<span class="token punctuation">.</span>id<span class="token punctuation">;</span>pay_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach2_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">adpth6_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">dep4_1</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vis_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dep2_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node<span class="token operator">:</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> vis_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>pay_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>node<span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>path_1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>id<span class="token punctuation">;</span>pay_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach1_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">adpth4_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach2_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">adpth5_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">dep3_1</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vis_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dep1_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node<span class="token operator">:</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token operator">&lt;=</span>u<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>path_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>id<span class="token punctuation">;</span>pay_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach1_1<span class="token punctuation">[</span>node<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>u<span class="token punctuation">)</span> <span class="token function">adpth3_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dep2_1</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vis_1<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> start <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis_1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>account_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>canReach1_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>canReach2_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node tmp<span class="token punctuation">;</span><span class="token keyword">int</span> headPos<span class="token punctuation">,</span>layerSize<span class="token punctuation">,</span>layerPos<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head_2 <span class="token operator">-</span> head_1<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//判断后一个顶点是否被线2计算过</span>        head_1<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>head_1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> RG<span class="token punctuation">[</span>head_1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>headPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>layerSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node1<span class="token operator">:</span>RG<span class="token punctuation">[</span>head_1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n1<span class="token operator">&lt;</span>head_1<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node2<span class="token operator">:</span>RG<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n2 <span class="token operator">=</span> node2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n2 <span class="token operator">&lt;=</span> head_1<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach1_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> head_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>canReach1_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> head_1<span class="token punctuation">;</span>canReach1_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> headPos<span class="token punctuation">;</span>ptp1_1<span class="token punctuation">[</span>headPos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>layer_1<span class="token punctuation">[</span>layerSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ptp1_1<span class="token punctuation">[</span>canReach1_1<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Node<span class="token punctuation">&#123;</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">,</span>node2<span class="token punctuation">.</span>money<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>layerPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>layer_1<span class="token punctuation">,</span> layer_1<span class="token operator">+</span>layerSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>layerSize<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node <span class="token operator">&amp;</span>node2 <span class="token operator">=</span> layer_1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node3<span class="token operator">:</span>RG<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n3 <span class="token operator">=</span> node3<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n3<span class="token operator">&lt;=</span>head_1<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach2_1<span class="token punctuation">[</span>n3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> head_1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>canReach2_1<span class="token punctuation">[</span>n3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> head_1<span class="token punctuation">;</span>canReach2_1<span class="token punctuation">[</span>n3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> layerPos<span class="token punctuation">;</span>ptp2_1<span class="token punctuation">[</span>layerPos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ptp2_1<span class="token punctuation">[</span>canReach2_1<span class="token punctuation">[</span>n3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Node<span class="token punctuation">&#123;</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">,</span>node3<span class="token punctuation">.</span>money<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>path_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> head_1<span class="token punctuation">;</span><span class="token function">dep1_1</span><span class="token punctuation">(</span>head_1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">auto</span> end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> cost_t <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>milli<span class="token operator">></span></span></span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"solve_1 -const- : "</span> <span class="token operator">&lt;&lt;</span> cost_t  <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span><span class="token string">"       head_1 = "</span><span class="token operator">&lt;&lt;</span>head_1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*线程2，从后往前寻环，并逆序存入*/</span><span class="token keyword">void</span> <span class="token function">adpth3_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py3<span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> canReach1_2<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node<span class="token operator">=</span>ptp1_2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node<span class="token operator">!=</span>ptp1_2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">,</span>py3<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py3<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>tf3<span class="token operator">-=</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf3<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>tf3<span class="token operator">+</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>tf3<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf3<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf3<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf3<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r3_2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">adpth4_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py2<span class="token operator">=</span>pay_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py4<span class="token punctuation">;</span><span class="token keyword">int</span> pos <span class="token operator">=</span> canReach1_2<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node<span class="token operator">=</span>ptp1_2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node<span class="token operator">!=</span>ptp1_2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_2<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">,</span>py4<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py4<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>tf4<span class="token operator">-=</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf4<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>tf4<span class="token operator">+</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>tf4<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf4<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf4<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf4<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf4<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf4<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r4_2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">adpth5_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py2<span class="token operator">=</span>pay_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py5<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>pos2 <span class="token operator">=</span> canReach2_2<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node2<span class="token operator">=</span>ptp2_2<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node2<span class="token operator">!=</span>ptp2_2<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>pos1 <span class="token operator">=</span> canReach1_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node1<span class="token operator">=</span>ptp1_2<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node1<span class="token operator">!=</span>ptp1_2<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_2<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">,</span>py5<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py5<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>tf5<span class="token operator">-=</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>tf5<span class="token operator">+</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>tf5<span class="token operator">-=</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf5<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf5<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf5<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf5<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r5_2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">adpth6_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py3<span class="token operator">=</span>pay_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py6<span class="token punctuation">;</span><span class="token keyword">int</span> pos2 <span class="token operator">=</span> canReach2_2<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node2<span class="token operator">=</span>ptp2_2<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node2<span class="token operator">!=</span>ptp2_2<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py3<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos1 <span class="token operator">=</span> canReach1_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node1<span class="token operator">=</span>ptp1_2<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node1<span class="token operator">!=</span>ptp1_2<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_2<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">,</span>py6<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py6<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>tf6<span class="token operator">-=</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>tf6<span class="token operator">+</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>tf6<span class="token operator">-=</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf6<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf6<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf6<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf6<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf6<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r6_2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">adpth7_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>uint py1<span class="token operator">=</span>pay_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py4<span class="token operator">=</span>pay_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>py7<span class="token punctuation">;</span><span class="token keyword">int</span> pos2 <span class="token operator">=</span> canReach2_2<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node2<span class="token operator">=</span>ptp2_2<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node2<span class="token operator">!=</span>ptp2_2<span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py4<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos1 <span class="token operator">=</span> canReach1_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node1<span class="token operator">=</span>ptp1_2<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node1<span class="token operator">!=</span>ptp1_2<span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vis_2<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>py7 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token function">find</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>G<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Node<span class="token punctuation">&#123;</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">,</span>py7<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>py7<span class="token punctuation">,</span>py1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>tf7 <span class="token operator">-=</span> length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token punctuation">(</span>tf7<span class="token operator">+</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node1<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>tf7<span class="token operator">-=</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node2<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf7<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf7<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf7<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf7<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tf7<span class="token operator">-=</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>tf7<span class="token punctuation">,</span>account_chars<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>length<span class="token punctuation">[</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r7_2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dep4_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node<span class="token operator">=</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node<span class="token operator">!=</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token operator">&lt;=</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> vis_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>pay_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>path_2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>pay_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach2_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">adpth7_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vis_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dep3_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node<span class="token operator">=</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node<span class="token operator">!=</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token operator">&lt;=</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> vis_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>pay_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>path_2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>pay_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach2_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">adpth6_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vis_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">dep4_2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vis_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dep2_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node<span class="token operator">=</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node<span class="token operator">!=</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token operator">&lt;=</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> vis_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>pay_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>path_2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>pay_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach1_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">adpth4_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach2_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">adpth5_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vis_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">dep3_2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vis_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dep1_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vis_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> node<span class="token operator">=</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> node<span class="token operator">!=</span>G<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token operator">&lt;=</span>u<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>path_2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>pay_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>money<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach1_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>u<span class="token punctuation">)</span> <span class="token function">adpth3_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dep2_2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vis_2<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solve_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">auto</span> start <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>vis_2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>vis_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>account_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>canReach1_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>canReach2_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node tmp<span class="token punctuation">;</span><span class="token keyword">int</span> headPos<span class="token punctuation">,</span>layerSize<span class="token punctuation">,</span>layerPos<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>head_2 <span class="token operator">-</span> head_1<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//判断前一个顶点是否被线1计算过</span>        head_2<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>g_mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>G<span class="token punctuation">[</span>head_2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> RG<span class="token punctuation">[</span>head_2<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>headPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>layerSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node1<span class="token operator">:</span>RG<span class="token punctuation">[</span>head_2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n1<span class="token operator">&lt;</span>head_2<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node2<span class="token operator">:</span>RG<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n2 <span class="token operator">=</span> node2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n2 <span class="token operator">&lt;=</span> head_2<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach1_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> head_2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>canReach1_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> head_2<span class="token punctuation">;</span>canReach1_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> headPos<span class="token punctuation">;</span>ptp1_2<span class="token punctuation">[</span>headPos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>layer_2<span class="token punctuation">[</span>layerSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> node2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ptp1_2<span class="token punctuation">[</span>canReach1_2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Node<span class="token punctuation">&#123;</span>node1<span class="token punctuation">.</span>id<span class="token punctuation">,</span>node2<span class="token punctuation">.</span>money<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>layerPos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>layer_2<span class="token punctuation">,</span> layer_2<span class="token operator">+</span>layerSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>layerSize<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Node <span class="token operator">&amp;</span>node2 <span class="token operator">=</span> layer_2<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Node <span class="token operator">&amp;</span>node3<span class="token operator">:</span>RG<span class="token punctuation">[</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>n3 <span class="token operator">=</span> node3<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n3<span class="token operator">&lt;=</span>head_2<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>canReach2_2<span class="token punctuation">[</span>n3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> head_2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>canReach2_2<span class="token punctuation">[</span>n3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> head_2<span class="token punctuation">;</span>canReach2_2<span class="token punctuation">[</span>n3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> layerPos<span class="token punctuation">;</span>ptp2_2<span class="token punctuation">[</span>layerPos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ptp2_2<span class="token punctuation">[</span>canReach2_2<span class="token punctuation">[</span>n3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Node<span class="token punctuation">&#123;</span>node2<span class="token punctuation">.</span>id<span class="token punctuation">,</span>node3<span class="token punctuation">.</span>money<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>path_2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> head_2<span class="token punctuation">;</span><span class="token function">dep1_2</span><span class="token punctuation">(</span>head_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">auto</span> end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> cost_t <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>milli<span class="token operator">></span></span></span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"solve_2 -const- : "</span> <span class="token operator">&lt;&lt;</span> cost_t  <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> tmp<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token function">sprintf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>r3_1<span class="token operator">+</span>r4_1<span class="token operator">+</span>r5_1<span class="token operator">+</span>r6_1<span class="token operator">+</span>r7_1 <span class="token operator">+</span> r3_2<span class="token operator">+</span>r4_2<span class="token operator">+</span>r5_2<span class="token operator">+</span>r6_2<span class="token operator">+</span>r7_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token operator">=</span>m<span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>tf3 <span class="token operator">-</span> hf3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//存放长度为3的环所用的字节数</span>n <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf4<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>tf4 <span class="token operator">-</span> hf4<span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf5<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>tf5 <span class="token operator">-</span> hf5<span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf6<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>tf6 <span class="token operator">-</span> hf6<span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf7<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>tf7 <span class="token operator">-</span> hf7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>resultFile<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> O_RDWR<span class="token operator">|</span>O_CREAT<span class="token punctuation">,</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> p_mmap <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> p_mmap<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>m<span class="token punctuation">;</span> <span class="token comment">//写入找到的环的总个数</span><span class="token keyword">int</span> len <span class="token operator">=</span> hf3<span class="token operator">-</span>buf3<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> buf3<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span>len <span class="token operator">=</span> buf3 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span> <span class="token operator">-</span> tf3<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> tf3<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span>len <span class="token operator">=</span> hf4<span class="token operator">-</span>buf4<span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> buf4<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span>len <span class="token operator">=</span> buf4 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf4<span class="token punctuation">)</span> <span class="token operator">-</span> tf4<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> tf4<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span>len <span class="token operator">=</span> hf5<span class="token operator">-</span>buf5<span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> buf5<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span>len <span class="token operator">=</span> buf5 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf5<span class="token punctuation">)</span> <span class="token operator">-</span> tf5<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> tf5<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span>len <span class="token operator">=</span> hf6<span class="token operator">-</span>buf6<span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> buf6<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span>len <span class="token operator">=</span> buf6 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf6<span class="token punctuation">)</span> <span class="token operator">-</span> tf6<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> tf6<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span>len <span class="token operator">=</span> hf7<span class="token operator">-</span>buf7<span class="token punctuation">;</span> <span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> buf7<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span>len <span class="token operator">=</span> buf7 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf7<span class="token punctuation">)</span> <span class="token operator">-</span> tf7<span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> tf7<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">+=</span>len<span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token function">munmap</span><span class="token punctuation">(</span>p_mmap<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>clock_t startTime <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadData_and_createGrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clock_t endTime <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"LoadDataAndCreateGraph: "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC <span class="token operator">&lt;&lt;</span> <span class="token string">" s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>hf3<span class="token operator">=</span>buf3<span class="token punctuation">;</span>tf3<span class="token operator">=</span>buf3<span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf3<span class="token punctuation">)</span><span class="token punctuation">;</span>hf4<span class="token operator">=</span>buf4<span class="token punctuation">;</span>tf4<span class="token operator">=</span>buf4<span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf4<span class="token punctuation">)</span><span class="token punctuation">;</span>hf5<span class="token operator">=</span>buf5<span class="token punctuation">;</span>tf5<span class="token operator">=</span>buf5<span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf5<span class="token punctuation">)</span><span class="token punctuation">;</span>hf6<span class="token operator">=</span>buf6<span class="token punctuation">;</span>tf6<span class="token operator">=</span>buf6<span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf6<span class="token punctuation">)</span><span class="token punctuation">;</span>hf7<span class="token operator">=</span>buf7<span class="token punctuation">;</span>tf7<span class="token operator">=</span>buf7<span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf7<span class="token punctuation">)</span><span class="token punctuation">;</span>head_1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>head_2 <span class="token operator">=</span>account_num<span class="token punctuation">;</span><span class="token keyword">auto</span> start <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>thread<span class="token operator">></span> <span class="token function">threadpool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>threadpool<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>solve_1<span class="token punctuation">)</span><span class="token punctuation">;</span>threadpool<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">thread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>solve_2<span class="token punctuation">)</span><span class="token punctuation">;</span>threadpool<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>threadpool<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> end <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span>steady_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> cost_t <span class="token operator">=</span> chrono<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">duration</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span>std<span class="token double-colon punctuation">::</span>milli<span class="token operator">></span></span></span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"compute : "</span> <span class="token operator">&lt;&lt;</span> cost_t  <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>startTime <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>endTime <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"save: "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC <span class="token operator">&lt;&lt;</span> <span class="token string">" s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p3_1 = "</span><span class="token operator">&lt;&lt;</span>r3_1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p4_1 = "</span><span class="token operator">&lt;&lt;</span>r4_1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p5_1 = "</span><span class="token operator">&lt;&lt;</span>r5_1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p6_1 = "</span><span class="token operator">&lt;&lt;</span>r6_1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p7_1 = "</span><span class="token operator">&lt;&lt;</span>r7_1<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p3_2 = "</span><span class="token operator">&lt;&lt;</span>r3_2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p4_2 = "</span><span class="token operator">&lt;&lt;</span>r4_2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p5_2 = "</span><span class="token operator">&lt;&lt;</span>r5_2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p6_2 = "</span><span class="token operator">&lt;&lt;</span>r6_2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"p7_2 = "</span><span class="token operator">&lt;&lt;</span>r7_2<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">int</span> all <span class="token operator">=</span> r3_1<span class="token operator">+</span>r4_1<span class="token operator">+</span>r5_1<span class="token operator">+</span>r6_1<span class="token operator">+</span>r7_1<span class="token punctuation">;</span>all    <span class="token operator">+=</span> r3_2<span class="token operator">+</span>r4_2<span class="token operator">+</span>r5_2<span class="token operator">+</span>r6_2<span class="token operator">+</span>r7_2<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"all_loops = "</span><span class="token operator">&lt;&lt;</span>all<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收集常用的网站(持续更新...)</title>
      <link href="/posts/de8d44af.html"/>
      <url>/posts/de8d44af.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>对一些常用网站的收集(主要是为了方便自己换电脑时懒得去导出浏览器收藏夹)，会持续更新…</p></blockquote><h2 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h2><ul><li><a href="https://mp.weixin.qq.com/s/WIaG_Kx-qZqA74uux_CZxA">软件安装管家（能找到满足日常办公的很多软件）</a></li><li><a href="https://code.google.com/archive/p/chmwriter/downloads">chm格式的java API制作工具</a></li><li><a href="https://www.jianfast.com/">浏览器主页“简法主页”</a></li><li><a href="https://itab.link/">浏览器主页插件 itab</a></li></ul><h2 id="电子书籍下载"><a href="#电子书籍下载" class="headerlink" title="电子书籍下载"></a>电子书籍下载</h2><ul><li><a href="https://www.jiumodiary.com/">鸠摩搜书</a></li><li><a href="https://www.ituring.com.cn/">图灵社区</a></li></ul><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><ul><li><a href="https://www.sharemouse.com/">多主机键鼠共用ShareMouse</a></li><li><a href="https://software.allcomin.com/">软件大全</a></li><li><a href="https://massunsoft.com/author">软件下载安装管家</a></li></ul><h2 id="第三方视频"><a href="#第三方视频" class="headerlink" title="第三方视频"></a>第三方视频</h2><ul><li><a href="https://www.dytt8.net/">电影天堂</a></li><li><a href="https://www.dianyinggou.com/">电影狗搜索</a></li><li><a href="https://www.acgyy.com/">影视大全</a></li><li><a href="https://www.yinfans.me/#">4k高清电影下载</a></li></ul><h2 id="技术面试"><a href="#技术面试" class="headerlink" title="技术面试"></a>技术面试</h2><ul><li><a href="https://snailclimb.gitee.io/javaguide/#/">JavaGuide</a></li><li><a href="https://github.com/geekxh/hello-algorithm">算法训练</a></li></ul><h2 id="Pytorch学习"><a href="#Pytorch学习" class="headerlink" title="Pytorch学习"></a>Pytorch学习</h2><p>一个不错的pytorch学习网站</p><ul><li><a href="http://tangshusen.me/Dive-into-DL-PyTorch/#/">一个不错的pytorch学习网站</a></li></ul><h2 id="搜索引擎："><a href="#搜索引擎：" class="headerlink" title="搜索引擎："></a>搜索引擎：</h2><ul><li><a href="https://scholar.chongbuluo.com/">学术搜索</a></li></ul><h2 id="BT磁力"><a href="#BT磁力" class="headerlink" title="BT磁力"></a>BT磁力</h2><ul><li><a href="http://hao.su/909">磁力导航</a></li><li><a href="https://www.xiaobaipan.com/">网盘搜索</a></li><li><a href="https://www.dogedoge.com/">DogeDoge搜索</a></li><li><a href="https://www.yunpanjingling.com/">云盘精灵</a></li><li><a href="https://www.pantianxia.com/">盘天才</a></li></ul><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><ul><li><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">pythonlibs</a> &amp;&amp; <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">清华大学镜像源</a> &amp;&amp; <a href="https://www.python.org/ftp/python/">python第三方包</a></li><li><a href="https://miyakogi.github.io/pyppeteer/">pyppeteer 爬虫</a></li><li><a href="https://elasticsearch-dsl.readthedocs.io/en/latest/api.html">ElasticSearch api</a> &amp;&amp; <a href="http://fingerchou.com/2017/08/12/elasticsearch-dsl-with-python-usage-1/">ElasticSearch - api1</a> &amp;&amp; <a href="http://fingerchou.com/2017/08/13/elasticsearch-dsl-with-python-usage-2/">ElasticSearch - api2</a></li></ul><h2 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h2><ul><li><a href="http://www.bejson.com/">在线JSON校验格式工具</a></li><li><a href="http://tool.chinaz.com/regex/">正则表达式在线测试</a></li><li><a href="https://www.114la.com/other/rgb.htm">RGB颜色查询对照表</a></li><li><a href="http://tool.oschina.net/regex/">在线正则表达式测试</a></li><li><a href="http://tool.chinaz.com/tools/urlencode.aspx">UrlEncode编码解码</a></li><li><a href="http://tool.chinaz.com/Tools/unixtime.aspx">时间戳在线转换</a></li><li><a href="https://cli.im/">草料二维码生成器</a></li><li><a href="https://www.jdoodle.com/online-java-compiler">在线Java编辑器</a></li><li><a href="https://www.it399.com/code/markdown2html">MarkDown转HTML</a></li><li><a href="https://www.easyicon.net/">在线图标下载</a></li><li><a href="https://greasyfork.org/zh-CN">Greasy Fork 油猴脚本</a></li><li><a href="http://www.kejixiaoc.com/">科技小c</a></li><li><a href="https://wall.alphacoders.com/?lang=Chinese">高清壁纸wall</a></li><li><a href="https://www.gaitubao.com/">在线图片尺寸大小修改</a></li><li><a href="http://tool.chinaz.com/tools/unicode.aspx">Unicode转中文</a></li><li><a href="https://cp.anyknew.com/">拷贝兔</a></li><li><a href="http://www.ypppt.com/">ppt模版下载</a></li><li><a href="http://kuaitu888.com/">CSDN自助下载</a></li></ul><h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a>持续更新…</h1>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中使用动态代理实现环绕通知</title>
      <link href="/posts/8a748149.html"/>
      <url>/posts/8a748149.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>因为环绕通知类似于动态代理的全过程，所以可以使用动态代理技术实现类似的环绕通知</p></blockquote><ul><li>ArithmeticCalculator.java</li><li>ArithmeticCalculatorImpl.java</li><li>ArithmeticCalculatorLoggingProxy.java</li><li>Main.java</li></ul><h3 id="ArithmeticCalculator-java"><a href="#ArithmeticCalculator-java" class="headerlink" title="ArithmeticCalculator.java"></a>ArithmeticCalculator.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorImpl-java"><a href="#ArithmeticCalculatorImpl-java" class="headerlink" title="ArithmeticCalculatorImpl.java"></a>ArithmeticCalculatorImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorLoggingProxy-java"><a href="#ArithmeticCalculatorLoggingProxy-java" class="headerlink" title="ArithmeticCalculatorLoggingProxy.java"></a>ArithmeticCalculatorLoggingProxy.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorLoggingProxy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//要代理的对象</span>    <span class="token keyword">private</span> <span class="token class-name">ArithmeticCalculator</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ArithmeticCalculatorLoggingProxy</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticCalculator</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token function">getLoggingProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArithmeticCalculator</span> proxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//代理对象有哪一个类加载器负责加载</span>        <span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理对象的类型，即其中有哪些方法。可以通过ArithmeticCalculator.class.getMethods()返回一个方法数组Method[]</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">ArithmeticCalculator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//当调用代理对象其中的方法时，该执行的代码</span>        <span class="token class-name">InvocationHandler</span> h<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            * proxy：正在返回的那个代理对象，一般情况下，invoke方法中都不使用该对象。            * method：正在被调用的方法            * args：调用方法时，传入的参数            * */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//在这里使用proxy时会出现死循环，StackOverflowError。因为一旦使用，又会被动态代理转移到这儿调用invoke，出现死循环</span>                <span class="token comment">//System.out.println(proxy.toString());</span>                <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取方法名</span>                <span class="token comment">//日志</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;-yczlab-> The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//执行方法</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//前置通知，类似于@Before注解</span>                    result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//返回通知，可以访问到方法的返回值，类似于@AfterReturning注解</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//异常通知，可以访问到方法出现的异常，类似于@AfterThrowing注解</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//后置通知，因为方法可能会出异常，所以访问不到方法的返回值，类似于@After注解</span>                <span class="token comment">//日志</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;-yczlab-> The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticCalculator</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//通过使用动态代理的方式实现环绕通知</span>        <span class="token class-name">ArithmeticCalculator</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticCalculatorImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArithmeticCalculator</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticCalculatorLoggingProxy</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoggingProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-->"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-->"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP的环绕通知@Around</title>
      <link href="/posts/d01f30b4.html"/>
      <url>/posts/d01f30b4.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Spring AOP可以使用@Around注解来实现环绕通知，环绕通知需要携带ProceedingJoinPoint类型的参数，环绕通知类似于动态代理的全过程，ProceedingJoinPoint类型的参数可以决定是否执行目标方法，且环绕通知必须要有返回值，返回值即为目标方法的返回值。</p></blockquote><ul><li>ArithmeticCalculator.java</li><li>ArithmeticCalculatorImpl.java</li><li>LoggingAspect.java</li><li>Main.java</li><li>applicationContext.xml</li></ul><h3 id="ArithmeticCalculator-java"><a href="#ArithmeticCalculator-java" class="headerlink" title="ArithmeticCalculator.java"></a>ArithmeticCalculator.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorImpl-java"><a href="#ArithmeticCalculatorImpl-java" class="headerlink" title="ArithmeticCalculatorImpl.java"></a>ArithmeticCalculatorImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="LoggingAspect-java"><a href="#LoggingAspect-java" class="headerlink" title="LoggingAspect.java"></a>LoggingAspect.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">//把这个类声明为一个切面：需要把该类放入到IOC容器中，再声明为一个切面</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//声明为一个切面，使用该注解需要“aspectjweaver-xxx.jar”包的支持，"xxx"代表版本</span><span class="token annotation punctuation">@Component</span> <span class="token comment">//放入IOC容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//声明该方法是一个前置通知：在目标方法开始之前执行</span>    <span class="token comment">//如果这样写execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.add(int, int))</span>    <span class="token comment">//那么只对ArithmeticCalculator.add方法起作用</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.*(int, int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//可以通过JoinPoint参数来访问到连接的细节，如方法名称和参数值等</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个后置通知：在目标方法执行后（无论是否发生异常），再执行的通知</span>    <span class="token comment">//但是在后置通知中还不能访问目标方法的执行结果</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(int, int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" ends"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个返回通知：在目标方法正常结束时（出异常时就不执行该通知），执行的通知</span>    <span class="token comment">//在返回通知中可以访问目标方法的返回值，即执行结果</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(..))"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个异常通知：在目标方法出现异常时执行的通知</span>    <span class="token comment">//在异常通知中可以访问到异常对象，且可以指定在出现特定异常时才执行通知代码</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(..))"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterThrowing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" occurs exception: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个环绕通知：</span>    <span class="token comment">/*    * 环绕通知需要携带ProceedingJoinPoint类型的参数    * 环绕通知类似于动态代理的全过程：ProceedingJoinPoint类型的参数可以决定是否执行目标方法    * 且环绕通知必须要有返回值，返回值即为目标方法的返回值    * */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">aroundMethod</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> pjd<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>pjd<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行目标方法</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//前置通知，注意与上面@Before注解配置的前置通知相区分</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知中的前置通知：The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> pjd<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//返回通知，注意与上面@AfterReturning注解配置的返回通知相区分</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知中的返回通知：The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//异常通知，注意与上面@AfterThrowing注解配置的异常通知相区分</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知中的异常通知：The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" occurs exception: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//后置通知，注意与上面@After注解配置的后置通知相区分</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知中的后置通知：The method "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" ends"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果以上情况确有异常发生，返回的值result=null, 无法装换为int类型，还会发生其他异常，不要惊慌</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、创建Spring的IOC容器</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、从IOC容器中获取bean的实例</span>        <span class="token class-name">ArithmeticCalculator</span> arithmeticCalculator <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticCalculator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、使用bean</span>        <span class="token comment">//测试环绕通知（环绕通知类似于动态代理）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试异常情况，“除零”异常发生时返回值为null，无法转换为int类型，会在次发生异常。主要测试“除零”异常</span>        result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试异常情况，异常发生时返回值为null，无法转换为int</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="applicationContext-xml配置文件"><a href="#applicationContext-xml配置文件" class="headerlink" title="applicationContext.xml配置文件"></a>applicationContext.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置自动扫描的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.aop.impl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--使AspectJ注解起作用：自动为匹配的类生成代理对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP的异常通知@AfterThrowing</title>
      <link href="/posts/dd1b80c4.html"/>
      <url>/posts/dd1b80c4.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Spring AOP可以使用@AfterThrowing注解来实现异常通知，在目标方法出现异常时执行的通知。在异常通知中可以访问到异常对象，且可以指定在出现特定异常时才执行通知代码。</p></blockquote><ul><li>ArithmeticCalculator.java</li><li>ArithmeticCalculatorImpl.java</li><li>LoggingAspect.java</li><li>Main.java</li><li>applicationContext.xml</li></ul><h3 id="ArithmeticCalculator-java"><a href="#ArithmeticCalculator-java" class="headerlink" title="ArithmeticCalculator.java"></a>ArithmeticCalculator.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorImpl-java"><a href="#ArithmeticCalculatorImpl-java" class="headerlink" title="ArithmeticCalculatorImpl.java"></a>ArithmeticCalculatorImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="LoggingAspect-java"><a href="#LoggingAspect-java" class="headerlink" title="LoggingAspect.java"></a>LoggingAspect.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">//把这个类声明为一个切面：需要把该类放入到IOC容器中，再声明为一个切面</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//声明为一个切面，使用该注解需要“aspectjweaver-xxx.jar”包的支持，"xxx"代表版本</span><span class="token annotation punctuation">@Component</span> <span class="token comment">//放入IOC容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//声明该方法是一个前置通知：在目标方法开始之前执行</span>    <span class="token comment">//如果这样写execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.add(int, int))</span>    <span class="token comment">//那么只对ArithmeticCalculator.add方法起作用</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.*(int, int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//可以通过JoinPoint参数来访问到连接的细节，如方法名称和参数值等</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个后置通知：在目标方法执行后（无论是否发生异常），再执行的通知</span>    <span class="token comment">//但是在后置通知中还不能访问目标方法的执行结果</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(int, int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" ends"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个返回通知：在目标方法正常结束时（出异常时就不执行该通知），执行的通知</span>    <span class="token comment">//在返回通知中可以访问目标方法的返回值，即执行结果</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(..))"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个异常通知：在目标方法出现异常时执行的通知</span>    <span class="token comment">//在异常通知中可以访问到异常对象，且可以指定在出现特定异常时才执行通知代码</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(..))"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterThrowing</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" occurs exception: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、创建Spring的IOC容器</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、从IOC容器中获取bean的实例</span>        <span class="token class-name">ArithmeticCalculator</span> arithmeticCalculator <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticCalculator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、使用bean</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//以下程序故意发生异常，测试异常通知</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="applicationContext-xml配置文件"><a href="#applicationContext-xml配置文件" class="headerlink" title="applicationContext.xml配置文件"></a>applicationContext.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置自动扫描的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.aop.impl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--使AspectJ注解起作用：自动为匹配的类生成代理对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP的返回通知@AfterReturning</title>
      <link href="/posts/b782999e.html"/>
      <url>/posts/b782999e.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Spring AOP可以使用@AfterReturning注解来实现返回通知, 在目标方法正常结束时（出异常时就不执行该通知），执行的通知。在返回通知中可以访问目标方法的返回值，即执行结果</p></blockquote><ul><li>ArithmeticCalculator.java</li><li>ArithmeticCalculatorImpl.java</li><li>LoggingAspect.java</li><li>Main.java</li><li>applicationContext.xml</li></ul><h3 id="ArithmeticCalculator-java"><a href="#ArithmeticCalculator-java" class="headerlink" title="ArithmeticCalculator.java"></a>ArithmeticCalculator.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorImpl-java"><a href="#ArithmeticCalculatorImpl-java" class="headerlink" title="ArithmeticCalculatorImpl.java"></a>ArithmeticCalculatorImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="LoggingAspect-java"><a href="#LoggingAspect-java" class="headerlink" title="LoggingAspect.java"></a>LoggingAspect.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AfterReturning</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">//把这个类声明为一个切面：需要把该类放入到IOC容器中，再声明为一个切面</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//声明为一个切面，使用该注解需要“aspectjweaver-xxx.jar”包的支持，"xxx"代表版本</span><span class="token annotation punctuation">@Component</span> <span class="token comment">//放入IOC容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//声明该方法是一个前置通知：在目标方法开始之前执行</span>    <span class="token comment">//如果这样写execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.add(int, int))</span>    <span class="token comment">//那么只对ArithmeticCalculator.add方法起作用</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.*(int, int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//可以通过JoinPoint参数来访问到连接的细节，如方法名称和参数值等</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个后置通知：在目标方法执行后（无论是否发生异常），再执行的通知</span>    <span class="token comment">//但是在后置通知中还不能访问目标方法的执行结果</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(int, int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" ends"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个返回通知：在目标方法正常结束时（出异常时就不执行该通知），执行的通知</span>    <span class="token comment">//在返回通知中可以访问目标方法的返回值，即执行结果</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(..))"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">AfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、创建Spring的IOC容器</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、从IOC容器中获取bean的实例</span>        <span class="token class-name">ArithmeticCalculator</span> arithmeticCalculator <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticCalculator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、使用bean</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="applicationContext-xml配置文件"><a href="#applicationContext-xml配置文件" class="headerlink" title="applicationContext.xml配置文件"></a>applicationContext.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置自动扫描的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.aop.impl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--使AspectJ注解起作用：自动为匹配的类生成代理对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP的后置通知@After</title>
      <link href="/posts/1303085e.html"/>
      <url>/posts/1303085e.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Spring AOP可以使用@After注解来实现后置通知, 在目标方法执行后（无论是否发生异常）执行一段代码（可以用来做日志）。但是在后置通知中还不能访问目标方法的执行结果。</p></blockquote><ul><li>ArithmeticCalculator.java</li><li>ArithmeticCalculatorImpl.java</li><li>LoggingAspect.java</li><li>Main.java</li><li>applicationContext.xml</li></ul><h3 id="ArithmeticCalculator-java"><a href="#ArithmeticCalculator-java" class="headerlink" title="ArithmeticCalculator.java"></a>ArithmeticCalculator.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorImpl-java"><a href="#ArithmeticCalculatorImpl-java" class="headerlink" title="ArithmeticCalculatorImpl.java"></a>ArithmeticCalculatorImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="LoggingAspect-java"><a href="#LoggingAspect-java" class="headerlink" title="LoggingAspect.java"></a>LoggingAspect.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">//把这个类声明为一个切面：需要把该类放入到IOC容器中，再声明为一个切面</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//声明为一个切面，使用该注解需要“aspectjweaver-xxx.jar”包的支持，"xxx"代表版本</span><span class="token annotation punctuation">@Component</span> <span class="token comment">//放入IOC容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//声明该方法是一个前置通知：在目标方法开始之前执行</span>    <span class="token comment">//如果这样写execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.add(int, int))</span>    <span class="token comment">//那么只对ArithmeticCalculator.add方法起作用</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.*(int, int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//可以通过JoinPoint参数来访问到连接的细节，如方法名称和参数值等</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//声明该方法是一个后置通知：在目标方法执行后（无论是否发生异常），再执行的通知</span>    <span class="token comment">//但是在后置通知中还不能访问目标方法的执行结果</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(* com.yczlab.spring.aop.impl.ArithmeticCalculator.*(int, int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" ends"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、创建Spring的IOC容器</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、从IOC容器中获取bean的实例</span>        <span class="token class-name">ArithmeticCalculator</span> arithmeticCalculator <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticCalculator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、使用bean</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="applicationContext-xml配置文件"><a href="#applicationContext-xml配置文件" class="headerlink" title="applicationContext.xml配置文件"></a>applicationContext.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置自动扫描的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.aop.impl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--使AspectJ注解起作用：自动为匹配的类生成代理对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP的前置通知@Before</title>
      <link href="/posts/d093086c.html"/>
      <url>/posts/d093086c.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Spring AOP可以使用@Before注解来实现前置通知, 在方法开始执行之前执行一段代码（可以用来做日志）</p></blockquote><ul><li>ArithmeticCalculator.java</li><li>ArithmeticCalculatorImpl.java</li><li>LoggingAspect.java</li><li>Main.java</li><li>applicationContext.xml</li></ul><h3 id="ArithmeticCalculator-java"><a href="#ArithmeticCalculator-java" class="headerlink" title="ArithmeticCalculator.java"></a>ArithmeticCalculator.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorImpl-java"><a href="#ArithmeticCalculatorImpl-java" class="headerlink" title="ArithmeticCalculatorImpl.java"></a>ArithmeticCalculatorImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="LoggingAspect-java"><a href="#LoggingAspect-java" class="headerlink" title="LoggingAspect.java"></a>LoggingAspect.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token comment">//把这个类声明为一个切面：需要把该类放入到IOC容器中，再声明为一个切面</span><span class="token annotation punctuation">@Aspect</span> <span class="token comment">//声明为一个切面，使用该注解需要“aspectjweaver-xxx.jar”包的支持，"xxx"代表版本</span><span class="token annotation punctuation">@Component</span> <span class="token comment">//放入IOC容器中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//声明该方法是一个前置通知：在目标方法开始之前执行</span>    <span class="token comment">//如果这样写execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.add(int, int))</span>    <span class="token comment">//那么只对ArithmeticCalculator.add方法起作用</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(public int com.yczlab.spring.aop.impl.ArithmeticCalculator.*(int, int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//可以通过JoinPoint参数来访问到连接的细节，如方法名称和参数值等</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> args <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1、创建Spring的IOC容器</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、从IOC容器中获取bean的实例</span>        <span class="token class-name">ArithmeticCalculator</span> arithmeticCalculator <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticCalculator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3、使用bean</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> arithmeticCalculator<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="applicationContext-xml配置文件"><a href="#applicationContext-xml配置文件" class="headerlink" title="applicationContext.xml配置文件"></a>applicationContext.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置自动扫描的包--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.aop.impl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--使AspectJ注解起作用：自动为匹配的类生成代理对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于AspectJ注解来使用Spring AOP</title>
      <link href="/posts/6f20b26b.html"/>
      <url>/posts/6f20b26b.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>AspectJ：Java社区里最完整最流行的AOP框架.在Spring2.0以上版本中, 可以使用基于AspectJ注解或基于XML配置的AOP</p></blockquote><h4 id="1、在Spring中启用AspectJ注解支持"><a href="#1、在Spring中启用AspectJ注解支持" class="headerlink" title="1、在Spring中启用AspectJ注解支持"></a>1、在Spring中启用AspectJ注解支持</h4><ul><li>要在Spring应用中使用AspectJ注解,必须在classpath下包含AspectJ类库: <a href="aopalliance-1.0.jar">aopalliance.jar</a>、<a href="aspectjweaver-1.9.4.jar">aspectjweaver.jar</a>和<a href="spring-aspects-5.2.3.jar">spring-aspects.jar</a></li><li>要在Spring IOC容器中启用AspectJ注解支持,只要在Bean配置文件中定义一个空的XML元素<code>&lt;aop:aspectj-autoproxy&gt;</code></li><li>当Spring IOC容器侦测到Bean配置文件中的<code>&lt;aop:aspectj-autoproxy&gt;</code>元素时,会自动为与AspectJ切面匹配的Bean创建代理.</li></ul><h4 id="2、用AspectJ注解声明切面"><a href="#2、用AspectJ注解声明切面" class="headerlink" title="2、用AspectJ注解声明切面"></a>2、用AspectJ注解声明切面</h4><ul><li>切面首先是一个IOC中的bean,即加入@Component注解</li><li>要在Spring中声明AspectJ切面, 还需要加入@Aspect注解<br>当在Spring IOC容器中初始化AspectJ切面之后,Spring IOC容器就会为那些与AspectJ切面相匹配的Bean创建代理.</li><li>在AspectJ注解中,切面只是一个带有@Aspect注解的Java类.</li><li>通知是切面中标注有某种注解的简单的Java方法.</li></ul><h4 id="3、AspectJ支持5种类型的通知注解"><a href="#3、AspectJ支持5种类型的通知注解" class="headerlink" title="3、AspectJ支持5种类型的通知注解:"></a>3、AspectJ支持5种类型的通知注解:</h4><ul><li>@Before: 前置通知, 在方法执行之前执行</li><li>@After: 后置通知, 在方法执行之后执行</li><li>@AfterReturning: 返回通知, 在方法返回结果之后执行</li><li>@AfterThrowing: 异常通知, 在方法抛出异常之后</li><li>@Around: 环绕通知, 围绕着方法执行</li></ul><h4 id="4、编写AspectJ切入点表达式"><a href="#4、编写AspectJ切入点表达式" class="headerlink" title="4、编写AspectJ切入点表达式"></a>4、编写AspectJ切入点表达式</h4><ul><li>execution * com.yczlab.spring.aop.impl.ArithmeticCalculator.<em>(..)<br>匹配ArithmeticCalculator中声明的所有方法,第一个“</em>”代表任意修饰符以及任意返回值；第二个“*”代表任意方法；“..”匹配任意数量的参数. 若目标类、接口与该切面在同一个包中, 可以省略包名.</li><li>execution public * ArithmeticCalculator.*(..)<br>匹配ArithmeticCalculator接口的所有公有方法.</li><li>execution public double ArithmeticCalculator.*(..)<br>匹配ArithmeticCalculator中返回double类型数值的方法</li><li>execution public double ArithmeticCalculator.*(double, ..)<br>匹配第一个参数为double类型的方法, “..”匹配任意数量任意类型的参数</li><li>execution public double ArithmeticCalculator.*(double, double)<br>匹配参数类型为double,double类型的方法.</li></ul><h4 id="5、可以在通知方法中声明一个类型为JoinPoint的参数-然后就能访问链接细节-如方法名称和参数值"><a href="#5、可以在通知方法中声明一个类型为JoinPoint的参数-然后就能访问链接细节-如方法名称和参数值" class="headerlink" title="5、可以在通知方法中声明一个类型为JoinPoint的参数. 然后就能访问链接细节. 如方法名称和参数值."></a>5、可以在通知方法中声明一个类型为JoinPoint的参数. 然后就能访问链接细节. 如方法名称和参数值.</h4>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP的相关基础介绍</title>
      <link href="/posts/d19ddc0b.html"/>
      <url>/posts/d19ddc0b.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Aop（Aspect-Oriented Programming，面向切面编程）是一种新的方法论，是对传统OOP（Object-Oriented Programming，面向对象编程）的补充</p></blockquote><h3 id="AOP简介"><a href="#AOP简介" class="headerlink" title="AOP简介"></a>AOP简介</h3><ul><li>AOP主要编程对象是切面（aspect），而切面是横切关注点的模块化。</li><li>在应用AOP编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类。这样一来横切关注点就被模块化到特殊的对象(切面)里。</li><li>AOP的好处：<br>1.每个事物逻辑位于一个位置，代码不分散，便于维护和升级<br>2.业务模块更简洁，只包含核心业务代码</li></ul><h3 id="AOP相关术语"><a href="#AOP相关术语" class="headerlink" title="AOP相关术语"></a>AOP相关术语</h3><ul><li><p><strong>横切关注点:</strong><br>验证参数，日志(前置日志、后置日志)等</p></li><li><p><strong>切面(Aspect):</strong><br>横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象</p></li><li><p><strong>通知(Advice):</strong><br>切面必须要完成的工作</p></li><li><p><strong>目标(Target):</strong><br>被通知的对象</p></li><li><p><strong>代理(Proxy):</strong><br>向目标对象应用通知之后创建的对象</p></li><li><p><strong>连接点(Joinpoint):</strong><br>程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。例如 ArithmethicCalculator#add() 方法执行前的连接点: 执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置</p></li><li><p><strong>切点(pointcut):</strong><br>每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。AOP通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件</p></li></ul><table><thead><tr><th>相关术语</th><th>描述</th></tr></thead><tbody><tr><td>横切关注点</td><td>验证参数，日志(前置日志、后置日志)等</td></tr><tr><td>切面(Aspect)</td><td>横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象</td></tr><tr><td>通知(Advice)</td><td>切面必须要完成的工作</td></tr><tr><td>目标(Target)</td><td>被通知的对象</td></tr><tr><td>代理(Proxy)</td><td>向目标对象应用通知之后创建的对象</td></tr><tr><td>连接点(Joinpoint)</td><td>程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。例如 ArithmethicCalculator#add() 方法执行前的连接点: 执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置</td></tr><tr><td>切点(pointcut)</td><td>每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。AOP通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中使用动态代理解决日志需求</title>
      <link href="/posts/974a0419.html"/>
      <url>/posts/974a0419.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>使用动态代理技术实现在类的方法中加入日志信息。通过动态代理的方式写入日志信息不会给原来的类带来代码混乱和分散的问题，便于维护</p></blockquote><ul><li>ArithmeticCalculator.java</li><li>ArithmeticCalculatorImpl.java</li><li>ArithmeticCalculatorLoggingImpl.java</li><li>ArithmeticCalculatorLoggingProxy.java</li><li>Main.java</li></ul><h3 id="ArithmeticCalculator-java"><a href="#ArithmeticCalculator-java" class="headerlink" title="ArithmeticCalculator.java"></a>ArithmeticCalculator.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorImpl-java"><a href="#ArithmeticCalculatorImpl-java" class="headerlink" title="ArithmeticCalculatorImpl.java"></a>ArithmeticCalculatorImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span><span class="token comment">//该实现类的方法中不带日志信息，而通过动态代理的方式写入日志信息，便于维护</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorLoggingImpl-java"><a href="#ArithmeticCalculatorLoggingImpl-java" class="headerlink" title="ArithmeticCalculatorLoggingImpl.java"></a>ArithmeticCalculatorLoggingImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span><span class="token comment">//直接在该实现类的方法中写入日志信息</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorLoggingImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method add() begins with["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method add() ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method sub() begins with["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method sub() ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method mul() begins with["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method mul() ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method div() begins with["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method div() ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ArithmeticCalculatorLoggingProxy-java"><a href="#ArithmeticCalculatorLoggingProxy-java" class="headerlink" title="ArithmeticCalculatorLoggingProxy.java"></a>ArithmeticCalculatorLoggingProxy.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span><span class="token comment">//使用该动态代理类，解决ArithmeticCalculatorImpl类方法中的日志问题</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArithmeticCalculatorLoggingProxy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//要代理的对象</span>    <span class="token keyword">private</span> <span class="token class-name">ArithmeticCalculator</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ArithmeticCalculatorLoggingProxy</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticCalculator</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ArithmeticCalculator</span> <span class="token function">getLoggingProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArithmeticCalculator</span> proxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">//代理对象有哪一个类加载器负责加载</span>        <span class="token class-name">ClassLoader</span> loader <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理对象的类型，即其中有哪些方法。可以通过ArithmeticCalculator.class.getMethods()返回一个方法数组Method[]</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">ArithmeticCalculator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//当调用代理对象其中的方法时，该执行的代码</span>        <span class="token class-name">InvocationHandler</span> h<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            * proxy：正在返回的那个代理对象，一般情况下，invoke方法中都不使用该对象。            * method：正在被调用的方法            * args：调用方法时，传入的参数            * */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//在这里使用proxy时会出现死循环，StackOverflowError。因为一旦使用，又会被动态代理转移到这儿调用invoke，出现死循环</span>                <span class="token comment">//System.out.println(proxy.toString());</span>                <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取方法名</span>                <span class="token comment">//日志</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;-yczlab-> The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//执行方法</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//日志</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;-yczlab-> The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticCalculator</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//直接在实现类ArithmeticCalculatorLoggingImpl的方法中写日志信息</span>        <span class="token class-name">ArithmeticCalculator</span> arithmeticCalculatorLogging<span class="token punctuation">;</span>        arithmeticCalculatorLogging <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticCalculatorLoggingImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> arithmeticCalculatorLogging<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-->"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> arithmeticCalculatorLogging<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-->"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过使用动态代理的方式写入日志信息</span>        <span class="token class-name">ArithmeticCalculator</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticCalculatorImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArithmeticCalculator</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticCalculatorLoggingProxy</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoggingProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-->"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-->"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中的泛型依赖注入</title>
      <link href="/posts/d97af60f.html"/>
      <url>/posts/d97af60f.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Spring可以为子类注入子类对应的泛型类型的成员变量的引用</p></blockquote><ul><li>User.java</li><li>BaseService.java</li><li>UserService.java</li><li>BaseRepository.java</li><li>UserRepository.java</li><li>Main.javva</li><li>beans-generic-di.xml</li></ul><h3 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>di</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="BaseService-java"><a href="#BaseService-java" class="headerlink" title="BaseService.java"></a>BaseService.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>di</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//该注解会被子类继承</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">protected</span> <span class="token class-name">BaseRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> repository<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>di</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">//父类没有加入Spring的自动管理，子类使用@Service注解加入Spring的自动管理</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">BaseService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//继承@AutoWired注解后，会自动配置好BaseRepository&lt;User>类型的实例Bean</span>    <span class="token comment">//相当于如下代码：</span>    <span class="token comment">/*    @Autowired    protected BaseRepository&lt;User> repository;    **/</span><span class="token punctuation">&#125;</span></code></pre><h3 id="BaseRepository-java"><a href="#BaseRepository-java" class="headerlink" title="BaseRepository.java"></a>BaseRepository.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>di</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserRepository-java"><a href="#UserRepository-java" class="headerlink" title="UserRepository.java"></a>UserRepository.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>di</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token comment">//父类没有加入Spring的自动管理，子类使用@Repository注解加入Spring的自动管理</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-javva"><a href="#Main-javva" class="headerlink" title="Main.javva"></a>Main.javva</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>di</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-generic-di.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-generic-di-xml"><a href="#beans-generic-di-xml" class="headerlink" title="beans-generic-di.xml"></a>beans-generic-di.xml</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.generic.di<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中使用注解配置Bean(2),使用@Autowired注解自动装配属性</title>
      <link href="/posts/853d0c2f.html"/>
      <url>/posts/853d0c2f.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在Spring的配置文件中使用<code>&lt;context:component-scan&gt;</code>元素时，会自动注册 AutowireAnnotationBeanPostProcesser 实例，该实例会自动装配具有 @Autowired 和 @Resource、@Inject 注解标注的属性</p></blockquote><ul><li>TestObject.java</li><li>UserController.java</li><li>UserService.java</li><li>UserRepository.java</li><li>UserRepositoryImpl.java</li><li>UserJdbcRepositoryImpl.java</li><li>Main.java</li><li>beans-annotation.xml</li></ul><h3 id="TestObject-java"><a href="#TestObject-java" class="headerlink" title="TestObject.java"></a>TestObject.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//@Autowired注解可以放在属性上</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserController execute..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">UserJdbcRepositoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">UserRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//@Autowired注解直接放在属性上</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userRepositoryImpl"</span><span class="token punctuation">)</span><span class="token comment">//特别指定IOC容器中的哪个bean实例装配到该属性</span>    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userJdbcRepositoryImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userJdbcRepository<span class="token punctuation">;</span>    <span class="token comment">//@Autowired注解也可以放在方法上</span>    <span class="token comment">/*    @Autowired    public void setUserRepository(UserRepository userRepository) &#123;        this.userRepository = userRepository;    &#125;    */</span>    <span class="token comment">//@Autowired注解也可以放在形参前面</span>    <span class="token comment">/*    @Autowired    public void setUserRepository(@Autowired UserRepository userRepository) &#123;        this.userRepository = userRepository;    &#125;    */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userJdbcRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserRepository-java"><a href="#UserRepository-java" class="headerlink" title="UserRepository.java"></a>UserRepository.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserRepositoryImpl-java"><a href="#UserRepositoryImpl-java" class="headerlink" title="UserRepositoryImpl.java"></a>UserRepositoryImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TestObject</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token comment">//添加注解并设置bean在IOC容器中的名字，即id。也可以使用默认名字userRepositoryImpl</span><span class="token comment">//@Repository("userRepository")</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置@Autowired注解的required属性为false，当容器中没有testObject的Bean实例时也不会报错，不然会报错</span>    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">TestObject</span> testObject<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserRepository Save..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testObject: "</span> <span class="token operator">+</span> testObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserJdbcRepositoryImpl-java"><a href="#UserJdbcRepositoryImpl-java" class="headerlink" title="UserJdbcRepositoryImpl.java"></a>UserJdbcRepositoryImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserJdbcRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserJdbcRepository save..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span><span class="token class-name">UserController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">UserRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-annotation.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*//通过注解的方式配置bean（1）        TestObject testObject = (TestObject) context.getBean("testObject");        System.out.println(testObject);        UserController userController = (UserController) context.getBean("userController");        System.out.println(userController);        UserService userService = (UserService) context.getBean("userService");        System.out.println(userService);        UserRepository userRepository = (UserRepository) context.getBean("userRepository");        System.out.println(userRepository);        */</span>        <span class="token comment">//通过注解的方式配置bean（2），主要是bean之间的关联关系</span>        <span class="token class-name">UserController</span> userController <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserController</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userController<span class="token punctuation">)</span><span class="token punctuation">;</span>        userController<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-annotation-xml配置文件"><a href="#beans-annotation-xml配置文件" class="headerlink" title="beans-annotation.xml配置文件"></a>beans-annotation.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        指定Spring Ioc容器扫描的包        Spring容器会自动管理所扫描包下的标有@Component、@Controller、@Service、@Repository注解的类    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.annotation<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--可以通过resource-pattern指定扫描的资源--></span>    <span class="token comment">&lt;!--        &lt;context:component-scan                base-package="com.yczlab.spring.beans.annotation"                resource-pattern="repository/*.class">        &lt;/context:component-scan>    --></span>    <span class="token comment">&lt;!-- context:exclude-filter 子节点指定排除哪些指定表达式的组件 --></span>    <span class="token comment">&lt;!--        &lt;context:component-scan base-package="com.yczlab.spring.beans.annotation">            &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>        &lt;/context:component-scan>    --></span>    <span class="token comment">&lt;!-- context:include-filter 子节点指定包含哪些指定表达式的组件，该子节点需要与use-default-filters="false"配合使用 --></span>    <span class="token comment">&lt;!--        &lt;context:component-scan base-package="com.yczlab.spring.beans.annotation" use-default-filters="false">            &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>        &lt;/context:component-scan>    --></span>    <span class="token comment">&lt;!--type="assignable"的context:exclude-filter子节点--></span>    <span class="token comment">&lt;!--        &lt;context:component-scan base-package="com.yczlab.spring.beans.annotation">            &lt;context:exclude-filter type="assignable" expression="com.yczlab.spring.beans.annotation.repository.UserRepository"/>        &lt;/context:component-scan>    --></span>    <span class="token comment">&lt;!--type="assignable"的context:include-filter子节点，该子节点需要与use-default-filters="false"配合使用--></span>    <span class="token comment">&lt;!--        &lt;context:component-scan base-package="com.yczlab.spring.beans.annotation" use-default-filters="false">            &lt;context:include-filter type="assignable" expression="com.yczlab.spring.beans.annotation.repository.UserRepository"/>        &lt;/context:component-scan>    --></span>    <span class="token comment">&lt;!--组件装配        &lt;context:component-scan>元素还会自动注册 AutowireAnnotationBeanPostProcesser 实例，        该实例会自动装配具有 @Autowired 和 @Resource、@Inject 注解的属性        @Autowired注解：自动装配具有兼容类型的单个Bean属性        - 构造器，普通字段（即使是非public），一切具有参数的方法都可以应用@Autowired注解        - 默认情况下，所有使用@Autowired注解的属性都需要被设置。当Spring找不到匹配的Bean装配属性时，会抛出异常。          若某一属性允许不被设置，可以设置@Autowired注解的required属性为false        - 默认情况下, 当 IOC 容器里存在多个类型兼容的 Bean 时, 通过类型的自动装配将无法工作.          此时可以在 @Qualifier 注解里提供 Bean 的名称. Spring 允许对方法的入参标注 @Qualifiter 已指定注入 Bean 的名称        - @Authwired 注解也可以应用在数组类型的属性上, 此时 Spring 将会把所有匹配的Bean进行自动装配.        - @Authwired 注解也可以应用在集合属性上, 此时Spring读取该集合的类型信息, 然后自动装配所有与之兼容的 Bean.        - @Authwired 注解用在java.util.Map上时, 若该Map的键值为String,那么Spring将自动装配与之Map值类型兼容的Bean          此时Bean的名称作为键(key)，Bean实例作为值(value)        Spring 还支持 @Resource 和 @Inject 注解，这两个注解和 @Autowired 注解的功用类似        @Resource注解：要求提供一个 Bean名称的属性，若该属性为空，则自动采用标注处的变量或方法名作为Bean的名称        @Inject注解：和@Autowired注解一样也是按类型匹配注入的 Bean，但没有reqired属性        建议使用 @Autowired 注解    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中使用注解配置Bean(1)</title>
      <link href="/posts/10a2b22b.html"/>
      <url>/posts/10a2b22b.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在Spring中通过添加注解的方式来配置Bean，Spring容器会自动管理所扫描包(可以自行配置所要扫描的包的路径)下的标有@Component、@Controller、@Service、@Repository注解的类</p></blockquote><ul><li>TestObject.java</li><li>UserController.java</li><li>UserService.java</li><li>UserRepository.java</li><li>UserRepositoryImpl.java</li><li>Main.java</li><li>beans-annotation.xml</li></ul><h3 id="TestObject-java"><a href="#TestObject-java" class="headerlink" title="TestObject.java"></a>TestObject.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserController execute..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserRepository-java"><a href="#UserRepository-java" class="headerlink" title="UserRepository.java"></a>UserRepository.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="UserRepositoryImpl-java"><a href="#UserRepositoryImpl-java" class="headerlink" title="UserRepositoryImpl.java"></a>UserRepositoryImpl.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span></span><span class="token punctuation">;</span><span class="token comment">//添加注解并设置bean在IOC容器中的名字，即id</span><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"userRepository"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserRepository Save..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>controller<span class="token punctuation">.</span></span><span class="token class-name">UserController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">UserRepository</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">UserService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-annotation.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TestObject</span> testObject <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TestObject</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"testObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>testObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserController</span> userController <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserController</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userController"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userController<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserRepository</span> userRepository <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserRepository</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userRepository"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-annotation-xml配置文件"><a href="#beans-annotation-xml配置文件" class="headerlink" title="beans-annotation.xml配置文件"></a>beans-annotation.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定Spring Ioc容器扫描的包--></span>    <span class="token comment">&lt;!--        &lt;context:component-scan base-package="com.yczlab.spring.beans.annotation"/>    --></span>    <span class="token comment">&lt;!--可以通过resource-pattern指定扫描的资源--></span>    <span class="token comment">&lt;!--        &lt;context:component-scan                base-package="com.yczlab.spring.beans.annotation"                resource-pattern="repository/*.class">        &lt;/context:component-scan>    --></span>    <span class="token comment">&lt;!-- context:exclude-filter 子节点指定排除哪些指定表达式的组件 --></span>    <span class="token comment">&lt;!--        &lt;context:component-scan base-package="com.yczlab.spring.beans.annotation">            &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>        &lt;/context:component-scan>    --></span>    <span class="token comment">&lt;!-- context:include-filter 子节点指定包含哪些指定表达式的组件，该子节点需要与use-default-filters="false"配合使用 --></span>    <span class="token comment">&lt;!--        &lt;context:component-scan base-package="com.yczlab.spring.beans.annotation" use-default-filters="false">            &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>        &lt;/context:component-scan>    --></span>    <span class="token comment">&lt;!--type="assignable"的context:exclude-filter子节点--></span>    <span class="token comment">&lt;!--        &lt;context:component-scan base-package="com.yczlab.spring.beans.annotation">            &lt;context:exclude-filter type="assignable" expression="com.yczlab.spring.beans.annotation.repository.UserRepository"/>        &lt;/context:component-scan>    --></span>    <span class="token comment">&lt;!--type="assignable"的context:include-filter子节点，该子节点需要与use-default-filters="false"配合使用--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.annotation<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>assignable<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.annotation.repository.UserRepository<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring通过FactoryBean来配置bean</title>
      <link href="/posts/ecab3e09.html"/>
      <url>/posts/ecab3e09.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>通过实现FactoryBean接口来配置bean</p></blockquote><ul><li>Car.java</li><li>CarFactoryBean.java</li><li>Main.java</li><li>beans-beanfactory.xml</li></ul><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factorybean</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="CarFactoryBean-java"><a href="#CarFactoryBean-java" class="headerlink" title="CarFactoryBean.java"></a>CarFactoryBean.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factorybean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">FactoryBean</span></span><span class="token punctuation">;</span><span class="token comment">//自定义的FactoryBean需要实现FactoryBean接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回bean的对象</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> <span class="token number">500000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回bean的类型</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//是否为单实例</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factorybean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-beanfactory.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-beanfactory-xml"><a href="#beans-beanfactory-xml" class="headerlink" title="beans-beanfactory.xml"></a>beans-beanfactory.xml</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        通过FactoryBean来配置Bean的实例        class：指向FactoryBean的全类名        property：配置FactoryBean的属性        但实际返回的实例却是FactoryBean的getObject()方法返回的实例！    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.factorybean.CarFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BMW<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中使用工厂方法配置Bean(静态工厂,实例工厂)</title>
      <link href="/posts/d0bdbad0.html"/>
      <url>/posts/d0bdbad0.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>通过静态工厂方法来配置bean，注意不是配置静态工厂方法实例，而是配置bean实例。<br>通过实例工厂方法来配置bean，先配置工厂的bean实例，再配置所需bean实例。</p></blockquote><ul><li>Car.java</li><li>StaticCarFactory.java</li><li>InstanceCarFactory.java</li><li>Main.java</li><li>beans-factory.xml</li></ul><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="StaticCarFactory-java"><a href="#StaticCarFactory-java" class="headerlink" title="StaticCarFactory.java"></a>StaticCarFactory.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Description: 静态工厂方法：直接调用某个类的静态方法就可以返回Bean的实例 * @Author: ycz * @Date: 2020/3/5 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticCarFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">></span></span> cars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        cars<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"audi"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"audi"</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cars<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ford"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"ford"</span><span class="token punctuation">,</span><span class="token number">400000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//静态工厂方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cars<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="InstanceCarFactory-java"><a href="#InstanceCarFactory-java" class="headerlink" title="InstanceCarFactory.java"></a>InstanceCarFactory.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token comment">/** * @Description: 实例工厂的方法：即先需要创建工厂本身，再调用实例化后的工厂的方法返回bean实例 * @Author: ycz * @Date: 2020/3/5 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceCarFactory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">></span></span> cars <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InstanceCarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cars<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"audi"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"audi"</span><span class="token punctuation">,</span> <span class="token number">300000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cars<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ford"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">"ford"</span><span class="token punctuation">,</span> <span class="token number">400000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cars<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-factory.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> car1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"staticCar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> car2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"instanceCar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-factory-xml配置文件"><a href="#beans-factory-xml配置文件" class="headerlink" title="beans-factory.xml配置文件"></a>beans-factory.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过静态工厂方法来配置bean，注意不是配置静态工厂方法实例，而是配置bean实例--></span>    <span class="token comment">&lt;!--        class属性：指向静态工厂方法的全类名        factory-method：指向静态工厂方法的名字        constructor-arg：如果工厂方法需要传入参数，则使用constructor-arg来配置参数    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>staticCar<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.factory.StaticCarFactory<span class="token punctuation">"</span></span>          <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getCar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>audi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置工厂的实例--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.factory.InstanceCarFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--通过实例工厂的方法来配置bean--></span>    <span class="token comment">&lt;!--        class属性：不需要        factory-bean：指向工厂的实例bean        constructor-arg：如果工厂方法需要传入参数，则使用constructor-arg来配置参数    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>instanceCar<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>carFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getCar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ford<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC容器对Bean生命周期的管理</title>
      <link href="/posts/7a1e407b.html"/>
      <url>/posts/7a1e407b.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Spring的IOC容器对Bean生命周期的管理，包括Bean的后置处理器、初始化和销毁等</p></blockquote><ul><li>Car.java</li><li>MyBeanPostProcessor.java</li><li>Main.java</li><li>beans-cycle.xml</li></ul><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>cycle</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Car's Constructor..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setBrand..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"init..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"destroy..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="MyBeanPostProcessor-java"><a href="#MyBeanPostProcessor-java" class="headerlink" title="MyBeanPostProcessor.java"></a>MyBeanPostProcessor.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>cycle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">BeanPostProcessor</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postProcessBeforeInitialization: "</span> <span class="token operator">+</span> bean <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//...</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postProcessAfterInitialization: "</span> <span class="token operator">+</span> bean <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//可以偷梁换柱</span>        <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car<span class="token punctuation">.</span><span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token string">"Ford"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>cycle</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathXmlApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-cycle.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//关闭IOC容器</span>        context<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-cycle-xml配置文件"><a href="#beans-cycle-xml配置文件" class="headerlink" title="beans-cycle.xml配置文件"></a>beans-cycle.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Spring IOC容器对Bean生命周期进行管理的过程：            - 通过构造器或工厂方法创建Bean实例            - 为Bean的属性设置值和对其他Bean的引用            - 调用Bean的初始化方法            - 正常使用Bean            - 当容器关闭时，调用Bean的销毁方法    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.cycle.Car<span class="token punctuation">"</span></span>          <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Audi<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置Bean后置处理器，实现更细粒度的控制        实现BeanPostProcessor接口，并提供        postProcessBeforeInitialization(Object bean, String beanName)：在init-method之前被调用        postProcessAfterInitialization(Object bean, String beanName)：在destroy-method之后被调用        以上两个方法的实现        bean：bean实例本身        beanName：IOC容器配置的bean的名字，即唯一表示id        返回值：是实际上返回给用户的那个Bean，注意：可以在以上两个方法中修改返回的bean，甚至返回一个新的bean    --></span>    <span class="token comment">&lt;!--配置bean的后置处理器：不需要配置id，IOC容器自动识别是一个BeanPostProcesser--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.cycle.MyBeanPostProcessor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置了Bean后置处理器后，Spring IOC容器对Bean生命周期进行管理的过程：            - 通过构造器或工厂方法创建Bean实例            - 为Bean的属性设置值和对其他Bean的引用            - 将Bean实例传递给Bean后置处理器的postProcessBeforeInitialization()方法            - 调用Bean的初始化方法            - 将将Bean实例传递给Bean后置处理器的postProcessAfterInitialization()方法            - 正常使用Bean            - 当容器关闭时，调用Bean的销毁方法    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中使用SpEL为Bean的属性动态赋值</title>
      <link href="/posts/951c31c6.html"/>
      <url>/posts/951c31c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>可以在Spring中使用SpEL语言为Bean的属性赋一个字面值，引用其他类的静态属性，引用其他的Bean，引用其他Bean的属性，还可以在SpEL中使用运算符。</p></blockquote><ul><li>Address.java</li><li>Car.java</li><li>Person.java</li><li>Main.java</li><li>beans-spel.xml</li></ul><h3 id="Address-java"><a href="#Address-java" class="headerlink" title="Address.java###"></a>Address.java###</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>spel</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> city<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCity</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> street<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStreet</span><span class="token punctuation">(</span><span class="token class-name">String</span> street<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>street <span class="token operator">=</span> street<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Address&#123;"</span> <span class="token operator">+</span>                <span class="token string">"city='"</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", street='"</span> <span class="token operator">+</span> street <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>spel</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token comment">//轮胎周长</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> tyrePerimeter<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTyrePerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> tyrePerimeter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTyrePerimeter</span><span class="token punctuation">(</span><span class="token keyword">double</span> tyrePerimeter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tyrePerimeter <span class="token operator">=</span> tyrePerimeter<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">", tyrePerimeter="</span> <span class="token operator">+</span> tyrePerimeter <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>spel</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span><span class="token comment">//打算 引用address bean的city属性</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span><span class="token comment">//打算 根据car的price属性确定info。price>=300000,为金领；否则为白领</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCar</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> city<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCity</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", car="</span> <span class="token operator">+</span> car <span class="token operator">+</span>                <span class="token string">", city='"</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", info='"</span> <span class="token operator">+</span> info <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>spel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-spel.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"****************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-spel-xml"><a href="#beans-spel-xml" class="headerlink" title="beans-spel.xml"></a>beans-spel.xml</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.spel.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--使用SpEL为属性赋一个字面值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;<span class="token punctuation">'</span>BeiJing<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>street<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WuDaoKou<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.spel.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Audi<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--使用SpEL引用类的静态属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tyrePerimeter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;T(java.lang.Math).PI * 80&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.spel.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--使用SpEL来引用其他的Bean--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;car&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--使用SpEL来引用其他Bean的属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;address.city&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- 在SpEL中使用运算符 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#&#123;car.price > 300000 ? <span class="token punctuation">'</span>金领<span class="token punctuation">'</span>:<span class="token punctuation">'</span>白领<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tom<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring配置Bean时使用外部属性文件(比如配置数据库源)</title>
      <link href="/posts/50bc1e9e.html"/>
      <url>/posts/50bc1e9e.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Spring在配置某些Bean时可以使用外部的属性文件。使用外部化属性文件中的属性，在之后开发过程中便于修改，只需修改外部的属性文件即可。比如配置数据库时。</p></blockquote><ul><li>Main.java</li><li>beans-properties.xml</li><li>db.properties</li></ul><h3 id="需要在工程中添加如下的“-jar”包文件"><a href="#需要在工程中添加如下的“-jar”包文件" class="headerlink" title="需要在工程中添加如下的“.jar”包文件"></a>需要在工程中添加如下的“.jar”包文件</h3><ul><li><a href="c3p0-0.9.5.5.jar">c3p0-0.9.5.5.jar</a></li><li><a href="mysql-connector-java-8.0.18.jar">mysql-connector-java-8.0.18.jar</a></li><li><a href="mchange-commons-java-0.2.19.jar">mchange-commons-java-0.2.19.jar</a></li></ul><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>properties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-properties.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> dataSource1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"dataSource1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-properties-xml（src-x2F-目录下）"><a href="#beans-properties-xml（src-x2F-目录下）" class="headerlink" title="beans-properties.xml（src&#x2F;目录下）"></a>beans-properties.xml（src&#x2F;目录下）</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 导入属性文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:db.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--传统方式配置，在之后开发过程中的修改很麻烦--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--实际的数据库用户名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--实际的数据库密码--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql:///spring_learning_test?serverTimezone=UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--实际的数据库名--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--使用外部化属性文件的属性，在之后开发过程中便于修改，只需修改外部的属性文件即可--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;driverClass&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbcUrl&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="db-properties（src-x2F-目录下）"><a href="#db-properties（src-x2F-目录下）" class="headerlink" title="db.properties（src&#x2F;目录下）"></a>db.properties（src&#x2F;目录下）</h3><pre class="language-none"><code class="language-none"># 实际的数据库用户名user&#x3D;root# 实际的数据库密码password&#x3D;123456driverClass&#x3D;com.mysql.cj.jdbc.Driver# 实际的数据库名jdbcUrl&#x3D;jdbc:mysql:&#x2F;&#x2F;&#x2F;spring_learning_test?serverTimezone&#x3D;UTC</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的作用域(单例,原型)</title>
      <link href="/posts/8df97c02.html"/>
      <url>/posts/8df97c02.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>使用bean的scope属性来配置bean的作用域</p></blockquote><ul><li>Car.java</li><li>Main.java</li><li>beans-scope.xml</li></ul><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>scope</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Car's Constructor..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>scope</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-scope.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> car2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car <span class="token operator">==</span> car2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-scope-xml"><a href="#beans-scope-xml" class="headerlink" title="beans-scope.xml"></a>beans-scope.xml</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        使用bean的scope属性来配置bean的作用域        singleton：默认值。容器初始化时创建Bean实例，在整个容器的生命周期内只创建这一个bean，单例的。        prototype：原型的。容器初始化时不创建Bean的实例，而在每次请求时都创建一个新的Bean实例，并返回。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.scope.Car<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Audi<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean之间的继承依赖关系</title>
      <link href="/posts/15c1c575.html"/>
      <url>/posts/15c1c575.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>bean的配置可以被继承，“子类bean”使用parent属性指定继承哪个“父类bean”的配置</p></blockquote><ul><li>Address.java</li><li>Car.java</li><li>Person.java</li><li>Main.java</li><li>beans-relation.xml</li></ul><h3 id="Address-java"><a href="#Address-java" class="headerlink" title="Address.java"></a>Address.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>autowire</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> city<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCity</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> street<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStreet</span><span class="token punctuation">(</span><span class="token class-name">String</span> street<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>street <span class="token operator">=</span> street<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Address&#123;"</span> <span class="token operator">+</span>                <span class="token string">"city='"</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", street='"</span> <span class="token operator">+</span> street <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>autowire</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>autowire</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCar</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", address="</span> <span class="token operator">+</span> address <span class="token operator">+</span>                <span class="token string">", car="</span> <span class="token operator">+</span> car <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>relation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>autowire<span class="token punctuation">.</span></span><span class="token class-name">Address</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>autowire<span class="token punctuation">.</span></span><span class="token class-name">Person</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-relation.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//抽象Bean在IOC容器中不会被实例化</span>        <span class="token comment">//Address address = (Address) context.getBean("address");</span>        <span class="token comment">//System.out.println(address);</span>        <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"address2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"address3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"address4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-relation-xml配置文件"><a href="#beans-relation-xml配置文件" class="headerlink" title="beans-relation.xml配置文件"></a>beans-relation.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    抽象bean：bean的abstract属性为true的bean，这样的bean不能被IOC容器实例化，只用来继承配置，但是abstract属性不会被继承    若某一个bean的class属性没有指定，则该bean必须是一个抽象bean    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Address<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>city</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BeiJing^<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>street</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WuDaoKou<span class="token punctuation">"</span></span> <span class="token attr-name">abstract</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Address<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>city</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BeiJing<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>street</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DaZhongSi<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--bean配置的继承：使用bean的parent属性指定继承那个bean的配置，但是abstract属性并不会被继承--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Address<span class="token punctuation">"</span></span>          <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address4<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Address<span class="token punctuation">"</span></span>          <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address2<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>street</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DaZhongSi<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Car<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>brand</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Audi<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--    depends-on属性：要求在配置Person时，必须有一个关联的car。换句话说person这个bean依赖于Car这个bean,但是并不会装配这个car    depends-on属性设置Bean前置依赖的Bean，前置依赖度Bean会在本Bean实例化之前创建好，如果依赖多个Bean，则通过逗号或空格隔开    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Person<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tom<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>address-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address2<span class="token punctuation">"</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的自动装配autowire属性</title>
      <link href="/posts/494c58de.html"/>
      <url>/posts/494c58de.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>使用autowire属性，自动将IOC容器中的bean装配到当前所配置的bean的属性中</p></blockquote><ul><li>Address.java</li><li>Car.java</li><li>Person.java</li><li>Main.java</li><li>beans-autowire.xml</li></ul><h3 id="Address-java"><a href="#Address-java" class="headerlink" title="Address.java"></a>Address.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>autowire</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> city<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCity</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> street<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStreet</span><span class="token punctuation">(</span><span class="token class-name">String</span> street<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>street <span class="token operator">=</span> street<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Address&#123;"</span> <span class="token operator">+</span>                <span class="token string">"city='"</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", street='"</span> <span class="token operator">+</span> street <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>autowire</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>autowire</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCar</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", address="</span> <span class="token operator">+</span> address <span class="token operator">+</span>                <span class="token string">", car="</span> <span class="token operator">+</span> car <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>autowire</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans-autowire.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="beans-autowire-xml配置文件"><a href="#beans-autowire-xml配置文件" class="headerlink" title="beans-autowire.xml配置文件"></a>beans-autowire.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Address<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>city</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BeiJing<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>street</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HuiLongGuan<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Address<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>city</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DaLian<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>street</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ZhongShan<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Car<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>brand</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Audi<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>price</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--    可以使用autowire属性指定自动装配的方式。    byName 根据bean的名字和当前bean的setter风格的属性名进行自动装配。若有匹配的，则进行自动装配；若没有匹配的，则不装配    byType 根据bean的类型和当前bean的属性的类型进行自动装配。若IOC容器中有1个以上的类型匹配的bean，则抛异常。    不能兼用2中自动装配方式。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.autowire.Person<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tom<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的属性配置细节(p命名空间为bean的属性赋值)</title>
      <link href="/posts/51c515ac.html"/>
      <url>/posts/51c515ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在配置文件中使用p命名空间为所配置的bean的属性赋值</p></blockquote><ul><li>Car.java</li><li>ListPerson.java</li><li>Main.java</li><li>applicationContext.xml</li></ul><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> corp<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSpeed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token class-name">String</span> corp<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token class-name">String</span> corp<span class="token punctuation">,</span> <span class="token keyword">int</span> maxSpeed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCorp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> corp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorp</span><span class="token punctuation">(</span><span class="token class-name">String</span> corp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMaxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaxSpeed</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSpeed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", corp='"</span> <span class="token operator">+</span> corp <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">", maxSpeed="</span> <span class="token operator">+</span> maxSpeed <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ListPerson-java"><a href="#ListPerson-java" class="headerlink" title="ListPerson.java"></a>ListPerson.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">Car</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListPerson</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ListPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ListPerson</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cars <span class="token operator">=</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> <span class="token function">getCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCars</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cars <span class="token operator">=</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"ListPerson&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", cars="</span> <span class="token operator">+</span> cars <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListPerson</span> listPerson2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ListPerson</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"listPerson2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listPerson2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="applicationContext-xml配置文件"><a href="#applicationContext-xml配置文件" class="headerlink" title="applicationContext.xml配置文件"></a>applicationContext.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>uitl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过构造方法来配置bean的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Audi<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ShangHai<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>double<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用构造器注入属性值可以指定参数的位置和参数的类型！以区分重载的构造器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Baoma<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--属性值也可以使用value子节点进行配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>ShanHai^<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>250<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置独立的集合Bean，以供多个Bean进行引用。需导入util命名空间--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">uitl:</span>list</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">uitl:</span>list</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过 p 命名空间为bean的属性赋值，需要先导入 p 命名空间。相对于传统的配置方式更加的简洁。 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listPerson2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.collections.ListPerson<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Queen<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>cars-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的属性配置细节(配置独立的集合Bean)</title>
      <link href="/posts/5b2286b.html"/>
      <url>/posts/5b2286b.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>配置独立的集合Bean，以供多个Bean进行引用。需导入util命名空间</p></blockquote><ul><li>Car.java</li><li>ListPerson.java</li><li>Main.java</li><li>applicationContext.xml</li></ul><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> corp<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSpeed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token class-name">String</span> corp<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token class-name">String</span> corp<span class="token punctuation">,</span> <span class="token keyword">int</span> maxSpeed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCorp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> corp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorp</span><span class="token punctuation">(</span><span class="token class-name">String</span> corp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMaxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaxSpeed</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSpeed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", corp='"</span> <span class="token operator">+</span> corp <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">", maxSpeed="</span> <span class="token operator">+</span> maxSpeed <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ListPerson-java"><a href="#ListPerson-java" class="headerlink" title="ListPerson.java"></a>ListPerson.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">Car</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListPerson</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ListPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ListPerson</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cars <span class="token operator">=</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> <span class="token function">getCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCars</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cars <span class="token operator">=</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"ListPerson&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", cars="</span> <span class="token operator">+</span> cars <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListPerson</span> listPerson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ListPerson</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"listPerson"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="applicationContext-xml配置文件"><a href="#applicationContext-xml配置文件" class="headerlink" title="applicationContext.xml配置文件"></a>applicationContext.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>uitl</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/util<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过构造方法来配置bean的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Audi<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ShangHai<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>double<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用构造器注入属性值可以指定参数的位置和参数的类型！以区分重载的构造器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Baoma<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--属性值也可以使用value子节点进行配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>ShanHai^<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>250<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置独立的集合Bean，以供多个Bean进行引用。需导入util命名空间--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">uitl:</span>list</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">uitl:</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listPerson<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.collections.ListPerson<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>29<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bean的属性配置细节(配置集合属性)</title>
      <link href="/posts/adeb086e.html"/>
      <url>/posts/adeb086e.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>为Spring中的Bean配置集合属性。</p></blockquote><ul><li>Car.java</li><li>ListPerson.java</li><li>MapPerson.java</li><li>DataSource.java</li><li>Main.java</li><li>applicationContext.xml</li></ul><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> corp<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSpeed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token class-name">String</span> corp<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token class-name">String</span> corp<span class="token punctuation">,</span> <span class="token keyword">int</span> maxSpeed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCorp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> corp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorp</span><span class="token punctuation">(</span><span class="token class-name">String</span> corp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMaxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaxSpeed</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSpeed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", corp='"</span> <span class="token operator">+</span> corp <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">", maxSpeed="</span> <span class="token operator">+</span> maxSpeed <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="ListPerson"><a href="#ListPerson" class="headerlink" title="ListPerson"></a>ListPerson</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">Car</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListPerson</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ListPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ListPerson</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cars <span class="token operator">=</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> <span class="token function">getCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCars</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cars <span class="token operator">=</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"ListPerson&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", cars="</span> <span class="token operator">+</span> cars <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="MapPerson"><a href="#MapPerson" class="headerlink" title="MapPerson"></a>MapPerson</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">Car</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapPerson</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MapPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MapPerson</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cars <span class="token operator">=</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">></span></span> <span class="token function">getCars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCars</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Car</span><span class="token punctuation">></span></span> cars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cars <span class="token operator">=</span> cars<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"MapPerson&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", cars="</span> <span class="token operator">+</span> cars <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSource</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Properties</span> <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"DataSource&#123;"</span> <span class="token operator">+</span>                <span class="token string">"properties="</span> <span class="token operator">+</span> properties <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListPerson</span> listPerson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ListPerson</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"listPerson"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>listPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MapPerson</span> mapPerson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MapPerson</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"mapPerson"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="applicationContext-xml配置文件"><a href="#applicationContext-xml配置文件" class="headerlink" title="applicationContext.xml配置文件"></a>applicationContext.xml配置文件</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过构造方法来配置bean的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Audi<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ShangHai<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>double<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用构造器注入属性值可以指定参数的位置和参数的类型！以区分重载的构造器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Baoma<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--属性值也可以使用value子节点进行配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>ShanHai^<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>250<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 测试如何配置集合属性 --></span>    <span class="token comment">&lt;!-- 配置List属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listPerson<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.collections.ListPerson<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mike<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>27<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 使用list节点为List类型的属性赋值--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Ford<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ChangAn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200000<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>double<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置Map属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapPerson<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.collections.MapPerson<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Rose<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cars<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--使用map节点及map的entry子节点配置Map类型的成员变量--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AA<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BB<span class="token punctuation">"</span></span> <span class="token attr-name">value-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置Properties属性值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.collections.DataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--使用props和prop节点来为Properties属性赋值--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql:///test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring配置Bean</title>
      <link href="/posts/183fb32d.html"/>
      <url>/posts/183fb32d.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>在Spring IOC容器中配置Bean，然后使用该Bean</p></blockquote><h3 id="Car-java"><a href="#Car-java" class="headerlink" title="Car.java"></a>Car.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> corp<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSpeed<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token class-name">String</span> corp<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token class-name">String</span> corp<span class="token punctuation">,</span> <span class="token keyword">int</span> maxSpeed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBrand</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCorp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> corp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCorp</span><span class="token punctuation">(</span><span class="token class-name">String</span> corp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corp <span class="token operator">=</span> corp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMaxSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaxSpeed</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSpeed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSpeed <span class="token operator">=</span> maxSpeed<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Car&#123;"</span> <span class="token operator">+</span>                <span class="token string">"brand='"</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", corp='"</span> <span class="token operator">+</span> corp <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">", maxSpeed="</span> <span class="token operator">+</span> maxSpeed <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Person-java"><a href="#Person-java" class="headerlink" title="Person.java"></a>Person.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCar</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", car="</span> <span class="token operator">+</span> car <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="HelloWorld-java"><a href="#HelloWorld-java" class="headerlink" title="HelloWorld.java"></a>HelloWorld.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld's Constructor..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setName: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>yczlab<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>beans</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ClassPathXmlApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        HelloWorld helloWorld = new HelloWorld();        helloWorld.setName("yczlab");        helloWorld.hello();        */</span>        <span class="token comment">//1、创建Spring的IOC容器对象</span>        <span class="token comment">//ApplicationContext(接口) 代表IOC</span>        <span class="token comment">//ClassPathXmlApplicationContext 是ApplicationContext接口的实现类，从类路径下加载配置文件夹</span>        <span class="token class-name">ApplicationContext</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2、从IOC容器中获取Bean实例</span>        <span class="token comment">//利用id定位到IOC容器中的bean</span>        <span class="token class-name">HelloWorld</span> helloWorld <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HelloWorld</span><span class="token punctuation">)</span>ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"helloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//利用类型放回IOC容器中的Bean，但要求IOC容器中必须只能有一个该类型的Bean</span>        <span class="token comment">//HelloWorld helloWorld = (HelloWorld) ctx.getBean(HelloWorld.class);</span>        <span class="token comment">//3、调用hello方法</span>        helloWorld<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>        car <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"car2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"person2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="applicationContext-xml配置文件（src-x2F-路径下）"><a href="#applicationContext-xml配置文件（src-x2F-路径下）" class="headerlink" title="applicationContext.xml配置文件（src&#x2F;路径下）"></a>applicationContext.xml配置文件（src&#x2F;路径下）</h3><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--        配置bean：        class：bean的全类名，通过反射的方式在IOC容器中创建Bean，所以要求Bean中必须有无参的构造器        id：标识容器中的bean，di是唯一的。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helloWorld2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yczlab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.HelloWorld<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yczlab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过构造方法来配置bean的属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Audi<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ShangHai<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>double<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用构造器注入属性值可以指定参数的位置和参数的类型！以区分重载的构造器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Baoma<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--属性值也可以使用value子节点进行配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>ShanHai^<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>250<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>24<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--可以使用property的ref属性或ref建立bean之间的引用关系--></span>        <span class="token comment">&lt;!-- &lt;property name="car" ref="car2">&lt;/property> --></span>        <span class="token comment">&lt;!--        &lt;property name="car">            &lt;ref bean="car2">&lt;/ref>        &lt;/property>        --></span>        <span class="token comment">&lt;!--也可以使用内部bean，内部bean不能被外部使用，只能在内部使用，所以id属性没必要--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Ford<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ChangAn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200000<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>double<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>person2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.yczlab.spring.beans.Person<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jerry<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- &lt;constructor-arg ref="car">&lt;/constructor-arg> --></span>        <span class="token comment">&lt;!--测试null值，属性为引用数据类型时，可以为其赋值为null，意义不大，因为这类数据默认初始化值就是null--></span>        <span class="token comment">&lt;!-- &lt;constructor-arg>&lt;null/>&lt;/constructor-arg> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 为级联属性赋值。注意：属性（car）需要先初始化后才能为级联属性赋值，否则会有异常 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>car.maxSpeed<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>250<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring项目的建立</title>
      <link href="/posts/3c2307c.html"/>
      <url>/posts/3c2307c.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>这里的Spring项目并非Spring Boot项目，演示如何在IntelliJ IDEA中建立并初始化Spring项目</p></blockquote><h3 id="1-打开IDEA-选择新建工程"><a href="#1-打开IDEA-选择新建工程" class="headerlink" title="1.打开IDEA,选择新建工程"></a>1.打开IDEA,选择新建工程</h3><p><img src="/posts/3c2307c/1.png" alt="image"></p><h3 id="2-选择Spring，勾选需要的配置，点击-Next"><a href="#2-选择Spring，勾选需要的配置，点击-Next" class="headerlink" title="2.选择Spring，勾选需要的配置，点击 Next"></a>2.选择Spring，勾选需要的配置，点击 Next</h3><p><img src="/posts/3c2307c/2.png" alt="image"></p><h3 id="3-设置项目的名称，点击-Finish"><a href="#3-设置项目的名称，点击-Finish" class="headerlink" title="3.设置项目的名称，点击 Finish"></a>3.设置项目的名称，点击 Finish</h3><p><img src="/posts/3c2307c/3.png" alt="image"></p><h3 id="4-等待下载所需依赖包文件"><a href="#4-等待下载所需依赖包文件" class="headerlink" title="4.等待下载所需依赖包文件"></a>4.等待下载所需依赖包文件</h3><p><img src="/posts/3c2307c/4.png" alt="image"></p><h3 id="5-若下载失败，选择重下"><a href="#5-若下载失败，选择重下" class="headerlink" title="5.若下载失败，选择重下"></a>5.若下载失败，选择重下</h3><p><img src="/posts/3c2307c/5.png" alt="image"></p><h3 id="6-成功创建Spring项目"><a href="#6-成功创建Spring项目" class="headerlink" title="6.成功创建Spring项目"></a>6.成功创建Spring项目</h3><p><img src="/posts/3c2307c/6.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows中Node.js的安装配置</title>
      <link href="/posts/a147f368.html"/>
      <url>/posts/a147f368.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Window中Node.js及npm详细安装配置过程，npm是Nodejs下的包管理工具，在安装Nodejs时，会自动安装npm。</p></blockquote><h3 id="一、安装过程"><a href="#一、安装过程" class="headerlink" title="一、安装过程"></a>一、安装过程</h3><h4 id="官网下载-Nodejs-的安装包："><a href="#官网下载-Nodejs-的安装包：" class="headerlink" title="官网下载 Nodejs 的安装包："></a>官网下载 Nodejs 的安装包：</h4><p><img src="/posts/a147f368/1.png" alt="image"></p><h4 id="双击安装："><a href="#双击安装：" class="headerlink" title="双击安装："></a>双击安装：</h4><p><img src="/posts/a147f368/2.png" alt="image"></p><p><img src="/posts/a147f368/3.png" alt="image"></p><p><img src="/posts/a147f368/4.png" alt="image"></p><p><img src="/posts/a147f368/5.png" alt="image"></p><p><img src="/posts/a147f368/6.png" alt="image"></p><p><img src="/posts/a147f368/7.png" alt="image"></p><p><img src="/posts/a147f368/8.png" alt="image"></p><p><strong>点击 Finish 完成安装。</strong></p><h4 id="安装完成后目录如下："><a href="#安装完成后目录如下：" class="headerlink" title="安装完成后目录如下："></a>安装完成后目录如下：</h4><p><img src="/posts/a147f368/9.png" alt="image"></p><h4 id="安装完成后的环境变量："><a href="#安装完成后的环境变量：" class="headerlink" title="安装完成后的环境变量："></a>安装完成后的环境变量：</h4><p>安装完成后，环境变量会自动添加。此时系统环境变量的 Path 中会多出“D:\nodejs\”这么一条信息；用户环境变量的 Path 中会多出“C:\Users\Admin\AppData\Roaming\npm”这么一条信息。<br>windows+r键，打开cmd</p><p><img src="/posts/a147f368/10.png" alt="image"></p><p>检查 node 和 npm 的版本，查看是否可用：</p><p><img src="/posts/a147f368/11.png" alt="image"></p><h3 id="二、环境配置详细过程"><a href="#二、环境配置详细过程" class="headerlink" title="二、环境配置详细过程"></a>二、环境配置详细过程</h3><p><strong>1、再看看另外2个目录，npm的本地仓库跑在系统盘c盘的用户目录了(没见到npm-cache是因为没有用过，一使用缓存目录就生成了)，这里我们将把这2个目录移动回到D:\nodejs中</strong><br><img src="/posts/a147f368/12.png" alt="image"></p><p>先如下图，在D:\nodejs中建立2个目录</p><p><img src="/posts/a147f368/13.png" alt="image"></p><p>运行以下两条命令，设置npm的本地仓库和缓存目录：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> prefix <span class="token string">"D:<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_global"</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> cache <span class="token string">"D:<span class="token entity" title="\n">\n</span>doejs<span class="token entity" title="\n">\n</span>ode_cache"</span></code></pre><p>以上命令运行后，可以通过 <strong>npm config list</strong> 命令显示npm的所有配置信息：</p><p><img src="/posts/a147f368/14.png" alt="image"></p><p>也可以直接打开 npm 的配置文件，直接修改其中的内容：</p><p><img src="/posts/a147f368/15.png" alt="image"></p><p><strong>2、换源（因为此时通过 npm install 安装时速度会非常慢）</strong></p><p><strong>方法一：输入以下命令，直接对cnpm的镜像站进行配置。以后在进行插件的安装时还是直接使用 npm install 命令：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org</code></pre><p><img src="/posts/a147f368/16.png" alt="image"></p><p><strong>方法二：使用阿里定制的 cnpm 命令行工具代替默认的 npm，输入下面代码进行安装：</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p><img src="/posts/a147f368/17.png" alt="image"></p><p>安装 cnpm 后，D:\nodejs\node_global\目录下会增加如下内容，cnpm命令就是在该目录下：</p><p><img src="/posts/a147f368/18.png" alt="image"></p><p>以后安装插件时只需要使用 cnpm intall 命令即可。</p><p>但别忘了将 cnpm 的本地仓库和缓存目录也改成我们刚才新建的 D:\nodejs\node_global 和 D:\nodejs\node_cache ：</p><pre class="language-bash" data-language="bash"><code class="language-bash">cnpm config <span class="token builtin class-name">set</span> prefix <span class="token string">"D:<span class="token entity" title="\n">\n</span>odejs<span class="token entity" title="\n">\n</span>ode_global"</span>cnpm config <span class="token builtin class-name">set</span> cache <span class="token string">"D:<span class="token entity" title="\n">\n</span>doejs<span class="token entity" title="\n">\n</span>ode_cache"</span></code></pre><p><img src="/posts/a147f368/19.png" alt="image"></p><p>也可以直接打开 cnpm 的配置文件，直接修改其中的内容：</p><p><img src="/posts/a147f368/20.png" alt="image"></p><p><strong>注意：</strong> 这里运行 cnpm 命令时会出现如下图所示的情况：</p><p><img src="/posts/a147f368/21.png" alt="image"></p><p><strong>其实在运行 cnpm 命令前要修改环境变量的配置：</strong></p><p>增加环境变量NODE_PATH 内容是：D:\nodejs\node_global\node_modules</p><p><img src="/posts/a147f368/22.png" alt="image"></p><p>然后点击Path进行修改，因为我们有些新的命令在“D:\nodejs\node_global\”目录中（以后通过npm或cnpm安装的插件的命令可能存在于此，包括刚才安装的cnpm的命令也在此），而该目录并没有在环境变量中，所以系统找不到所要执行的命令：</p><p><img src="/posts/a147f368/23.png" alt="image"></p><p><strong>修改后记得重新打开 命令提示符 执行命令。</strong></p><p>通过以上的 环境配置 后，以后不管是通过 <strong>npm install</strong> 还是 <strong>cnpm install</strong> 来安装我们需要的模块，所安装的模块都会放入“D:\nodejs\node_global\node_modules\”目录中，包括刚才我们安装的 cnpm 也在该目录中，而并没有在“D:\nodejs\node_modules”中。因为我们执行了 npm config set prefix “D:\nodejs\node_global” 和 cnpm config set prefix “D:\nodejs\node_global”，这也是为什么在上面我们说模块目录会改变的原因。</p><h3 id="三、更新-npm"><a href="#三、更新-npm" class="headerlink" title="三、更新 npm"></a>三、更新 npm</h3><p>执行如下命令进行更新（该命令既是安装命令，又是更新命令）：</p><pre class="language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> <span class="token function">npm</span> -g</code></pre><p>或者</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">npm</span> -g</code></pre><p>通过 npm -v 命令查看 npm 的版本信息：<br><img src="/posts/a147f368/24.png" alt="image"></p><p>与之前的6.13.4相比，确实更新了。</p><p>此时“D:\nodejs\node_global\node_modules\”目录中会存在我们已安装的如下模块：<br><img src="/posts/a147f368/25.png" alt="image"></p><p>相当于新更新的 npm 模块也被安装到了该目录下。</p><p>至此，恭喜你所有的安装、配置、换源操作都已结束，可以开心的使用 npm 了。</p>]]></content>
      
      
      <categories>
          
          <category> EnvConfig </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EnvConfig </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客系统的搭建</title>
      <link href="/posts/d55a993f.html"/>
      <url>/posts/d55a993f.html</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><blockquote><p>Hexo可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。通过markdown编写文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器，或上传到Github、Gitee等仓库托管平台，在开启该类仓库的Pages服务后便可使用。简而言之：hexo是个静态页面生成、上传的工具。</p></blockquote><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h3><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub、Gitee或Coding上，是搭建博客的首选框架。</p><h3 id="Hexo的搭建步骤"><a href="#Hexo的搭建步骤" class="headerlink" title="Hexo的搭建步骤"></a>Hexo的搭建步骤</h3><ul><li>安装Git</li><li>安装Node.js(其中就包含了npm)</li><li>本地安装Hexo</li><li>验证是否能在本地浏览器访问Hexo博客系统</li><li>使用Github创建个人仓库</li><li>使用Gitee创建个人仓库</li><li>使用Coding创建个人仓库</li><li>生成SSH添加到Github,Gitee或Coding中</li><li>将本地的Hexo部署到以上创建的仓库中（可以同时上传到多个仓库中）</li><li>开启各个仓库的Pages服务（免费的）</li><li>访问个人博客（可以开始使用了）</li><li>本地写文章</li><li>同步上传到所需要部署的仓库中</li></ul><h3 id="一、安装Git"><a href="#一、安装Git" class="headerlink" title="一、安装Git"></a>一、安装Git</h3><p><a href="https://git-scm.com/downloads">Git官网地址</a></p><h3 id="二、安装Node-js"><a href="#二、安装Node-js" class="headerlink" title="二、安装Node.js"></a>二、安装Node.js</h3><p><a href="https://nodejs.org/zh-cn/">nodejs官网地址</a></p><h3 id="三、本地安装Hexo"><a href="#三、本地安装Hexo" class="headerlink" title="三、本地安装Hexo"></a>三、本地安装Hexo</h3><p>前面的Git和Nodejs安装好之后，就可以正式安装Hexo了。</p><p>建议在执行后续的安装命令时将npm的安装源更换成国内的镜像（淘宝的镜像），不然后续用到的npm安装命令都会很缓慢，而且可能还会在中途卡死，所以建议换源。使用以命令设置npm的镜像源：(也可以手动打开“C:\Users\Administrator”目录下的“.npmrc”文件，增加“registry&#x3D;<a href="https://registry.npm.taobao.org”/">https://registry.npm.taobao.org”</a> 即可，其中“Administrator”为你的用户名)</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org</code></pre><p>使用如下命令查看npm是否换源成功：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config get registry</code></pre><p>若显示“<a href="https://registry.npm.taobao.org”,则说明换源成功!/">https://registry.npm.taobao.org”，则说明换源成功！</a></p><p>npm换源成功后，使用如下命令安装Hexo到本地，别忘了“-g”这个参数：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>之后可以在任意文件目录中创建一个文件夹用来存放你的博客项目，比如名为 myblog,然后利用命令提示符的cd命令进入到该文件夹下，利用hexo来初始化你的博客系统：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo init  <span class="token comment"># 注意，该命令一定是要在你新建的那个文件夹目录下执行。</span></code></pre><p>或者你也可以直接使用“hexo init myblog”命令，该命令会直接在当前目录下创建名为“myblog-hexo”的文件，并初始化项目。（其实hexo init命令本质上是利用Git从远端克隆项目到本地）</p><p>如果初始化过程中没有出现“error”（忽略WARN），那么初始化后，你的文件目录看起来应该是这样的：<br><img src="/posts/d55a993f/1.png" alt="image"><br>如果以上步骤一切正常，那么Hexo在本地的安装就成功了。</p><h3 id="四、验证是否能在本地浏览器访问Hexo博客系统"><a href="#四、验证是否能在本地浏览器访问Hexo博客系统" class="headerlink" title="四、验证是否能在本地浏览器访问Hexo博客系统"></a>四、验证是否能在本地浏览器访问Hexo博客系统</h3><p>继续在以上该项目目录下，运行以下命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo s</code></pre><ul><li>hexo clean 命令用来删除之前生成的前端页面，即public文件夹，此时由于还没有任何前端界面，该目录下没有public文件夹。</li><li>hexo g 命令全称hexo generate，用来生成前端访问的界面，生成的文件会存放在“public”文件夹中</li><li>hexo s 命令全称hexo server 用来开启本地的Hexo服务，开启后可在本地通过浏览器访问生成的页面</li></ul><p>运行以上三条命令后，可在本地打开浏览器，输入网址<strong>127.0.0.1:4000</strong>即可看到你生成的博客页面了，大概长这样：<br><img src="/posts/d55a993f/2.png" alt="image"><br>可以使用 Ctrl+c 把hexo服务关掉。<br>至此，Hexo博客系统才算真正在本地安装成功了。</p><h3 id="五、使用Github创建个人仓库"><a href="#五、使用Github创建个人仓库" class="headerlink" title="五、使用Github创建个人仓库"></a>五、使用Github创建个人仓库</h3><p>到 <a href="https://github.com/">Github官网</a> 注册账号，并记住你的username和邮箱，username最好起得有个性，后面会用到。注册后应该是可以使用 “<a href="https://github.com/%E4%BD%A0%E7%9A%84username%E2%80%9D">https://github.com/你的username”</a> 访问到你的个人主页，该主页会显示出你的代码提交量情况和公开仓库等个人信息。比如我的username为yczlab,那么可以通过<a href="https://github.com/yczlab">https://github.com/yczlab</a> 访问到我的个人主页。<br><strong>注册并登录你的Github后，如下图，点击右上角 New repository，新建仓库：</strong><br><img src="/posts/d55a993f/3.png" alt="image"><br><strong>进行仓库创建时的设置：</strong><br><img src="/posts/d55a993f/4.png" alt="image"><br><strong>创建好该仓库后，进入该仓库,里面暂时只有一个README文件：</strong><br><img src="/posts/d55a993f/5.png" alt="image"><br><strong>点击该仓库右上角的Settings，找到Github Pages:</strong><br><img src="/posts/d55a993f/6.png" alt="image"></p><h3 id="六、使用Gitee创建个人仓库"><a href="#六、使用Gitee创建个人仓库" class="headerlink" title="六、使用Gitee创建个人仓库"></a>六、使用Gitee创建个人仓库</h3><p>到 <a href="https://gitee.com/">Gitee官网</a> 注册账号(Gitee是中国的类似于Github的代码托管平台，访问速度会比Github快很多，建议使用该平台来搭建Hexo)，并记住你的个人空间地址和邮箱，个人空间地址最好起得有个性，后面会用到，这里的个人空间地址并不是你的姓名。（个人空间可以在登录后，点击右上角头像选择“设置”，再选择“个人空间地址”查看并修改）注册后应该是可以使用 “<a href="https://gitee.com/%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E2%80%9D">https://gitee.com/你的个人地址空间”</a> 访问到你的个人主页，该主页会显示出你的代码提交量情况和公开仓库等个人信息。比如我的个人地址空间为yczlab,那么可以通过<a href="https://gitee.com/yczlab">https://gitee.com/yczlab</a> 访问到我的个人主页。<br><strong>注册并登录你的Gitee后，如下图，点击右上角，新建仓库：</strong><br><img src="/posts/d55a993f/7.png" alt="image"><br><strong>进行仓库创建时的设置：</strong><br><img src="/posts/d55a993f/8.png" alt="image"><br><strong>同样创建好该仓库后，进入该仓库，里面暂时只README文件：</strong><br><img src="/posts/d55a993f/9.png" alt="image"><br><strong>点击该仓库右上角的“服务”，再点击“Gitee Pages”:</strong><br><img src="/posts/d55a993f/10.png" alt="image"></p><h3 id="七、使用Coding创建个人仓库"><a href="#七、使用Coding创建个人仓库" class="headerlink" title="七、使用Coding创建个人仓库"></a>七、使用Coding创建个人仓库</h3><p><a href="https://coding.net/">Coding的官网</a>，在Coding中注册、登录、创建仓库，步骤与上面大同小异，这里就不在继续介绍了。本文主要介绍如何利用Hexo将博客系统同时部署到Github和Gitee中。</p><h3 id="八、生成SSH公钥添加到Github-Gitee或Coding中"><a href="#八、生成SSH公钥添加到Github-Gitee或Coding中" class="headerlink" title="八、生成SSH公钥添加到Github,Gitee或Coding中"></a>八、生成SSH公钥添加到Github,Gitee或Coding中</h3><p>以下方法为在Windows中生成并使用SSH工具</p><ul><li><p><strong>生成ssh公钥添加到Github</strong><br>保证 Git 已经正确安装好。进入“C:\Users\Administrator.ssh”目录下（其中Administrator为你的用户名），鼠标右键点击打开“Git Bash Here”，输入以下命令，并连续按三次回车键：</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱名称"</span> -f <span class="token string">"产生的公私钥名称"</span></code></pre><p>其中“你的邮箱”为你注册Github时使用的邮箱地址，比如QQ邮箱；“产生的公私钥名称”为你想要为其命名的名称，若不命名，则会使用默认的名称，会覆盖以前也使用默认名称的公私钥文件。比如我执行 ‘ssh-keygen -t rsa -C “<a href="mailto:&#50;&#54;&#56;&#x35;&#55;&#x33;&#51;&#x38;&#x33;&#x32;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;">&#50;&#54;&#56;&#x35;&#55;&#x33;&#51;&#x38;&#x33;&#x32;&#64;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a>“ -f “github_rsa” ‘，结果如下：<br><img src="/posts/d55a993f/11.png" alt="image"><br>此时会在当前目录下生成两个文件“github_rsa”和“github_ras.pub”，一个为私钥（不要公开），另一个为私钥（可以公开）：<br><img src="/posts/d55a993f/12.png" alt="image"><br>用自己注册的账号登录Github官网，点击右上角的”Settings”——&gt;点击”SSH and GPG keys”——&gt;点击“New SSH key”，添加刚刚生成的公钥：<br><img src="/posts/d55a993f/13.png" alt="image"><br>现在还不能正常使用，因为在新生成这个公私钥文件的时候不是采用的默认命名，而是带了“-f”参数对该公私钥文件进行了重命名，所以本地的ssh服务可能就找不到我们新生成的公私钥文件，所以还需要在本地配置一下，才能正常使用。在该公私钥文件所在的目录下新建一个名为“config”的文件(注意该文件没有后缀)，往该文件中写入以下的信息，并保存：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Github的公钥配置</span>Host github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/github_rsa <span class="token comment">#注意，最后这个地方换成你在生成该公私钥时的命名，比如我刚刚在生成时用的github_rsa，这里我就写成github_rsa</span></code></pre><p>输入以下命令，验证是否可用：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T -v git@github.com</code></pre><p>显示以下信息，说明验证成功，可以使用：<br><img src="/posts/d55a993f/14.png" alt="image"><br>如果该过程没有成功，建议百度自行解决一下。<br>至此，SSH公钥就成功添加到Github，并可以使用了。可以使用git命令对Github中的仓库进行克隆和上传代码。</p></li><li><p><strong>生成ssh公钥添加到Gitee</strong><br>方法和上面的差不多，只是在生成的公私钥的时候注意命名不要和上面已有的公私钥名称重复了，邮箱（注册Gitee账号时用的邮箱）可以重复。比如：</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"2685733832@qq.com"</span> -f <span class="token string">"gitee_rsa"</span></code></pre><p><img src="/posts/d55a993f/15.png" alt="image"><br>此时会在当前目录下生成两个文件“gitee_rsa”和“gitee_ras.pub”，一个为私钥（不要公开），另一个为私钥（可以公开）：<br><img src="/posts/d55a993f/16.png" alt="image"><br>用自己注册的账号登录Gitee官网，点击右上角的”头像”——&gt;点击”设置”——&gt;点击“SSH公钥”，添加刚刚生成的公钥：<br><img src="/posts/d55a993f/17.png" alt="image"><br>同样，现在还不能正常使用，还需要在本地配置一下，才能正常使用。在该公私钥文件所在的目录下新建一个名为“config”的文件(注意该文件没有后缀)，如果已有那就不用新建，往该文件中写入以下的信息，并保存：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Gitee的公钥配置</span>Host gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/gitee_rsa <span class="token comment">#注意，最后这个地方换成你在生成该公私钥时的命名，比如我刚刚在生成时用的gitee_rsa，这里我就写成gitee_rsa</span></code></pre><p>输入以下命令，验证是否可用：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T -v git@gitee.com</code></pre><p>显示以下信息，说明验证成功，可以使用：<br><img src="/posts/d55a993f/18.png" alt="image"><br>如果该过程没有成功，建议百度自行解决一下。<br>至此，SSH公钥就成功添加到Gitee，并可以使用了。可以使用git命令对Gitee中的仓库进行克隆和上传代码。</p></li><li><p><strong>生成ssh公钥添加到Coding</strong><br>该过程基本和上面的步骤一样，如有需要，请参照上面的步骤自行添加ssh公钥到Coding中。</p></li></ul><h3 id="九、将本地的Hexo部署到以上创建的仓库中（可以同时上传到多个仓库中）"><a href="#九、将本地的Hexo部署到以上创建的仓库中（可以同时上传到多个仓库中）" class="headerlink" title="九、将本地的Hexo部署到以上创建的仓库中（可以同时上传到多个仓库中）"></a>九、将本地的Hexo部署到以上创建的仓库中（可以同时上传到多个仓库中）</h3><p>在创建好Hexo想要部署到的平台的相应仓库后，便可以配置本地已安装好的Hexo博客系统，使本地的博客系统可以上传到相应的仓库，并供大家访问博客。</p><p>打开本地本地Hexo项目中的配置文件，即“_config.yml”文件，修改其中的以下内容，添加自己想要上传到的平台仓库中（这里我添加了两个,gitee和github）：<br><img src="/posts/d55a993f/19.png" alt="image"><br>然后打开命令提示符，利用cd命令进入该目录下，输入以下命令将本地项目上传到以上指定的仓库中：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment">#生成静态页面至public目录</span>hexo d <span class="token comment">#将.deploy_git目录部署到指定仓库地址</span></code></pre><p>可能 “hexo d” 命令初次运行时会报错，那是因为该项目缺少”hexo-deployer-git”插件，在该项目中使用以下命令安装即可：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-depoyer-git --save</code></pre><p>然后再运行“hexo d”命令，该命令的执行速度可能有点慢，该命令本质是将本地的文件通过git上传到远端，可能中途还会失败。如果失败，就一直执行，直到成功即可。</p><h3 id="十、开启各个仓库的Pages服务（免费的）"><a href="#十、开启各个仓库的Pages服务（免费的）" class="headerlink" title="十、开启各个仓库的Pages服务（免费的）"></a>十、开启各个仓库的Pages服务（免费的）</h3><p>关于各个仓库如何开启Pages服务，在上面创建仓库的步骤中就已说明，这里就不在重复。Github时默认开启Pages的，而Gitee在每次上传后都需要手动刷新。</p><h3 id="十一、访问个人博客（可以开始使用了）"><a href="#十一、访问个人博客（可以开始使用了）" class="headerlink" title="十一、访问个人博客（可以开始使用了）"></a>十一、访问个人博客（可以开始使用了）</h3><p>成功上传后，就可以根据Pages服务中提供的地址访问你的博客了。<br>比如我的地址：<br>Gitee地址：<a href="https://yczlab.gitee.io/">https://yczlab.gitee.io/</a><br>Github地址：<a href="https://yczlab.github.io/">https://yczlab.github.io/</a></p><h3 id="十二、本地写文章"><a href="#十二、本地写文章" class="headerlink" title="十二、本地写文章"></a>十二、本地写文章</h3><p>在本地的Hexo项目文件中利用一下命令生成一篇新的博客：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"博客名称"</span></code></pre><p>以上命令执行后便会在“source_posts\”目录中生成一篇博客文章，可利用MarkDown语法来书写你的博客文章。</p><h3 id="十三、同步上传到所需要部署的仓库中"><a href="#十三、同步上传到所需要部署的仓库中" class="headerlink" title="十三、同步上传到所需要部署的仓库中"></a>十三、同步上传到所需要部署的仓库中</h3><p>在你的文章写好后，执行以下命令同步上传到部署平台上：</p><pre class="language-bash" data-language="bash"><code class="language-bash">hexo ghexo d</code></pre><p>注意：Gitee的Pages服务需要每次上传后手动刷新。</p>]]></content>
      
      
      <categories>
          
          <category> EnvConfig </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EnvConfig </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
